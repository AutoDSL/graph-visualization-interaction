{"id":"node_modules/@antv/layout/lib/layout/dagre/src/add-border-segments.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\add-border-segments.js.map","includedInParent":true,"mtime":1676178923499},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\dagre\\src\\add-border-segments.ts","includedInParent":true,"mtime":1676178923790},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"./util","loc":{"line":3,"column":21,"index":98},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\add-border-segments.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./util\");\nvar addBorderSegments = function (g) {\n    var _a;\n    var dfs = function (v) {\n        var children = g.children(v);\n        var node = g.node(v);\n        if (children === null || children === void 0 ? void 0 : children.length) {\n            children.forEach(function (child) { return dfs(child); });\n        }\n        if (node.hasOwnProperty(\"minRank\")) {\n            node.borderLeft = [];\n            node.borderRight = [];\n            for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; rank += 1) {\n                addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n                addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n            }\n        }\n    };\n    (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { return dfs(child); });\n};\nvar addBorderNode = function (g, prop, prefix, sg, sgNode, rank) {\n    var label = { rank: rank, borderType: prop, width: 0, height: 0 };\n    var prev = sgNode[prop][rank - 1];\n    var curr = (0, util_1.addDummyNode)(g, \"border\", label, prefix);\n    sgNode[prop][rank] = curr;\n    g.setParent(curr, sg);\n    if (prev) {\n        g.setEdge(prev, curr, { weight: 1 });\n    }\n};\nexports.default = addBorderSegments;\n"},"sourceMaps":{"js":{"version":3,"file":"add-border-segments.js","sourceRoot":"","sources":["../../../../src/layout/dagre/src/add-border-segments.ts"],"names":[],"mappings":";;AACA,+BAAsC;AAEtC,IAAM,iBAAiB,GAAG,UAAC,CAAQ;;IACjC,IAAM,GAAG,GAAG,UAAC,CAAS;QACpB,IAAM,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC;QACxB,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,EAAE;YACpB,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK,IAAK,OAAA,GAAG,CAAC,KAAK,CAAC,EAAV,CAAU,CAAC,CAAC;SACzC;QAED,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;YAClC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,KACE,IAAI,IAAI,GAAG,IAAI,CAAC,OAAQ,EAAE,OAAO,GAAG,IAAI,CAAC,OAAQ,GAAG,CAAC,EACrD,IAAI,GAAG,OAAO,EACd,IAAI,IAAI,CAAC,EACT;gBACA,aAAa,CAAC,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrD,aAAa,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aACvD;SACF;IACH,CAAC,CAAC;IAEF,MAAA,CAAC,CAAC,QAAQ,EAAE,0CAAE,OAAO,CAAC,UAAC,KAAK,IAAK,OAAA,GAAG,CAAC,KAAK,CAAC,EAAV,CAAU,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,IAAM,aAAa,GAAG,UACpB,CAAQ,EACR,IAAY,EACZ,MAAc,EACd,EAAU,EACV,MAAiC,EACjC,IAAY;IAEZ,IAAM,KAAK,GAAG,EAAE,IAAI,MAAA,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;IAC9D,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IACpC,IAAM,IAAI,GAAG,IAAA,mBAAY,EAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACtD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IAC1B,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACtB,IAAI,IAAI,EAAE;QACR,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;KACtC;AACH,CAAC,CAAC;AAEF,kBAAe,iBAAiB,CAAC","sourcesContent":["import { Graph, Node } from \"../graph\";\nimport { addDummyNode } from \"./util\";\n\nconst addBorderSegments = (g: Graph) => {\n  const dfs = (v: string) => {\n    const children = g.children(v);\n    const node = g.node(v)!;\n    if (children?.length) {\n      children.forEach((child) => dfs(child));\n    }\n\n    if (node.hasOwnProperty(\"minRank\")) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (\n        let rank = node.minRank!, maxRank = node.maxRank! + 1;\n        rank < maxRank;\n        rank += 1\n      ) {\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n      }\n    }\n  };\n\n  g.children()?.forEach((child) => dfs(child));\n};\n\nconst addBorderNode = (\n  g: Graph,\n  prop: string,\n  prefix: string,\n  sg: string,\n  sgNode: Node<Record<string, any>>,\n  rank: number\n) => {\n  const label = { rank, borderType: prop, width: 0, height: 0 };\n  const prev = sgNode[prop][rank - 1];\n  const curr = addDummyNode(g, \"border\", label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n};\n\nexport default addBorderSegments;\n"]}},"error":null,"hash":"bbb9352b4a25e9178278fb12c0e9eb4a","cacheData":{"env":{}}}