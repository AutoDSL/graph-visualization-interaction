{"id":"node_modules/@antv/layout/lib/layout/dagre/src/normalize.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\normalize.js.map","includedInParent":true,"mtime":1676178923737},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\dagre\\src\\normalize.ts","includedInParent":true,"mtime":1676178924022},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"./util","loc":{"line":3,"column":21,"index":98},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\normalize.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./util\");\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nvar run = function (g) {\n    g.graph().dummyChains = [];\n    g.edges().forEach(function (edge) { return normalizeEdge(g, edge); });\n};\nvar normalizeEdge = function (g, e) {\n    var v = e.v;\n    var vRank = g.node(v).rank;\n    var w = e.w;\n    var wRank = g.node(w).rank;\n    var name = e.name;\n    var edgeLabel = g.edge(e);\n    var labelRank = edgeLabel.labelRank;\n    if (wRank === vRank + 1)\n        return;\n    g.removeEdgeObj(e);\n    var graph = g.graph();\n    var dummy;\n    var attrs;\n    var i;\n    for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n        edgeLabel.points = [];\n        attrs = {\n            edgeLabel: edgeLabel,\n            width: 0,\n            height: 0,\n            edgeObj: e,\n            rank: vRank,\n        };\n        dummy = (0, util_1.addDummyNode)(g, \"edge\", attrs, \"_d\");\n        if (vRank === labelRank) {\n            attrs.width = edgeLabel.width;\n            attrs.height = edgeLabel.height;\n            attrs.dummy = \"edge-label\";\n            attrs.labelpos = edgeLabel.labelpos;\n        }\n        g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n        if (i === 0) {\n            if (!graph.dummyChains)\n                graph.dummyChains = [];\n            graph.dummyChains.push(dummy);\n        }\n        v = dummy;\n    }\n    g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n};\nvar undo = function (g) {\n    var _a;\n    (_a = g.graph().dummyChains) === null || _a === void 0 ? void 0 : _a.forEach(function (v) {\n        var node = g.node(v);\n        var origLabel = node.edgeLabel;\n        var w;\n        if (node.edgeObj) {\n            g.setEdgeObj(node.edgeObj, origLabel);\n        }\n        var currentV = v;\n        while (node.dummy) {\n            w = g.successors(currentV)[0];\n            g.removeNode(currentV);\n            origLabel.points.push({ x: node.x, y: node.y });\n            if (node.dummy === \"edge-label\") {\n                origLabel.x = node.x;\n                origLabel.y = node.y;\n                origLabel.width = node.width;\n                origLabel.height = node.height;\n            }\n            currentV = w;\n            node = g.node(currentV);\n        }\n    });\n};\nexports.default = { run: run, undo: undo };\n"},"sourceMaps":{"js":{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../../../../src/layout/dagre/src/normalize.ts"],"names":[],"mappings":"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","sourcesContent":["import { Edge, Graph, Node } from \"../graph\";\nimport { addDummyNode } from \"./util\";\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nconst run = (g: Graph) => {\n  g.graph().dummyChains = [];\n  g.edges().forEach((edge) => normalizeEdge(g, edge));\n};\n\nconst normalizeEdge = (g: Graph, e: Edge) => {\n  let v = e.v;\n  let vRank = g.node(v)!.rank as number;\n  const w = e.w;\n  const wRank = g.node(w)!.rank as number;\n  const name = e.name;\n  const edgeLabel = g.edge(e)!;\n  const labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdgeObj(e);\n\n  const graph = g.graph();\n\n  let dummy: string;\n  let attrs: Node<Record<string, any>>;\n  let i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      edgeLabel,\n      width: 0,\n      height: 0,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = addDummyNode(g, \"edge\", attrs, \"_d\");\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width!;\n      attrs.height = edgeLabel.height!;\n      attrs.dummy = \"edge-label\";\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      if (!graph.dummyChains) graph.dummyChains = [];\n      graph.dummyChains!.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n};\n\nconst undo = (g: Graph) => {\n  g.graph().dummyChains?.forEach((v) => {\n    let node = g.node(v)!;\n    const origLabel = node.edgeLabel;\n    let w;\n    if (node.edgeObj) {\n      g.setEdgeObj(node.edgeObj, origLabel);\n    }\n\n    let currentV  = v;\n    while (node.dummy) {\n      w = g.successors(currentV)![0];\n      g.removeNode(currentV);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === \"edge-label\") {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      currentV = w;\n      node = g.node(currentV)!;\n    }\n  });\n};\n\nexport default { run, undo };\n"]}},"error":null,"hash":"5845b5dab7b9d49fb0cb0ad5d4dd5d45","cacheData":{"env":{}}}