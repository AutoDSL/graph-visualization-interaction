{"id":"node_modules/@antv/layout/lib/layout/grid.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\grid.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\src\\layout\\grid.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1674179681168},{"name":"../util","loc":{"line":24,"column":21,"index":1047},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\grid.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\util\\index.js"},{"name":"./base","loc":{"line":25,"column":21,"index":1080},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\grid.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\base.js"}],"generated":{"js":"\"use strict\";\n/**\n * @fileOverview grid layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridLayout = void 0;\nvar util_1 = require(\"../util\");\nvar base_1 = require(\"./base\");\n/**\n * 网格布局\n */\nvar GridLayout = /** @class */ (function (_super) {\n    __extends(GridLayout, _super);\n    function GridLayout(options) {\n        var _this = _super.call(this) || this;\n        /** 布局起始点 */\n        _this.begin = [0, 0];\n        /** prevents node overlap, may overflow boundingBox if not enough space */\n        _this.preventOverlap = true;\n        /** extra spacing around nodes when preventOverlap: true */\n        _this.preventOverlapPadding = 10;\n        /** uses all available space on false, uses minimal space on true */\n        _this.condense = false;\n        /** a sorting function to order the nodes; e.g. function(a, b){ return a.datapublic ('weight') - b.data('weight') } */\n        _this.sortBy = \"degree\";\n        _this.nodes = [];\n        _this.edges = [];\n        _this.width = 300;\n        _this.height = 300;\n        _this.row = 0;\n        _this.col = 0;\n        _this.cellWidth = 0;\n        _this.cellHeight = 0;\n        _this.cellUsed = {};\n        _this.id2manPos = {};\n        /** 迭代结束的回调函数 */\n        _this.onLayoutEnd = function () { };\n        _this.updateCfg(options);\n        return _this;\n    }\n    GridLayout.prototype.getDefaultCfg = function () {\n        return {\n            begin: [0, 0],\n            preventOverlap: true,\n            preventOverlapPadding: 10,\n            condense: false,\n            rows: undefined,\n            cols: undefined,\n            position: undefined,\n            sortBy: \"degree\",\n            nodeSize: 30\n        };\n    };\n    /**\n     * 执行布局\n     */\n    GridLayout.prototype.execute = function () {\n        var self = this;\n        var nodes = self.nodes, edges = self.edges, begin = self.begin;\n        var n = nodes.length;\n        if (n === 0) {\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return {\n                nodes: nodes,\n                edges: edges\n            };\n        }\n        if (n === 1) {\n            nodes[0].x = begin[0];\n            nodes[0].y = begin[1];\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return {\n                nodes: nodes,\n                edges: edges,\n            };\n        }\n        var sortBy = self.sortBy, width = self.width, height = self.height;\n        var condense = self.condense, preventOverlapPadding = self.preventOverlapPadding, preventOverlap = self.preventOverlap, paramNodeSpacing = self.nodeSpacing, paramNodeSize = self.nodeSize;\n        var layoutNodes = [];\n        nodes.forEach(function (node) {\n            layoutNodes.push(node);\n        });\n        var nodeIdxMap = {};\n        layoutNodes.forEach(function (node, i) {\n            nodeIdxMap[node.id] = i;\n        });\n        if (sortBy === \"degree\" ||\n            !(0, util_1.isString)(sortBy) ||\n            layoutNodes[0][sortBy] === undefined) {\n            sortBy = \"degree\";\n            if ((0, util_1.isNaN)(nodes[0].degree)) {\n                var values_1 = (0, util_1.getDegree)(layoutNodes.length, nodeIdxMap, edges);\n                layoutNodes.forEach(function (node, i) {\n                    node.degree = values_1[i].all;\n                });\n            }\n        }\n        // sort nodes by value\n        layoutNodes.sort(function (n1, n2) { return n2[sortBy] - n1[sortBy]; });\n        if (!width && typeof window !== \"undefined\") {\n            width = window.innerWidth;\n        }\n        if (!height && typeof window !== \"undefined\") {\n            height = window.innerHeight;\n        }\n        var oRows = self.rows;\n        var oCols = self.cols != null ? self.cols : self.columns;\n        self.cells = n;\n        // if rows or columns were set in self, use those values\n        if (oRows != null && oCols != null) {\n            self.rows = oRows;\n            self.cols = oCols;\n        }\n        else if (oRows != null && oCols == null) {\n            self.rows = oRows;\n            self.cols = Math.ceil(self.cells / self.rows);\n        }\n        else if (oRows == null && oCols != null) {\n            self.cols = oCols;\n            self.rows = Math.ceil(self.cells / self.cols);\n        }\n        else {\n            // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n            // width/height * splits^2 = cells where splits is number of times to split width\n            self.splits = Math.sqrt((self.cells * self.height) / self.width);\n            self.rows = Math.round(self.splits);\n            self.cols = Math.round((self.width / self.height) * self.splits);\n        }\n        self.rows = Math.max(self.rows, 1);\n        self.cols = Math.max(self.cols, 1);\n        if (self.cols * self.rows > self.cells) {\n            // otherwise use the automatic values and adjust accordingly\n            // if rounding was up, see if we can reduce rows or columns\n            var sm = self.small();\n            var lg = self.large();\n            // reducing the small side takes away the most cells, so try it first\n            if ((sm - 1) * lg >= self.cells) {\n                self.small(sm - 1);\n            }\n            else if ((lg - 1) * sm >= self.cells) {\n                self.large(lg - 1);\n            }\n        }\n        else {\n            // if rounding was too low, add rows or columns\n            while (self.cols * self.rows < self.cells) {\n                var sm = self.small();\n                var lg = self.large();\n                // try to add to larger side first (adds less in multiplication)\n                if ((lg + 1) * sm >= self.cells) {\n                    self.large(lg + 1);\n                }\n                else {\n                    self.small(sm + 1);\n                }\n            }\n        }\n        self.cellWidth = width / self.cols;\n        self.cellHeight = height / self.rows;\n        if (condense) {\n            self.cellWidth = 0;\n            self.cellHeight = 0;\n        }\n        if (preventOverlap || paramNodeSpacing) {\n            var nodeSpacing_1 = (0, util_1.getFuncByUnknownType)(10, paramNodeSpacing);\n            var nodeSize_1 = (0, util_1.getFuncByUnknownType)(30, paramNodeSize, false);\n            layoutNodes.forEach(function (node) {\n                if (!node.x || !node.y) {\n                    // for bb\n                    node.x = 0;\n                    node.y = 0;\n                }\n                var res = nodeSize_1(node) || 30;\n                var nodeW;\n                var nodeH;\n                if ((0, util_1.isArray)(res)) {\n                    nodeW = res[0];\n                    nodeH = res[1];\n                }\n                else {\n                    nodeW = res;\n                    nodeH = res;\n                }\n                var p = nodeSpacing_1 !== undefined ? nodeSpacing_1(node) : preventOverlapPadding;\n                var w = nodeW + p;\n                var h = nodeH + p;\n                self.cellWidth = Math.max(self.cellWidth, w);\n                self.cellHeight = Math.max(self.cellHeight, h);\n            });\n        }\n        self.cellUsed = {}; // e.g. 'c-0-2' => true\n        // to keep track of current cell position\n        self.row = 0;\n        self.col = 0;\n        // get a cache of all the manual positions\n        self.id2manPos = {};\n        for (var i = 0; i < layoutNodes.length; i++) {\n            var node = layoutNodes[i];\n            var rcPos = void 0;\n            if (self.position) {\n                rcPos = self.position(node);\n            }\n            if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n                // must have at least row or col def'd\n                var pos = {\n                    row: rcPos.row,\n                    col: rcPos.col\n                };\n                if (pos.col === undefined) {\n                    // find unused col\n                    pos.col = 0;\n                    while (self.used(pos.row, pos.col)) {\n                        pos.col++;\n                    }\n                }\n                else if (pos.row === undefined) {\n                    // find unused row\n                    pos.row = 0;\n                    while (self.used(pos.row, pos.col)) {\n                        pos.row++;\n                    }\n                }\n                self.id2manPos[node.id] = pos;\n                self.use(pos.row, pos.col);\n            }\n            self.getPos(node);\n        }\n        if (self.onLayoutEnd)\n            self.onLayoutEnd();\n        return {\n            edges: edges,\n            nodes: layoutNodes\n        };\n    };\n    GridLayout.prototype.small = function (val) {\n        var self = this;\n        var res;\n        var rows = self.rows || 5;\n        var cols = self.cols || 5;\n        if (val == null) {\n            res = Math.min(rows, cols);\n        }\n        else {\n            var min = Math.min(rows, cols);\n            if (min === self.rows) {\n                self.rows = val;\n            }\n            else {\n                self.cols = val;\n            }\n        }\n        return res;\n    };\n    GridLayout.prototype.large = function (val) {\n        var self = this;\n        var res;\n        var rows = self.rows || 5;\n        var cols = self.cols || 5;\n        if (val == null) {\n            res = Math.max(rows, cols);\n        }\n        else {\n            var max = Math.max(rows, cols);\n            if (max === self.rows) {\n                self.rows = val;\n            }\n            else {\n                self.cols = val;\n            }\n        }\n        return res;\n    };\n    GridLayout.prototype.used = function (row, col) {\n        var self = this;\n        return self.cellUsed[\"c-\".concat(row, \"-\").concat(col)] || false;\n    };\n    GridLayout.prototype.use = function (row, col) {\n        var self = this;\n        self.cellUsed[\"c-\".concat(row, \"-\").concat(col)] = true;\n    };\n    GridLayout.prototype.moveToNextCell = function () {\n        var self = this;\n        var cols = self.cols || 5;\n        self.col++;\n        if (self.col >= cols) {\n            self.col = 0;\n            self.row++;\n        }\n    };\n    GridLayout.prototype.getPos = function (node) {\n        var self = this;\n        var begin = self.begin, cellWidth = self.cellWidth, cellHeight = self.cellHeight;\n        var x;\n        var y;\n        // see if we have a manual position set\n        var rcPos = self.id2manPos[node.id];\n        if (rcPos) {\n            x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n            y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n        }\n        else {\n            // otherwise set automatically\n            while (self.used(self.row, self.col)) {\n                self.moveToNextCell();\n            }\n            x = self.col * cellWidth + cellWidth / 2 + begin[0];\n            y = self.row * cellHeight + cellHeight / 2 + begin[1];\n            self.use(self.row, self.col);\n            self.moveToNextCell();\n        }\n        node.x = x;\n        node.y = y;\n    };\n    GridLayout.prototype.getType = function () {\n        return \"grid\";\n    };\n    return GridLayout;\n}(base_1.Base));\nexports.GridLayout = GridLayout;\n"},"sourceMaps":{"js":{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../src/layout/grid.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;AAEH,gCAAoF;AACpF,+BAA8B;AAe9B;;GAEG;AACH;IAAgC,8BAAI;IAoElC,oBAAY,OAA2B;QAAvC,YACE,iBAAO,SAER;QAtED,YAAY;QACL,WAAK,GAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAElC,0EAA0E;QACnE,oBAAc,GAAY,IAAI,CAAC;QAEtC,2DAA2D;QACpD,2BAAqB,GAAW,EAAE,CAAC;QAE1C,oEAAoE;QAC7D,cAAQ,GAAY,KAAK,CAAC;QAgBjC,sHAAsH;QAC/G,YAAM,GAAW,QAAQ,CAAC;QAI1B,WAAK,GAAY,EAAE,CAAC;QAEpB,WAAK,GAAW,EAAE,CAAC;QAEnB,WAAK,GAAW,GAAG,CAAC;QAEpB,YAAM,GAAW,GAAG,CAAC;QAIpB,SAAG,GAAW,CAAC,CAAC;QAEhB,SAAG,GAAW,CAAC,CAAC;QAMhB,eAAS,GAAW,CAAC,CAAC;QAEtB,gBAAU,GAAW,CAAC,CAAC;QAEvB,cAAQ,GAEZ,EAAE,CAAC;QAEC,eAAS,GAKb,EAAE,CAAC;QAEP,gBAAgB;QACT,iBAAW,GAAe,cAAO,CAAC,CAAC;QAIxC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;;IAC1B,CAAC;IAEM,kCAAa,GAApB;QACE,OAAO;YACL,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YACb,cAAc,EAAE,IAAI;YACpB,qBAAqB,EAAE,EAAE;YACzB,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,SAAS;YACnB,MAAM,EAAE,QAAQ;YAChB,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,4BAAO,GAAd;QACE,IAAM,IAAI,GAAG,IAAI,CAAC;QACV,IAAA,KAAK,GAAmB,IAAI,MAAvB,EAAE,KAAK,GAAY,IAAI,MAAhB,EAAE,KAAK,GAAK,IAAI,MAAT,CAAU;QACrC,IAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,EAAE;YACX,IAAI,IAAI,CAAC,WAAW;gBAAE,IAAI,CAAC,WAAW,EAAE,CAAC;YACzC,OAAO;gBACL,KAAK,OAAA;gBACL,KAAK,OAAA;aACN,CAAC;SACH;QACD,IAAI,CAAC,KAAK,CAAC,EAAE;YACX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,IAAI,CAAC,WAAW;gBAAE,IAAI,CAAC,WAAW,EAAE,CAAC;YACzC,OAAO;gBACL,KAAK,OAAA;gBACL,KAAK,OAAA;aACN,CAAC;SACH;QAEK,IAAA,MAAM,GAAoB,IAAI,OAAxB,EAAE,KAAK,GAAa,IAAI,MAAjB,EAAE,MAAM,GAAK,IAAI,OAAT,CAAU;QAC7B,IAAA,QAAQ,GAAoG,IAAI,SAAxG,EAAE,qBAAqB,GAA6E,IAAI,sBAAjF,EAAE,cAAc,GAA6D,IAAI,eAAjE,EAAe,gBAAgB,GAA8B,IAAI,YAAlC,EAAY,aAAa,GAAK,IAAI,SAAT,CAAU;QAEzH,IAAM,WAAW,GAAY,EAAE,CAAC;QAChC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;YACjB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,IAAM,UAAU,GAAa,EAAE,CAAC;QAChC,WAAW,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,CAAC;YAC1B,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,IACE,MAAM,KAAK,QAAQ;YACnB,CAAC,IAAA,eAAQ,EAAC,MAAM,CAAC;YAChB,WAAW,CAAC,CAAC,CAAS,CAAC,MAAM,CAAC,KAAK,SAAS,EAC7C;YACA,MAAM,GAAG,QAAQ,CAAC;YAClB,IAAI,IAAA,YAAK,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBAC1B,IAAM,QAAM,GAAG,IAAA,gBAAS,EAAC,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;gBAChE,WAAW,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,CAAC;oBAC1B,IAAI,CAAC,MAAM,GAAG,QAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC9B,CAAC,CAAC,CAAC;aACJ;SACF;QACD,sBAAsB;QACtB,WAAW,CAAC,IAAI,CACd,UAAC,EAAE,EAAE,EAAE,IAAK,OAAC,EAAU,CAAC,MAAM,CAAC,GAAI,EAAU,CAAC,MAAM,CAAC,EAAzC,CAAyC,CACtD,CAAC;QAEF,IAAI,CAAC,KAAK,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC3C,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC;SAC3B;QACD,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC5C,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC;SAC7B;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;QAC3D,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,wDAAwD;QACxD,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;YAClC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;SACnB;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;YACzC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/C;aAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;YACzC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/C;aAAM;YACL,+HAA+H;YAC/H,iFAAiF;YACjF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACnC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE;YACtC,4DAA4D;YAC5D,2DAA2D;YAC3D,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAY,CAAC;YAClC,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAY,CAAC;YAElC,qEAAqE;YACrE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC/B,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;aACpB;iBAAM,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE;gBACtC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;aACpB;SACF;aAAM;YACL,+CAA+C;YAC/C,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE;gBACzC,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAY,CAAC;gBAClC,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAY,CAAC;gBAElC,gEAAgE;gBAChE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE;oBAC/B,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;iBACpB;qBAAM;oBACL,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;iBACpB;aACF;SACF;QAED,IAAI,CAAC,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QAErC,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;SACrB;QAGD,IAAI,cAAc,IAAI,gBAAgB,EAAE;YACtC,IAAM,aAAW,GAAa,IAAA,2BAAoB,EAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;YACzE,IAAM,UAAQ,GAAa,IAAA,2BAAoB,EAAC,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;YAC1E,WAAW,CAAC,OAAO,CAAC,UAAC,IAAI;gBACvB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;oBACtB,SAAS;oBACT,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;iBACZ;gBAED,IAAM,GAAG,GAAG,UAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;gBAEjC,IAAI,KAAK,CAAC;gBACV,IAAI,KAAK,CAAC;gBAEV,IAAI,IAAA,cAAO,EAAC,GAAG,CAAC,EAAE;oBAChB,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBACf,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;iBAChB;qBAAM;oBACL,KAAK,GAAG,GAAG,CAAC;oBACZ,KAAK,GAAG,GAAG,CAAC;iBACb;gBAED,IAAM,CAAC,GAAG,aAAW,KAAK,SAAS,CAAC,CAAC,CAAC,aAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC;gBAEhF,IAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;gBACpB,IAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;gBAEpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,uBAAuB;QAE3C,yCAAyC;QACzC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QAEb,0CAA0C;QAC1C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,KAAK,SAAA,CAAC;YACV,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC7B;YAED,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,CAAC,EAAE;gBACjE,sCAAsC;gBACtC,IAAM,GAAG,GAAG;oBACV,GAAG,EAAE,KAAK,CAAC,GAAG;oBACd,GAAG,EAAE,KAAK,CAAC,GAAG;iBACf,CAAC;gBAEF,IAAI,GAAG,CAAC,GAAG,KAAK,SAAS,EAAE;oBACzB,kBAAkB;oBAClB,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;oBAEZ,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;wBAClC,GAAG,CAAC,GAAG,EAAE,CAAC;qBACX;iBACF;qBAAM,IAAI,GAAG,CAAC,GAAG,KAAK,SAAS,EAAE;oBAChC,kBAAkB;oBAClB,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;oBAEZ,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;wBAClC,GAAG,CAAC,GAAG,EAAE,CAAC;qBACX;iBACF;gBAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAmC,CAAC;gBAC9D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;aAC5B;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACnB;QAED,IAAI,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,EAAE,CAAC;QAEzC,OAAO;YACL,KAAK,OAAA;YACL,KAAK,EAAE,WAAW;SACnB,CAAC;IACJ,CAAC;IAEO,0BAAK,GAAb,UAAc,GAAY;QACxB,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,GAAuB,CAAC;QAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;QAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;QAC5B,IAAI,GAAG,IAAI,IAAI,EAAE;YACf,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC5B;aAAM;YACL,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,GAAG,KAAK,IAAI,CAAC,IAAI,EAAE;gBACrB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;aACjB;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,0BAAK,GAAb,UAAc,GAAY;QACxB,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,GAAuB,CAAC;QAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;QAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;QAC5B,IAAI,GAAG,IAAI,IAAI,EAAE;YACf,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC5B;aAAM;YACL,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,GAAG,KAAK,IAAI,CAAC,IAAI,EAAE;gBACrB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;aACjB;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,yBAAI,GAAZ,UAAa,GAAuB,EAAE,GAAuB;QAC3D,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAK,GAAG,cAAI,GAAG,CAAE,CAAC,IAAI,KAAK,CAAC;IACnD,CAAC;IAEO,wBAAG,GAAX,UAAY,GAAuB,EAAE,GAAuB;QAC1D,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,CAAC,YAAK,GAAG,cAAI,GAAG,CAAE,CAAC,GAAG,IAAI,CAAC;IAC1C,CAAC;IAEO,mCAAc,GAAtB;QACE,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,EAAE,CAAC;QACX,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE;YACpB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;YACb,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAEO,2BAAM,GAAd,UAAe,IAAW;QACxB,IAAM,IAAI,GAAG,IAAI,CAAC;QACV,IAAA,KAAK,GAA4B,IAAI,MAAhC,EAAE,SAAS,GAAiB,IAAI,UAArB,EAAE,UAAU,GAAK,IAAI,WAAT,CAAU;QAC9C,IAAI,CAAS,CAAC;QACd,IAAI,CAAS,CAAC;QAEd,uCAAuC;QACvC,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,KAAK,EAAE;YACT,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,UAAU,GAAG,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;SACxD;aAAM;YACL,8BAA8B;YAE9B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE;gBACpC,IAAI,CAAC,cAAc,EAAE,CAAC;aACvB;YAED,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,SAAS,GAAG,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,UAAU,GAAG,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAE7B,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;IAEM,4BAAO,GAAd;QACE,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,iBAAC;AAAD,CAAC,AA1XD,CAAgC,WAAI,GA0XnC;AA1XY,gCAAU","sourcesContent":["/**\n * @fileOverview grid layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\n\nimport { isString, getDegree, isNaN, getFuncByUnknownType, isArray } from \"../util\";\nimport { Base } from \"./base\";\nimport {\n  OutNode,\n  Edge,\n  PointTuple,\n  Size,\n  IndexMap,\n  GridLayoutOptions\n} from \"./types\";\n\ntype INode = OutNode & {\n  degree: number;\n  size: number | PointTuple | Size;\n};\n\n/**\n * 网格布局\n */\nexport class GridLayout extends Base {\n  /** 布局起始点 */\n  public begin: PointTuple = [0, 0];\n\n  /** prevents node overlap, may overflow boundingBox if not enough space */\n  public preventOverlap: boolean = true;\n\n  /** extra spacing around nodes when preventOverlap: true */\n  public preventOverlapPadding: number = 10;\n\n  /** uses all available space on false, uses minimal space on true */\n  public condense: boolean = false;\n\n  /** force num of rows in the grid */\n  public rows: number | undefined;\n\n  /** force num of columns in the grid */\n  public cols: number | undefined;\n\n  /** the spacing between two nodes */\n  public nodeSpacing: ((d?: unknown) => number) | number | undefined;\n\n  /** returns { row, col } for element */\n  public position:\n    | ((node: INode) => { row?: number; col?: number })\n    | undefined;\n\n  /** a sorting function to order the nodes; e.g. function(a, b){ return a.datapublic ('weight') - b.data('weight') } */\n  public sortBy: string = \"degree\";\n\n  public nodeSize: number | number[] | { width: number, height: number } | undefined;\n\n  public nodes: INode[] = [];\n\n  public edges: Edge[] = [];\n\n  public width: number = 300;\n\n  public height: number = 300;\n\n  private cells: number | undefined;\n\n  private row: number = 0;\n\n  private col: number = 0;\n\n  private splits: number | undefined;\n\n  private columns: number | undefined;\n\n  private cellWidth: number = 0;\n\n  private cellHeight: number = 0;\n\n  private cellUsed: {\n    [key: string]: boolean;\n  } = {};\n\n  private id2manPos: {\n    [key: string]: {\n      row: number;\n      col: number;\n    };\n  } = {};\n\n  /** 迭代结束的回调函数 */\n  public onLayoutEnd: () => void = () => {};\n\n  constructor(options?: GridLayoutOptions) {\n    super();\n    this.updateCfg(options);\n  }\n\n  public getDefaultCfg() {\n    return {\n      begin: [0, 0],\n      preventOverlap: true,\n      preventOverlapPadding: 10,\n      condense: false,\n      rows: undefined,\n      cols: undefined,\n      position: undefined,\n      sortBy: \"degree\",\n      nodeSize: 30\n    };\n  }\n\n  /**\n   * 执行布局\n   */\n  public execute() {\n    const self = this;\n    const { nodes, edges, begin } = self;\n    const n = nodes.length;\n    if (n === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes,\n        edges\n      };\n    }\n    if (n === 1) {\n      nodes[0].x = begin[0];\n      nodes[0].y = begin[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes,\n        edges,\n      };\n    }\n\n    let { sortBy, width, height } = self;\n    const { condense, preventOverlapPadding, preventOverlap, nodeSpacing: paramNodeSpacing, nodeSize: paramNodeSize } = self;\n    \n    const layoutNodes: INode[] = [];\n    nodes.forEach((node) => {\n      layoutNodes.push(node);\n    });\n    const nodeIdxMap: IndexMap = {};\n    layoutNodes.forEach((node, i) => {\n      nodeIdxMap[node.id] = i;\n    });\n    if (\n      sortBy === \"degree\" ||\n      !isString(sortBy) ||\n      (layoutNodes[0] as any)[sortBy] === undefined\n    ) {\n      sortBy = \"degree\";\n      if (isNaN(nodes[0].degree)) {\n        const values = getDegree(layoutNodes.length, nodeIdxMap, edges);\n        layoutNodes.forEach((node, i) => {\n          node.degree = values[i].all;\n        });\n      }\n    }\n    // sort nodes by value\n    layoutNodes.sort(\n      (n1, n2) => (n2 as any)[sortBy] - (n1 as any)[sortBy]\n    );\n\n    if (!width && typeof window !== \"undefined\") {\n      width = window.innerWidth;\n    }\n    if (!height && typeof window !== \"undefined\") {\n      height = window.innerHeight;\n    }\n\n    const oRows = self.rows;\n    const oCols = self.cols != null ? self.cols : self.columns;\n    self.cells = n;\n\n    // if rows or columns were set in self, use those values\n    if (oRows != null && oCols != null) {\n      self.rows = oRows;\n      self.cols = oCols;\n    } else if (oRows != null && oCols == null) {\n      self.rows = oRows;\n      self.cols = Math.ceil(self.cells / self.rows);\n    } else if (oRows == null && oCols != null) {\n      self.cols = oCols;\n      self.rows = Math.ceil(self.cells / self.cols);\n    } else {\n      // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n      // width/height * splits^2 = cells where splits is number of times to split width\n      self.splits = Math.sqrt((self.cells * self.height) / self.width);\n      self.rows = Math.round(self.splits);\n      self.cols = Math.round((self.width / self.height) * self.splits);\n    }\n    self.rows = Math.max(self.rows, 1);\n    self.cols = Math.max(self.cols, 1);\n    if (self.cols * self.rows > self.cells) {\n      // otherwise use the automatic values and adjust accordingly\n      // if rounding was up, see if we can reduce rows or columns\n      const sm = self.small() as number;\n      const lg = self.large() as number;\n\n      // reducing the small side takes away the most cells, so try it first\n      if ((sm - 1) * lg >= self.cells) {\n        self.small(sm - 1);\n      } else if ((lg - 1) * sm >= self.cells) {\n        self.large(lg - 1);\n      }\n    } else {\n      // if rounding was too low, add rows or columns\n      while (self.cols * self.rows < self.cells) {\n        const sm = self.small() as number;\n        const lg = self.large() as number;\n\n        // try to add to larger side first (adds less in multiplication)\n        if ((lg + 1) * sm >= self.cells) {\n          self.large(lg + 1);\n        } else {\n          self.small(sm + 1);\n        }\n      }\n    }\n\n    self.cellWidth = width / self.cols;\n    self.cellHeight = height / self.rows;\n\n    if (condense) {\n      self.cellWidth = 0;\n      self.cellHeight = 0;\n    }\n\n\n    if (preventOverlap || paramNodeSpacing) {\n      const nodeSpacing: Function = getFuncByUnknownType(10, paramNodeSpacing);\n      const nodeSize: Function = getFuncByUnknownType(30, paramNodeSize, false);\n      layoutNodes.forEach((node) => {\n        if (!node.x || !node.y) {\n          // for bb\n          node.x = 0;\n          node.y = 0;\n        }\n\n        const res = nodeSize(node) || 30;\n     \n        let nodeW;\n        let nodeH;\n     \n        if (isArray(res)) {\n          nodeW = res[0];\n          nodeH = res[1];\n        } else {\n          nodeW = res;\n          nodeH = res;\n        }\n\n        const p = nodeSpacing !== undefined ? nodeSpacing(node) : preventOverlapPadding;\n\n        const w = nodeW + p;\n        const h = nodeH + p;\n\n        self.cellWidth = Math.max(self.cellWidth, w);\n        self.cellHeight = Math.max(self.cellHeight, h);\n      });\n    }\n\n    self.cellUsed = {}; // e.g. 'c-0-2' => true\n\n    // to keep track of current cell position\n    self.row = 0;\n    self.col = 0;\n\n    // get a cache of all the manual positions\n    self.id2manPos = {};\n    for (let i = 0; i < layoutNodes.length; i++) {\n      const node = layoutNodes[i];\n      let rcPos;\n      if (self.position) {\n        rcPos = self.position(node);\n      }\n\n      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n        // must have at least row or col def'd\n        const pos = {\n          row: rcPos.row,\n          col: rcPos.col\n        };\n\n        if (pos.col === undefined) {\n          // find unused col\n          pos.col = 0;\n\n          while (self.used(pos.row, pos.col)) {\n            pos.col++;\n          }\n        } else if (pos.row === undefined) {\n          // find unused row\n          pos.row = 0;\n\n          while (self.used(pos.row, pos.col)) {\n            pos.row++;\n          }\n        }\n\n        self.id2manPos[node.id] = pos as { row: number; col: number };\n        self.use(pos.row, pos.col);\n      }\n      self.getPos(node);\n    }\n\n    if (self.onLayoutEnd) self.onLayoutEnd();\n\n    return {\n      edges,\n      nodes: layoutNodes\n    };\n  }\n\n  private small(val?: number): number | undefined {\n    const self = this;\n    let res: number | undefined;\n    const rows = self.rows || 5;\n    const cols = self.cols || 5;\n    if (val == null) {\n      res = Math.min(rows, cols);\n    } else {\n      const min = Math.min(rows, cols);\n      if (min === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n    return res;\n  }\n\n  private large(val?: number): number | undefined {\n    const self = this;\n    let res: number | undefined;\n    const rows = self.rows || 5;\n    const cols = self.cols || 5;\n    if (val == null) {\n      res = Math.max(rows, cols);\n    } else {\n      const max = Math.max(rows, cols);\n      if (max === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n    return res;\n  }\n\n  private used(row: number | undefined, col: number | undefined) {\n    const self = this;\n    return self.cellUsed[`c-${row}-${col}`] || false;\n  }\n\n  private use(row: number | undefined, col: number | undefined) {\n    const self = this;\n    self.cellUsed[`c-${row}-${col}`] = true;\n  }\n\n  private moveToNextCell() {\n    const self = this;\n    const cols = self.cols || 5;\n    self.col++;\n    if (self.col >= cols) {\n      self.col = 0;\n      self.row++;\n    }\n  }\n\n  private getPos(node: INode) {\n    const self = this;\n    const { begin, cellWidth, cellHeight } = self;\n    let x: number;\n    let y: number;\n\n    // see if we have a manual position set\n    const rcPos = self.id2manPos[node.id];\n    if (rcPos) {\n      x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n      y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n    } else {\n      // otherwise set automatically\n\n      while (self.used(self.row, self.col)) {\n        self.moveToNextCell();\n      }\n\n      x = self.col * cellWidth + cellWidth / 2 + begin[0];\n      y = self.row * cellHeight + cellHeight / 2 + begin[1];\n      self.use(self.row, self.col);\n\n      self.moveToNextCell();\n    }\n    node.x = x;\n    node.y = y;\n  }\n\n  public getType() {\n    return \"grid\";\n  }\n}\n"]}},"error":null,"hash":"2678d58fc315ea6369f2ae6a6c4a4c24","cacheData":{"env":{}}}