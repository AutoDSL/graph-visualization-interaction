{"id":"node_modules/@antv/layout/lib/layout/gpu/fruchterman.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchterman.js.map","includedInParent":true,"mtime":1676178923636},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\gpu\\fruchterman.ts","includedInParent":true,"mtime":1676178923896},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"../base","loc":{"line":60,"column":21,"index":3495},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchterman.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\base.js"},{"name":"../../util","loc":{"line":61,"column":21,"index":3528},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchterman.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\index.js"},{"name":"@antv/g-webgpu","loc":{"line":63,"column":25,"index":3582},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchterman.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\g-webgpu\\es\\index.js"},{"name":"../../util/gpu","loc":{"line":65,"column":20,"index":3655},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchterman.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\gpu.js"},{"name":"./fruchtermanShader","loc":{"line":67,"column":34,"index":3744},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchterman.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchtermanShader.js"},{"name":"../constants","loc":{"line":68,"column":26,"index":3794},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gpu\\fruchterman.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\constants.js"}],"generated":{"js":"\"use strict\";\n// @ts-nocheck\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FruchtermanGPULayout = void 0;\nvar base_1 = require(\"../base\");\nvar util_1 = require(\"../../util\");\n// @ts-ignore\nvar g_webgpu_1 = require(\"@antv/g-webgpu\");\n// compile at runtime in dev mode\nvar gpu_1 = require(\"../../util/gpu\");\n// use compiled bundle in prod mode\nvar fruchtermanShader_1 = require(\"./fruchtermanShader\");\nvar constants_1 = require(\"../constants\");\n/**\n * fruchterman 布局\n */\nvar FruchtermanGPULayout = /** @class */ (function (_super) {\n    __extends(FruchtermanGPULayout, _super);\n    function FruchtermanGPULayout(options) {\n        var _this = _super.call(this) || this;\n        /** 停止迭代的最大迭代数 */\n        _this.maxIteration = 1000;\n        /** 重力大小，影响图的紧凑程度 */\n        _this.gravity = 10;\n        /** 速度 */\n        _this.speed = 1;\n        /** 是否产生聚类力 */\n        _this.clustering = false;\n        /** 根据哪个字段聚类 */\n        _this.clusterField = \"cluster\";\n        /** 聚类力大小 */\n        _this.clusterGravity = 10;\n        /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n        _this.workerEnabled = false;\n        _this.nodes = [];\n        _this.edges = [];\n        _this.width = 300;\n        _this.height = 300;\n        _this.nodeMap = {};\n        _this.nodeIdxMap = {};\n        _this.updateCfg(options);\n        return _this;\n    }\n    FruchtermanGPULayout.prototype.getDefaultCfg = function () {\n        return {\n            maxIteration: 1000,\n            gravity: 10,\n            speed: 1,\n            clustering: false,\n            clusterGravity: 10\n        };\n    };\n    /**\n     * 执行布局\n     */\n    FruchtermanGPULayout.prototype.execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var self, nodes, center, nodeMap, nodeIdxMap;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        self = this;\n                        nodes = self.nodes;\n                        if (!nodes || nodes.length === 0) {\n                            if (self.onLayoutEnd)\n                                self.onLayoutEnd();\n                            return [2 /*return*/];\n                        }\n                        if (!self.width && typeof window !== \"undefined\") {\n                            self.width = window.innerWidth;\n                        }\n                        if (!self.height && typeof window !== \"undefined\") {\n                            self.height = window.innerHeight;\n                        }\n                        if (!self.center) {\n                            self.center = [self.width / 2, self.height / 2];\n                        }\n                        center = self.center;\n                        if (nodes.length === 1) {\n                            nodes[0].x = center[0];\n                            nodes[0].y = center[1];\n                            if (self.onLayoutEnd)\n                                self.onLayoutEnd();\n                            return [2 /*return*/];\n                        }\n                        nodeMap = {};\n                        nodeIdxMap = {};\n                        nodes.forEach(function (node, i) {\n                            if (!(0, util_1.isNumber)(node.x))\n                                node.x = Math.random() * _this.width;\n                            if (!(0, util_1.isNumber)(node.y))\n                                node.y = Math.random() * _this.height;\n                            nodeMap[node.id] = node;\n                            nodeIdxMap[node.id] = i;\n                        });\n                        self.nodeMap = nodeMap;\n                        self.nodeIdxMap = nodeIdxMap;\n                        // layout\n                        return [4 /*yield*/, self.run()];\n                    case 1:\n                        // layout\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    FruchtermanGPULayout.prototype.executeWithWorker = function (canvas, ctx) {\n        return __awaiter(this, void 0, void 0, function () {\n            var self, nodes, center, nodeMap, nodeIdxMap;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        self = this;\n                        nodes = self.nodes;\n                        center = self.center;\n                        if (!nodes || nodes.length === 0) {\n                            return [2 /*return*/];\n                        }\n                        if (nodes.length === 1) {\n                            nodes[0].x = center[0];\n                            nodes[0].y = center[1];\n                            return [2 /*return*/];\n                        }\n                        nodeMap = {};\n                        nodeIdxMap = {};\n                        nodes.forEach(function (node, i) {\n                            if (!(0, util_1.isNumber)(node.x))\n                                node.x = Math.random() * _this.width;\n                            if (!(0, util_1.isNumber)(node.y))\n                                node.y = Math.random() * _this.height;\n                            nodeMap[node.id] = node;\n                            nodeIdxMap[node.id] = i;\n                        });\n                        self.nodeMap = nodeMap;\n                        self.nodeIdxMap = nodeIdxMap;\n                        // layout\n                        return [4 /*yield*/, self.run(canvas, ctx)];\n                    case 1:\n                        // layout\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    FruchtermanGPULayout.prototype.run = function (canvas, ctx) {\n        return __awaiter(this, void 0, void 0, function () {\n            var self, nodes, edges, maxIteration, center, area, maxDisplace, k2, k, speed, clustering, _a, attributeArray, clusterCount, numParticles, _b, maxEdgePerVetex, nodesEdgesArray, workerEnabled, world, onLayoutEnd, clusterCenters, i, kernelFruchterman, kernelCluster, execute;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        self = this;\n                        nodes = self.nodes;\n                        edges = self.edges;\n                        maxIteration = self.maxIteration;\n                        center = self.center;\n                        area = self.height * self.width;\n                        maxDisplace = Math.sqrt(area) / 10;\n                        k2 = area / (nodes.length + 1);\n                        k = Math.sqrt(k2);\n                        speed = self.speed;\n                        clustering = self.clustering;\n                        _a = (0, gpu_1.attributesToTextureData)([self.clusterField], nodes), attributeArray = _a.array, clusterCount = _a.count;\n                        // pushing the fx and fy\n                        nodes.forEach(function (node, i) {\n                            var fx = 0;\n                            var fy = 0;\n                            if ((0, util_1.isNumber)(node.fx) && (0, util_1.isNumber)(node.fy)) {\n                                fx = node.fx || 0.001;\n                                fy = node.fy || 0.001;\n                            }\n                            attributeArray[4 * i + 1] = fx;\n                            attributeArray[4 * i + 2] = fy;\n                        });\n                        numParticles = nodes.length;\n                        _b = (0, gpu_1.buildTextureData)(nodes, edges), maxEdgePerVetex = _b.maxEdgePerVetex, nodesEdgesArray = _b.array;\n                        workerEnabled = self.workerEnabled;\n                        if (workerEnabled) {\n                            world = g_webgpu_1.World.create({\n                                canvas: canvas,\n                                engineOptions: {\n                                    supportCompute: true\n                                }\n                            });\n                        }\n                        else {\n                            world = g_webgpu_1.World.create({\n                                engineOptions: {\n                                    supportCompute: true\n                                }\n                            });\n                        }\n                        onLayoutEnd = self.onLayoutEnd;\n                        clusterCenters = [];\n                        for (i = 0; i < clusterCount; i++) {\n                            clusterCenters.push(0, 0, 0, 0);\n                        }\n                        kernelFruchterman = world\n                            .createKernel(fruchtermanShader_1.fruchtermanBundle)\n                            .setDispatch([numParticles, 1, 1])\n                            .setBinding({\n                            u_Data: nodesEdgesArray,\n                            u_K: k,\n                            u_K2: k2,\n                            u_Gravity: self.gravity,\n                            u_ClusterGravity: self.clusterGravity || self.gravity || 1,\n                            u_Speed: speed,\n                            u_MaxDisplace: maxDisplace,\n                            u_Clustering: clustering ? 1 : 0,\n                            u_Center: center,\n                            u_AttributeArray: attributeArray,\n                            u_ClusterCenters: clusterCenters,\n                            MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n                            VERTEX_COUNT: numParticles\n                        });\n                        if (clustering) {\n                            kernelCluster = world\n                                .createKernel(fruchtermanShader_1.clusterBundle)\n                                .setDispatch([clusterCount, 1, 1])\n                                .setBinding({\n                                u_Data: nodesEdgesArray,\n                                u_NodeAttributes: attributeArray,\n                                u_ClusterCenters: clusterCenters,\n                                VERTEX_COUNT: numParticles,\n                                CLUSTER_COUNT: clusterCount\n                            });\n                        }\n                        execute = function () { return __awaiter(_this, void 0, void 0, function () {\n                            var i, finalParticleData;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        i = 0;\n                                        _a.label = 1;\n                                    case 1:\n                                        if (!(i < maxIteration)) return [3 /*break*/, 6];\n                                        // eslint-disable-next-line no-await-in-loop\n                                        return [4 /*yield*/, kernelFruchterman.execute()];\n                                    case 2:\n                                        // eslint-disable-next-line no-await-in-loop\n                                        _a.sent();\n                                        if (!clustering) return [3 /*break*/, 4];\n                                        kernelCluster.setBinding({\n                                            u_Data: kernelFruchterman\n                                        });\n                                        // eslint-disable-next-line no-await-in-loop\n                                        return [4 /*yield*/, kernelCluster.execute()];\n                                    case 3:\n                                        // eslint-disable-next-line no-await-in-loop\n                                        _a.sent();\n                                        kernelFruchterman.setBinding({\n                                            u_ClusterCenters: kernelCluster\n                                        });\n                                        _a.label = 4;\n                                    case 4:\n                                        kernelFruchterman.setBinding({\n                                            u_MaxDisplace: maxDisplace *= 0.99\n                                        });\n                                        _a.label = 5;\n                                    case 5:\n                                        i++;\n                                        return [3 /*break*/, 1];\n                                    case 6: return [4 /*yield*/, kernelFruchterman.getOutput()];\n                                    case 7:\n                                        finalParticleData = _a.sent();\n                                        if (canvas) {\n                                            // 传递数据给主线程\n                                            ctx.postMessage({\n                                                type: constants_1.LAYOUT_MESSAGE.GPUEND,\n                                                vertexEdgeData: finalParticleData\n                                                // edgeIndexBufferData,\n                                            });\n                                        }\n                                        else {\n                                            nodes.forEach(function (node, i) {\n                                                var x = finalParticleData[4 * i];\n                                                var y = finalParticleData[4 * i + 1];\n                                                node.x = x;\n                                                node.y = y;\n                                            });\n                                        }\n                                        if (onLayoutEnd)\n                                            onLayoutEnd();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        return [4 /*yield*/, execute()];\n                    case 1:\n                        _c.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    FruchtermanGPULayout.prototype.getType = function () {\n        return \"fruchterman-gpu\";\n    };\n    return FruchtermanGPULayout;\n}(base_1.Base));\nexports.FruchtermanGPULayout = FruchtermanGPULayout;\n"},"sourceMaps":{"js":{"version":3,"file":"fruchterman.js","sourceRoot":"","sources":["../../../src/layout/gpu/fruchterman.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\n\nimport {\n  OutNode,\n  Edge,\n  PointTuple,\n  IndexMap,\n  FruchtermanGPULayoutOptions\n} from \"../types\";\nimport { Base } from \"../base\";\nimport { isNumber } from \"../../util\";\n// @ts-ignore\nimport { World } from \"@antv/g-webgpu\";\n// compile at runtime in dev mode\nimport { buildTextureData, attributesToTextureData } from \"../../util/gpu\";\n// use compiled bundle in prod mode\nimport { fruchtermanBundle, clusterBundle } from \"./fruchtermanShader\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n// @ts-ignore\n// import { Compiler } from '@antv/g-webgpu-compiler'\n// import { fruchtermanCode, clusterCode } from './fruchtermanShader'\n\ntype INode = OutNode & {\n  cluster: string | number;\n};\n\ntype NodeMap = {\n  [key: string]: INode;\n};\n\n/**\n * fruchterman 布局\n */\nexport class FruchtermanGPULayout extends Base {\n  /** 布局中心 */\n  public center: PointTuple;\n\n  /** 停止迭代的最大迭代数 */\n  public maxIteration: number = 1000;\n\n  /** 重力大小，影响图的紧凑程度 */\n  public gravity: number = 10;\n\n  /** 速度 */\n  public speed: number = 1;\n\n  /** 是否产生聚类力 */\n  public clustering: boolean = false;\n\n  /** 根据哪个字段聚类 */\n  public clusterField: string = \"cluster\";\n\n  /** 聚类力大小 */\n  public clusterGravity: number = 10;\n\n  /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n  public workerEnabled: boolean = false;\n\n  public nodes: INode[] = [];\n\n  public edges: Edge[] = [];\n\n  public width: number = 300;\n\n  public height: number = 300;\n\n  public nodeMap: NodeMap = {};\n\n  public nodeIdxMap: IndexMap = {};\n\n  public canvasEl: HTMLCanvasElement;\n\n  public onLayoutEnd: () => void;\n\n  constructor(options?: FruchtermanGPULayoutOptions) {\n    super();\n    this.updateCfg(options);\n  }\n\n  public getDefaultCfg() {\n    return {\n      maxIteration: 1000,\n      gravity: 10,\n      speed: 1,\n      clustering: false,\n      clusterGravity: 10\n    };\n  }\n\n  /**\n   * 执行布局\n   */\n  public async execute() {\n    const self = this;\n    const nodes = self.nodes;\n\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n    const center = self.center;\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    const nodeMap: NodeMap = {};\n    const nodeIdxMap: IndexMap = {};\n    nodes.forEach((node, i) => {\n      if (!isNumber(node.x)) node.x = Math.random() * this.width;\n      if (!isNumber(node.y)) node.y = Math.random() * this.height;\n      nodeMap[node.id] = node;\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap;\n    // layout\n    await self.run();\n  }\n\n  public async executeWithWorker(canvas?: HTMLCanvasElement, ctx?: any) {\n    const self = this;\n    const nodes = self.nodes;\n    const center = self.center;\n\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      return;\n    }\n    const nodeMap: NodeMap = {};\n    const nodeIdxMap: IndexMap = {};\n    nodes.forEach((node, i) => {\n      if (!isNumber(node.x)) node.x = Math.random() * this.width;\n      if (!isNumber(node.y)) node.y = Math.random() * this.height;\n      nodeMap[node.id] = node;\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap;\n    // layout\n    await self.run(canvas, ctx);\n  }\n\n  public async run(canvas?: HTMLCanvasElement, ctx?: any) {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges;\n    const maxIteration = self.maxIteration;\n    const center = self.center;\n    const area = self.height * self.width;\n    let maxDisplace = Math.sqrt(area) / 10;\n    const k2 = area / (nodes.length + 1);\n    const k = Math.sqrt(k2);\n    const speed = self.speed;\n    const clustering = self.clustering;\n\n    const {\n      array: attributeArray,\n      count: clusterCount\n    } = attributesToTextureData([self.clusterField], nodes);\n\n    // pushing the fx and fy\n    nodes.forEach((node, i) => {\n      let fx = 0;\n      let fy = 0;\n      if (isNumber(node.fx) && isNumber(node.fy)) {\n        fx = node.fx || 0.001;\n        fy = node.fy || 0.001;\n      }\n      attributeArray[4 * i + 1] = fx;\n      attributeArray[4 * i + 2] = fy;\n    });\n\n\n    const numParticles = nodes.length;\n    const { maxEdgePerVetex, array: nodesEdgesArray } = buildTextureData(\n      nodes,\n      edges\n    );\n\n    const workerEnabled = self.workerEnabled;\n\n    let world;\n\n    if (workerEnabled) {\n      world = World.create({\n        canvas,\n        engineOptions: {\n          supportCompute: true\n        }\n      });\n    } else {\n      world = World.create({\n        engineOptions: {\n          supportCompute: true\n        }\n      });\n    }\n\n    // compile at runtime in dev mode\n    // const compiler = new Compiler()\n    // const fruchtermanBundle = compiler.compileBundle(fruchtermanCode)\n    // const clusterBundle = compiler.compileBundle(clusterCode)\n\n    // use compiled bundle in prod mode\n    // console.log(fruchtermanBundle.toString())\n    // console.log(clusterBundle.toString())\n\n    const onLayoutEnd = self.onLayoutEnd;\n\n    const clusterCenters = [];\n    for (let i = 0; i < clusterCount; i++) {\n      clusterCenters.push(0, 0, 0, 0);\n    }\n\n    const kernelFruchterman = world\n      .createKernel(fruchtermanBundle)\n      .setDispatch([numParticles, 1, 1])\n      .setBinding({\n        u_Data: nodesEdgesArray,\n        u_K: k,\n        u_K2: k2,\n        u_Gravity: self.gravity,\n        u_ClusterGravity: self.clusterGravity || self.gravity || 1,\n        u_Speed: speed,\n        u_MaxDisplace: maxDisplace,\n        u_Clustering: clustering ? 1 : 0,\n        u_Center: center,\n        u_AttributeArray: attributeArray,\n        u_ClusterCenters: clusterCenters,\n        MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n        VERTEX_COUNT: numParticles\n      });\n\n    let kernelCluster: any;\n    if (clustering) {\n      kernelCluster = world\n        .createKernel(clusterBundle)\n        .setDispatch([clusterCount, 1, 1])\n        .setBinding({\n          u_Data: nodesEdgesArray,\n          u_NodeAttributes: attributeArray,\n          u_ClusterCenters: clusterCenters,\n          VERTEX_COUNT: numParticles,\n          CLUSTER_COUNT: clusterCount\n        });\n    }\n\n    const execute = async () => {\n      for (let i = 0; i < maxIteration; i++) {\n        // eslint-disable-next-line no-await-in-loop\n        await kernelFruchterman.execute();\n\n        if (clustering) {\n          kernelCluster.setBinding({\n            u_Data: kernelFruchterman\n          });\n          // eslint-disable-next-line no-await-in-loop\n          await kernelCluster.execute();\n          kernelFruchterman.setBinding({\n            u_ClusterCenters: kernelCluster\n          });\n        }\n\n        kernelFruchterman.setBinding({\n          u_MaxDisplace: maxDisplace *= 0.99\n        });\n      }\n\n      const finalParticleData = await kernelFruchterman.getOutput();\n\n      if (canvas) {\n        // 传递数据给主线程\n        ctx.postMessage({\n          type: LAYOUT_MESSAGE.GPUEND,\n          vertexEdgeData: finalParticleData\n          // edgeIndexBufferData,\n        });\n      } else {\n        nodes.forEach((node, i) => {\n          const x = finalParticleData[4 * i];\n          const y = finalParticleData[4 * i + 1];\n          node.x = x;\n          node.y = y;\n        });\n      }\n      if (onLayoutEnd) onLayoutEnd();\n    };\n\n    await execute();\n  }\n\n  public getType() {\n    return \"fruchterman-gpu\";\n  }\n}\n"]}},"error":null,"hash":"2343ecfb7db3f33831bb569b532e45bb","cacheData":{"env":{}}}