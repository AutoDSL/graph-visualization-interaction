{"id":"node_modules/@antv/layout/lib/layout/dagre/src/order/index.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js.map","includedInParent":true,"mtime":1676178923684},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\dagre\\src\\order\\index.ts","includedInParent":true,"mtime":1676178923966},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"./init-order","loc":{"line":6,"column":43,"index":259},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\init-order.js"},{"name":"./cross-count","loc":{"line":7,"column":44,"index":321},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\cross-count.js"},{"name":"./build-layer-graph","loc":{"line":8,"column":50,"index":390},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\build-layer-graph.js"},{"name":"./add-subgraph-constraints","loc":{"line":9,"column":57,"index":472},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\add-subgraph-constraints.js"},{"name":"./sort-subgraph","loc":{"line":10,"column":46,"index":550},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\sort-subgraph.js"},{"name":"../../../../util","loc":{"line":11,"column":21,"index":592},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\index.js"},{"name":"../../graph","loc":{"line":12,"column":22,"index":635},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\graph.js"},{"name":"../util","loc":{"line":13,"column":21,"index":672},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\index.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\util.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar init_order_1 = __importDefault(require(\"./init-order\"));\nvar cross_count_1 = __importDefault(require(\"./cross-count\"));\nvar build_layer_graph_1 = __importDefault(require(\"./build-layer-graph\"));\nvar add_subgraph_constraints_1 = __importDefault(require(\"./add-subgraph-constraints\"));\nvar sort_subgraph_1 = __importDefault(require(\"./sort-subgraph\"));\nvar util_1 = require(\"../../../../util\");\nvar graph_1 = require(\"../../graph\");\nvar util_2 = require(\"../util\");\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nvar order = function (g) {\n    var mxRank = (0, util_2.maxRank)(g);\n    var range1 = [];\n    var range2 = [];\n    for (var i = 1; i < mxRank + 1; i++)\n        range1.push(i);\n    for (var i = mxRank - 1; i > -1; i--)\n        range2.push(i);\n    var downLayerGraphs = buildLayerGraphs(g, range1, \"inEdges\");\n    var upLayerGraphs = buildLayerGraphs(g, range2, \"outEdges\");\n    var layering = (0, init_order_1.default)(g);\n    assignOrder(g, layering);\n    var bestCC = Number.POSITIVE_INFINITY;\n    var best;\n    for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n        layering = (0, util_2.buildLayerMatrix)(g);\n        var cc = (0, cross_count_1.default)(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = (0, util_1.clone)(layering);\n            bestCC = cc;\n        }\n    }\n    // consider use previous result, maybe somewhat reduendant\n    layering = (0, init_order_1.default)(g);\n    assignOrder(g, layering);\n    for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, true);\n        layering = (0, util_2.buildLayerMatrix)(g);\n        var cc = (0, cross_count_1.default)(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = (0, util_1.clone)(layering);\n            bestCC = cc;\n        }\n    }\n    assignOrder(g, best);\n};\nvar buildLayerGraphs = function (g, ranks, relationship) {\n    return ranks.map(function (rank) {\n        return (0, build_layer_graph_1.default)(g, rank, relationship);\n    });\n};\nvar sweepLayerGraphs = function (layerGraphs, biasRight, usePrev) {\n    var cg = new graph_1.Graph();\n    layerGraphs === null || layerGraphs === void 0 ? void 0 : layerGraphs.forEach(function (lg) {\n        var _a;\n        var root = lg.graph().root;\n        var sorted = (0, sort_subgraph_1.default)(lg, root, cg, biasRight, usePrev);\n        for (var i = 0; i < ((_a = sorted.vs) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n            var lnode = lg.node(sorted.vs[i]);\n            if (lnode) {\n                lnode.order = i;\n            }\n        }\n        (0, add_subgraph_constraints_1.default)(lg, cg, sorted.vs);\n    });\n};\nvar assignOrder = function (g, layering) {\n    layering === null || layering === void 0 ? void 0 : layering.forEach(function (layer) {\n        layer === null || layer === void 0 ? void 0 : layer.forEach(function (v, i) {\n            g.node(v).order = i;\n        });\n    });\n};\nexports.default = order;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/layout/dagre/src/order/index.ts"],"names":[],"mappings":"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","sourcesContent":["import initOrder from \"./init-order\";\nimport crossCount from \"./cross-count\";\nimport buildLayerGraph from \"./build-layer-graph\";\nimport addSubgraphConstraints from \"./add-subgraph-constraints\";\nimport sortSubgraph from \"./sort-subgraph\";\nimport { clone } from \"../../../../util\";\nimport { Graph } from \"../../graph\";\nimport { buildLayerMatrix, maxRank } from \"../util\";\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nconst order = (g: Graph) => {\n  const mxRank = maxRank(g);\n  const range1 = [];\n  const range2 = [];\n  for (let i = 1; i < mxRank + 1; i++) range1.push(i);\n  for (let i = mxRank - 1; i > -1; i--) range2.push(i);\n  const downLayerGraphs = buildLayerGraphs(g, range1, \"inEdges\");\n  const upLayerGraphs = buildLayerGraphs(g, range2, \"outEdges\");\n\n  let layering = initOrder(g);\n  assignOrder(g, layering);\n\n  let bestCC = Number.POSITIVE_INFINITY;\n  let best: string[][];\n  for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = buildLayerMatrix(g);\n    const cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = clone(layering);\n      bestCC = cc;\n    }\n  }\n\n  // consider use previous result, maybe somewhat reduendant\n  layering = initOrder(g);\n  assignOrder(g, layering);\n  for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, true);\n\n    layering = buildLayerMatrix(g);\n    const cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = clone(layering);\n      bestCC = cc;\n    }\n  }\n  assignOrder(g, best!);\n};\n\nconst buildLayerGraphs = (\n  g: Graph,\n  ranks: number[],\n  relationship: \"inEdges\" | \"outEdges\"\n) => {\n  return ranks.map((rank) => {\n    return buildLayerGraph(g, rank, relationship);\n  });\n};\n\nconst sweepLayerGraphs = (\n  layerGraphs: Graph[],\n  biasRight: boolean,\n  usePrev?: boolean\n) => {\n  const cg = new Graph();\n  layerGraphs?.forEach((lg) => {\n    const root = lg.graph().root as string;\n    const sorted = sortSubgraph(lg, root, cg, biasRight, usePrev);\n    for (let i = 0; i < sorted.vs?.length || 0; i++) {\n      const lnode = lg.node(sorted.vs[i]);\n      if (lnode) {\n        lnode.order = i;\n      }\n    }\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n};\n\nconst assignOrder = (g: Graph, layering: string[][]) => {\n  layering?.forEach((layer) => {\n    layer?.forEach((v: string, i: number) => {\n      g.node(v)!.order = i;\n    });\n  });\n};\n\nexport default order;\n"]}},"error":null,"hash":"d65b8f74a9a7eda52e8875cdf7f69c8b","cacheData":{"env":{}}}