{"id":"node_modules/@antv/layout/lib/layout/dagre/src/order/add-subgraph-constraints.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\add-subgraph-constraints.js.map","includedInParent":true,"mtime":1676178923505},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\dagre\\src\\order\\add-subgraph-constraints.ts","includedInParent":true,"mtime":1676178923794},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar addSubgraphConstraints = function (g, cg, vs) {\n    var prev = {};\n    var rootPrev;\n    vs === null || vs === void 0 ? void 0 : vs.forEach(function (v) {\n        var child = g.parent(v);\n        var parent;\n        var prevChild;\n        while (child) {\n            parent = g.parent(child);\n            if (parent) {\n                prevChild = prev[parent];\n                prev[parent] = child;\n            }\n            else {\n                prevChild = rootPrev;\n                rootPrev = child;\n            }\n            if (prevChild && prevChild !== child) {\n                cg.setEdge(prevChild, child);\n                return;\n            }\n            child = parent;\n        }\n    });\n};\nexports.default = addSubgraphConstraints;\n"},"sourceMaps":{"js":{"version":3,"file":"add-subgraph-constraints.js","sourceRoot":"","sources":["../../../../../src/layout/dagre/src/order/add-subgraph-constraints.ts"],"names":[],"mappings":";;AAEA,IAAM,sBAAsB,GAAG,UAAC,CAAQ,EAAE,EAAS,EAAE,EAAY;IAC/D,IAAM,IAAI,GAA2B,EAAE,CAAC;IACxC,IAAI,QAAgB,CAAC;IAErB,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,OAAO,CAAC,UAAC,CAAC;QACZ,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,MAAM,CAAC;QACX,IAAI,SAAS,CAAC;QACd,OAAO,KAAK,EAAE;YACZ,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,IAAI,MAAM,EAAE;gBACV,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;aACtB;iBAAM;gBACL,SAAS,GAAG,QAAQ,CAAC;gBACrB,QAAQ,GAAG,KAAK,CAAC;aAClB;YACD,IAAI,SAAS,IAAI,SAAS,KAAK,KAAK,EAAE;gBACpC,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAC7B,OAAO;aACR;YACD,KAAK,GAAG,MAAM,CAAC;SAChB;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,sBAAsB,CAAC","sourcesContent":["import { Graph } from \"../../graph\";\n\nconst addSubgraphConstraints = (g: Graph, cg: Graph, vs: string[]) => {\n  const prev: Record<string, string> = {};\n  let rootPrev: string;\n\n  vs?.forEach((v) => {\n    let child = g.parent(v);\n    let parent;\n    let prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n};\n\nexport default addSubgraphConstraints;\n"]}},"error":null,"hash":"4d5fc4382656ef4f1957c3123ff8b86b","cacheData":{"env":{}}}