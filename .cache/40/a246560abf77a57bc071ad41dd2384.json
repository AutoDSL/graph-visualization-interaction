{"id":"node_modules/@antv/layout/lib/layout/force2/index.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\force2\\index.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\src\\layout\\force2\\index.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1674179681168},{"name":"../base","loc":{"line":34,"column":21,"index":1351},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\force2\\index.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\base.js"},{"name":"../../util","loc":{"line":35,"column":21,"index":1384},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\force2\\index.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\util\\index.js"},{"name":"./ForceNBody","loc":{"line":36,"column":27,"index":1426},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\force2\\index.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\force2\\ForceNBody.js"}],"generated":{"js":"\"use strict\";\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Force2Layout = void 0;\nvar base_1 = require(\"../base\");\nvar util_1 = require(\"../../util\");\nvar ForceNBody_1 = require(\"./ForceNBody\");\nvar proccessToFunc = function (value, defaultV) {\n    var func;\n    if (!value) {\n        func = function (d) {\n            return defaultV || 1;\n        };\n    }\n    else if ((0, util_1.isNumber)(value)) {\n        func = function (d) {\n            return value;\n        };\n    }\n    else {\n        func = value;\n    }\n    return func;\n};\n/**\n * graphin 中的 force 布局\n */\nvar Force2Layout = /** @class */ (function (_super) {\n    __extends(Force2Layout, _super);\n    function Force2Layout(options) {\n        var _this = _super.call(this) || this;\n        /** 停止迭代的最大迭代数 */\n        _this.maxIteration = 1000;\n        /** 是否启动 worker */\n        _this.workerEnabled = false;\n        /** 弹簧引力系数 */\n        _this.edgeStrength = 200;\n        /** 斥力系数 */\n        _this.nodeStrength = 1000;\n        /** 库伦系数 */\n        _this.coulombDisScale = 0.005;\n        /** 阻尼系数 */\n        _this.damping = 0.9;\n        /** 最大速度 */\n        _this.maxSpeed = 500;\n        /** 一次迭代的平均移动距离小于该值时停止迭代 */\n        _this.minMovement = 0.4;\n        /** 迭代中衰减 */\n        _this.interval = 0.02;\n        /** 斥力的一个系数 */\n        _this.factor = 1;\n        /** 理想边长 */\n        _this.linkDistance = 200;\n        /** 重力大小 */\n        _this.gravity = 0;\n        /** 节点聚类作用力系数 */\n        _this.clusterNodeStrength = 20;\n        /** 是否防止重叠 */\n        _this.preventOverlap = true;\n        /** 阈值的使用条件，mean 代表平均移动距离小于 minMovement 时停止迭代，max 代表最大移动距离大时 minMovement 时停时迭代。默认为 mean */\n        _this.distanceThresholdMode = 'mean';\n        /** 每次迭代结束的回调函数 */\n        _this.tick = function () { };\n        _this.nodes = [];\n        _this.edges = [];\n        _this.width = 300;\n        _this.height = 300;\n        _this.nodeMap = {};\n        _this.nodeIdxMap = {};\n        _this.judgingDistance = 0;\n        /** 默认的向心配置 */\n        _this.centripetalOptions = {\n            leaf: 2,\n            single: 2,\n            others: 1,\n            // eslint-disable-next-line\n            center: function (n) {\n                return {\n                    x: _this.width / 2,\n                    y: _this.height / 2,\n                };\n            },\n        };\n        var getMass = options.getMass;\n        _this.propsGetMass = getMass;\n        _this.updateCfg(options);\n        return _this;\n    }\n    Force2Layout.prototype.getCentripetalOptions = function () {\n        var _a = this, leafCluster = _a.leafCluster, clustering = _a.clustering, nodeClusterBy = _a.nodeClusterBy, nodes = _a.nodes, nodeMap = _a.nodeMap, propsClusterNodeStrength = _a.clusterNodeStrength;\n        var getClusterNodeStrength = function (node) {\n            return typeof propsClusterNodeStrength === 'function' ? propsClusterNodeStrength(node) : propsClusterNodeStrength;\n        };\n        var centripetalOptions = {};\n        var sameTypeLeafMap;\n        // 如果传入了需要叶子节点聚类\n        if (leafCluster) {\n            sameTypeLeafMap = this.getSameTypeLeafMap() || {};\n            var relativeNodesType_1 = Array.from(new Set(nodes === null || nodes === void 0 ? void 0 : nodes.map(function (node) { return node[nodeClusterBy]; }))) || [];\n            centripetalOptions = {\n                single: 100,\n                leaf: function (node, nodes, edges) {\n                    // 找出与它关联的边的起点或终点出发的所有一度节点中同类型的叶子节点\n                    var _a = sameTypeLeafMap[node.id] || {}, relativeLeafNodes = _a.relativeLeafNodes, sameTypeLeafNodes = _a.sameTypeLeafNodes;\n                    // 如果都是同一类型或者每种类型只有1个，则施加默认向心力\n                    if ((sameTypeLeafNodes === null || sameTypeLeafNodes === void 0 ? void 0 : sameTypeLeafNodes.length) === (relativeLeafNodes === null || relativeLeafNodes === void 0 ? void 0 : relativeLeafNodes.length) || (relativeNodesType_1 === null || relativeNodesType_1 === void 0 ? void 0 : relativeNodesType_1.length) === 1) {\n                        return 1;\n                    }\n                    return getClusterNodeStrength(node);\n                },\n                others: 1,\n                center: function (node, nodes, edges) {\n                    var _a;\n                    var degree = (((_a = node.data) === null || _a === void 0 ? void 0 : _a.layout) || {}).degree;\n                    // 孤点默认给1个远离的中心点\n                    if (!degree) {\n                        return {\n                            x: 100,\n                            y: 100,\n                        };\n                    }\n                    var centerNode;\n                    if (degree === 1) {\n                        // 如果为叶子节点\n                        // 找出与它关联的边的起点出发的所有一度节点中同类型的叶子节点\n                        var _b = (sameTypeLeafMap[node.id] || {}).sameTypeLeafNodes, sameTypeLeafNodes = _b === void 0 ? [] : _b;\n                        if (sameTypeLeafNodes.length === 1) {\n                            // 如果同类型的叶子节点只有1个，中心节点置为undefined\n                            centerNode = undefined;\n                        }\n                        else if (sameTypeLeafNodes.length > 1) {\n                            // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n                            centerNode = (0, util_1.getAvgNodePosition)(sameTypeLeafNodes);\n                        }\n                    }\n                    else {\n                        centerNode = undefined;\n                    }\n                    return {\n                        x: centerNode === null || centerNode === void 0 ? void 0 : centerNode.x,\n                        y: centerNode === null || centerNode === void 0 ? void 0 : centerNode.y,\n                    };\n                },\n            };\n        }\n        // 如果传入了全局节点聚类\n        if (clustering) {\n            if (!sameTypeLeafMap)\n                sameTypeLeafMap = this.getSameTypeLeafMap();\n            var clusters = Array.from(new Set(nodes.map(function (node, i) {\n                return node[nodeClusterBy];\n            }))).filter(function (item) { return item !== undefined; });\n            var centerNodeInfo_1 = {};\n            clusters.forEach(function (cluster) {\n                var sameTypeNodes = nodes.filter(function (item) { return item[nodeClusterBy] === cluster; }).map(function (node) { return nodeMap[node.id]; });\n                // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n                centerNodeInfo_1[cluster] = (0, util_1.getAvgNodePosition)(sameTypeNodes);\n            });\n            centripetalOptions = {\n                single: function (node) { return getClusterNodeStrength(node); },\n                leaf: function (node) { return getClusterNodeStrength(node); },\n                others: function (node) { return getClusterNodeStrength(node); },\n                center: function (node, nodes, edges) {\n                    // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n                    var centerNode = centerNodeInfo_1[node[nodeClusterBy]];\n                    return {\n                        x: centerNode === null || centerNode === void 0 ? void 0 : centerNode.x,\n                        y: centerNode === null || centerNode === void 0 ? void 0 : centerNode.y,\n                    };\n                },\n            };\n        }\n        this.centripetalOptions = __assign(__assign({}, this.centripetalOptions), centripetalOptions);\n        var _b = this.centripetalOptions, leaf = _b.leaf, single = _b.single, others = _b.others;\n        if (leaf && typeof leaf !== 'function')\n            this.centripetalOptions.leaf = function () { return leaf; };\n        if (single && typeof single !== 'function')\n            this.centripetalOptions.single = function () { return single; };\n        if (others && typeof others !== 'function')\n            this.centripetalOptions.others = function () { return others; };\n    };\n    Force2Layout.prototype.updateCfg = function (cfg) {\n        if (cfg)\n            Object.assign(this, cfg);\n    };\n    Force2Layout.prototype.getDefaultCfg = function () {\n        return {\n            maxIteration: 500,\n            gravity: 10,\n            enableTick: true,\n            animate: true,\n        };\n    };\n    /**\n     * 执行布局\n     */\n    Force2Layout.prototype.execute = function () {\n        var self = this;\n        self.stop();\n        var nodes = self.nodes, edges = self.edges, defSpringLen = self.defSpringLen;\n        self.judgingDistance = 0;\n        if (!nodes || nodes.length === 0) {\n            self.onLayoutEnd([]);\n            return;\n        }\n        if (!self.width && typeof window !== \"undefined\") {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== \"undefined\") {\n            self.height = window.innerHeight;\n        }\n        if (!self.center) {\n            self.center = [self.width / 2, self.height / 2];\n        }\n        var center = self.center;\n        if (nodes.length === 1) {\n            nodes[0].x = center[0];\n            nodes[0].y = center[1];\n            self.onLayoutEnd([__assign({}, nodes[0])]);\n            return;\n        }\n        self.degreesMap = (0, util_1.getDegreeMap)(nodes, edges);\n        if (self.propsGetMass) {\n            self.getMass = self.propsGetMass;\n        }\n        else {\n            self.getMass = function (d) {\n                var massWeight = 1;\n                if ((0, util_1.isNumber)(d.mass))\n                    massWeight = d.mass;\n                var degree = self.degreesMap[d.id].all;\n                return (!degree || degree < 5) ? massWeight : degree * 5 * massWeight;\n            };\n        }\n        // node size function\n        var nodeSize = self.nodeSize;\n        var nodeSizeFunc;\n        if (self.preventOverlap) {\n            var nodeSpacing_1 = self.nodeSpacing;\n            var nodeSpacingFunc_1;\n            if ((0, util_1.isNumber)(nodeSpacing_1)) {\n                nodeSpacingFunc_1 = function () { return nodeSpacing_1; };\n            }\n            else if ((0, util_1.isFunction)(nodeSpacing_1)) {\n                nodeSpacingFunc_1 = nodeSpacing_1;\n            }\n            else {\n                nodeSpacingFunc_1 = function () { return 0; };\n            }\n            if (!nodeSize) {\n                nodeSizeFunc = function (d) {\n                    if (d.size) {\n                        if ((0, util_1.isArray)(d.size)) {\n                            return Math.max(d.size[0], d.size[1]) + nodeSpacingFunc_1(d);\n                        }\n                        if ((0, util_1.isObject)(d.size)) {\n                            return Math.max(d.size.width, d.size.height) + nodeSpacingFunc_1(d);\n                        }\n                        return d.size + nodeSpacingFunc_1(d);\n                    }\n                    return 10 + nodeSpacingFunc_1(d);\n                };\n            }\n            else if ((0, util_1.isArray)(nodeSize)) {\n                nodeSizeFunc = function (d) {\n                    return Math.max(nodeSize[0], nodeSize[1]) + nodeSpacingFunc_1(d);\n                };\n            }\n            else {\n                nodeSizeFunc = function (d) { return nodeSize + nodeSpacingFunc_1(d); };\n            }\n        }\n        self.nodeSize = nodeSizeFunc;\n        self.linkDistance = proccessToFunc(self.linkDistance, 1);\n        self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n        self.edgeStrength = proccessToFunc(self.edgeStrength, 1);\n        var nodeMap = {};\n        var nodeIdxMap = {};\n        nodes.forEach(function (node, i) {\n            if (!(0, util_1.isNumber)(node.x))\n                node.x = Math.random() * self.width;\n            if (!(0, util_1.isNumber)(node.y))\n                node.y = Math.random() * self.height;\n            var degree = self.degreesMap[node.id];\n            nodeMap[node.id] = __assign(__assign({}, node), { data: __assign(__assign({}, node.data), { size: self.nodeSize(node) || 30, layout: {\n                        inDegree: degree.in,\n                        outDegree: degree.out,\n                        degree: degree.all,\n                        tDegree: degree.in,\n                        sDegree: degree.out,\n                        force: {\n                            mass: self.getMass(node),\n                            nodeStrength: self.nodeStrength(node)\n                        }\n                    } }) });\n            nodeIdxMap[node.id] = i;\n        });\n        self.nodeMap = nodeMap;\n        self.nodeIdxMap = nodeIdxMap;\n        self.edgeInfos = [];\n        edges === null || edges === void 0 ? void 0 : edges.forEach(function (edge) {\n            var sourceNode = nodeMap[edge.source];\n            var targetNode = nodeMap[edge.target];\n            if (!sourceNode || !targetNode) {\n                elf.edgeInfos.push({});\n            }\n            else {\n                self.edgeInfos.push({\n                    edgeStrength: self.edgeStrength(edge),\n                    linkDistance: defSpringLen ? defSpringLen(__assign(__assign({}, edge), { source: sourceNode, target: targetNode }), sourceNode, targetNode) : self.linkDistance(edge, sourceNode, targetNode) || 1 + ((nodeSize(sourceNode) + nodeSize(sourceNode)) || 0) / 2\n                });\n            }\n        });\n        this.getCentripetalOptions();\n        self.onLayoutEnd = self.onLayoutEnd || (function () { });\n        self.run();\n    };\n    Force2Layout.prototype.run = function () {\n        var self = this;\n        var maxIteration = self.maxIteration, nodes = self.nodes, workerEnabled = self.workerEnabled, minMovement = self.minMovement, animate = self.animate, nodeMap = self.nodeMap;\n        if (!nodes)\n            return;\n        var velArray = [];\n        nodes.forEach(function (_, i) {\n            velArray[2 * i] = 0;\n            velArray[2 * i + 1] = 0;\n        });\n        var maxIter = maxIteration;\n        var silence = !animate;\n        if (workerEnabled || silence) {\n            var usedIter = 0;\n            for (var i = 0; (self.judgingDistance > minMovement || i < 1) && i < maxIter; i++) {\n                usedIter = i;\n                self.runOneStep(i, velArray);\n            }\n            self.onLayoutEnd(Object.values(nodeMap));\n        }\n        else {\n            if (typeof window === \"undefined\")\n                return;\n            var iter_1 = 0;\n            // interval for render the result after each iteration\n            this.timeInterval = window.setInterval(function () {\n                if (!nodes)\n                    return;\n                self.runOneStep(iter_1, velArray);\n                iter_1++;\n                if (iter_1 >= maxIter || self.judgingDistance < minMovement) {\n                    self.onLayoutEnd(Object.values(nodeMap));\n                    window.clearInterval(self.timeInterval);\n                }\n            }, 0);\n        }\n    };\n    Force2Layout.prototype.runOneStep = function (iter, velArray) {\n        var _a;\n        var self = this;\n        var nodes = self.nodes, edges = self.edges, nodeMap = self.nodeMap, monitor = self.monitor;\n        var accArray = [];\n        if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length))\n            return;\n        self.calRepulsive(accArray);\n        if (edges)\n            self.calAttractive(accArray);\n        self.calGravity(accArray);\n        var stepInterval = self.interval; // Math.max(0.02, self.interval - iter * 0.002);\n        self.updateVelocity(accArray, velArray, stepInterval);\n        self.updatePosition(velArray, stepInterval);\n        (_a = self.tick) === null || _a === void 0 ? void 0 : _a.call(self);\n        /** 如果需要监控信息，则提供给用户 */\n        if (monitor) {\n            var energy = this.calTotalEnergy(accArray);\n            monitor({ energy: energy, nodes: nodes, edges: edges, iterations: iter });\n        }\n    };\n    Force2Layout.prototype.calTotalEnergy = function (accArray) {\n        var _a = this, nodes = _a.nodes, nodeMap = _a.nodeMap;\n        if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length))\n            return 0;\n        var energy = 0.0;\n        nodes.forEach(function (node, i) {\n            var vx = accArray[2 * i];\n            var vy = accArray[2 * i + 1];\n            var speed2 = vx * vx + vy * vy;\n            var _a = nodeMap[node.id].data.layout.force.mass, mass = _a === void 0 ? 1 : _a;\n            energy += mass * speed2 * 0.5; // p = 1/2*(mv^2)\n        });\n        return energy;\n    };\n    // coulombs law\n    Force2Layout.prototype.calRepulsive = function (accArray) {\n        var self = this;\n        var nodes = self.nodes, nodeMap = self.nodeMap, factor = self.factor, coulombDisScale = self.coulombDisScale;\n        var nodeSize = self.nodeSize;\n        (0, ForceNBody_1.forceNBody)(nodes, nodeMap, factor, coulombDisScale * coulombDisScale, accArray);\n    };\n    // hooks law\n    Force2Layout.prototype.calAttractive = function (accArray) {\n        var self = this;\n        var edges = self.edges, nodeMap = self.nodeMap, nodeIdxMap = self.nodeIdxMap, edgeInfos = self.edgeInfos;\n        var nodeSize = self.nodeSize;\n        edges.forEach(function (edge, i) {\n            var source = (0, util_1.getEdgeTerminal)(edge, 'source');\n            var target = (0, util_1.getEdgeTerminal)(edge, 'target');\n            var sourceNode = nodeMap[source];\n            var targetNode = nodeMap[target];\n            if (!sourceNode || !targetNode)\n                return;\n            var vecX = targetNode.x - sourceNode.x;\n            var vecY = targetNode.y - sourceNode.y;\n            if (!vecX && !vecY) {\n                vecX = Math.random() * 0.01;\n                vecY = Math.random() * 0.01;\n            }\n            var vecLength = Math.sqrt(vecX * vecX + vecY * vecY);\n            var direX = vecX / vecLength;\n            var direY = vecY / vecLength;\n            // @ts-ignore\n            var _a = edgeInfos[i] || {}, _b = _a.linkDistance, linkDistance = _b === void 0 ? 200 : _b, _c = _a.edgeStrength, edgeStrength = _c === void 0 ? 200 : _c;\n            var diff = linkDistance - vecLength;\n            var param = diff * edgeStrength;\n            var massSource = sourceNode.data.layout.force.mass || 1;\n            var massTarget = targetNode.data.layout.force.mass || 1;\n            // 质量占比越大，对另一端影响程度越大\n            var sourceMassRatio = 1 / massSource;\n            var targetMassRatio = 1 / massTarget;\n            var disX = direX * param;\n            var disY = direY * param;\n            var sourceIdx = 2 * nodeIdxMap[source];\n            var targetIdx = 2 * nodeIdxMap[target];\n            accArray[sourceIdx] -= disX * sourceMassRatio;\n            accArray[sourceIdx + 1] -= disY * sourceMassRatio;\n            accArray[targetIdx] += disX * targetMassRatio;\n            accArray[targetIdx + 1] += disY * targetMassRatio;\n        });\n    };\n    // attract to center\n    Force2Layout.prototype.calGravity = function (accArray) {\n        var _a;\n        var self = this;\n        var nodes = self.nodes, _b = self.edges, edges = _b === void 0 ? [] : _b, nodeMap = self.nodeMap, width = self.width, height = self.height, center = self.center, defaultGravity = self.gravity, degreesMap = self.degreesMap, centripetalOptions = self.centripetalOptions;\n        if (!nodes)\n            return;\n        var nodeLength = nodes.length;\n        for (var i = 0; i < nodeLength; i++) {\n            var idx = 2 * i;\n            var node = nodeMap[nodes[i].id];\n            var _c = node.data.layout.force.mass, mass = _c === void 0 ? 1 : _c;\n            var vecX = 0;\n            var vecY = 0;\n            var gravity = defaultGravity;\n            var _d = degreesMap[node.id], inDegree = _d.in, outDegree = _d.out, degree = _d.all;\n            var forceCenter = (_a = self.getCenter) === null || _a === void 0 ? void 0 : _a.call(self, node, degree);\n            if (forceCenter) {\n                var centerX = forceCenter[0], centerY = forceCenter[1], strength = forceCenter[2];\n                vecX = node.x - centerX;\n                vecY = node.y - centerY;\n                gravity = strength;\n            }\n            else {\n                vecX = node.x - center[0];\n                vecY = node.y - center[1];\n            }\n            if (gravity) {\n                accArray[idx] -= gravity * vecX / mass;\n                accArray[idx + 1] -= gravity * vecY / mass;\n            }\n            if (centripetalOptions) {\n                var leaf = centripetalOptions.leaf, single = centripetalOptions.single, others = centripetalOptions.others, centriCenter = centripetalOptions.center;\n                var _e = (centriCenter === null || centriCenter === void 0 ? void 0 : centriCenter(node, nodes, edges, width, height)) || { x: 0, y: 0, centerStrength: 0 }, centriX = _e.x, centriY = _e.y, centerStrength = _e.centerStrength;\n                if (!(0, util_1.isNumber)(centriX) || !(0, util_1.isNumber)(centriY))\n                    continue;\n                var vx = (node.x - centriX) / mass;\n                var vy = (node.y - centriY) / mass;\n                if (centerStrength) {\n                    accArray[idx] -= centerStrength * vx;\n                    accArray[idx + 1] -= centerStrength * vy;\n                }\n                // 孤点\n                if (degree === 0) {\n                    var singleStrength = single(node);\n                    if (!singleStrength)\n                        continue;\n                    accArray[idx] -= singleStrength * vx;\n                    accArray[idx + 1] -= singleStrength * vy;\n                    continue;\n                }\n                // 没有出度或没有入度，都认为是叶子节点\n                if (inDegree === 0 || outDegree === 0) {\n                    var leafStrength = leaf(node, nodes, edges);\n                    if (!leafStrength)\n                        continue;\n                    accArray[idx] -= leafStrength * vx;\n                    accArray[idx + 1] -= leafStrength * vy;\n                    continue;\n                }\n                /** others */\n                var othersStrength = others(node);\n                if (!othersStrength)\n                    continue;\n                accArray[idx] -= othersStrength * vx;\n                accArray[idx + 1] -= othersStrength * vy;\n            }\n        }\n    };\n    // TODO: 待 graphin 修改正确\n    // public attractToSide(accArray: number[]) {\n    //   const { defSideCoe, height, nodes } = this;\n    //   if (!defSideCoe || typeof defSideCoe !== 'function' || !nodes?.length) return;\n    //   nodes.forEach((node, i) => {\n    //     const sideCoe = defSideCoe!(node);\n    //     if (sideCoe === 0) return;\n    //     const targetY = sideCoe > 0 ? 0 : height;\n    //     const strength = Math.abs(sideCoe);\n    //     accArray[2 * i + 1] -= strength * (targetY - node.y);\n    //   });\n    // };\n    Force2Layout.prototype.updateVelocity = function (accArray, velArray, stepInterval) {\n        var self = this;\n        var nodes = self.nodes, damping = self.damping, maxSpeed = self.maxSpeed;\n        if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length))\n            return;\n        nodes.forEach(function (_, i) {\n            var vx = (velArray[2 * i] + accArray[2 * i] * stepInterval) * damping || 0.01;\n            var vy = (velArray[2 * i + 1] + accArray[2 * i + 1] * stepInterval) * damping || 0.01;\n            var vLength = Math.sqrt(vx * vx + vy * vy);\n            if (vLength > maxSpeed) {\n                var param2 = maxSpeed / vLength;\n                vx = param2 * vx;\n                vy = param2 * vy;\n            }\n            velArray[2 * i] = vx;\n            velArray[2 * i + 1] = vy;\n        });\n    };\n    Force2Layout.prototype.updatePosition = function (velArray, stepInterval) {\n        var self = this;\n        var nodes = self.nodes, distanceThresholdMode = self.distanceThresholdMode, nodeMap = self.nodeMap;\n        if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n            this.judgingDistance = 0;\n            return;\n        }\n        var sum = 0;\n        if (distanceThresholdMode === 'max')\n            self.judgingDistance = -Infinity;\n        else if (distanceThresholdMode === 'min')\n            self.judgingDistance = Infinity;\n        nodes.forEach(function (node, i) {\n            var mappedNode = nodeMap[node.id];\n            if ((0, util_1.isNumber)(node.fx) && (0, util_1.isNumber)(node.fy)) {\n                node.x = node.fx;\n                node.y = node.fy;\n                mappedNode.x = node.x;\n                mappedNode.y = node.y;\n                return;\n            }\n            var distX = velArray[2 * i] * stepInterval;\n            var distY = velArray[2 * i + 1] * stepInterval;\n            node.x += distX;\n            node.y += distY;\n            mappedNode.x = node.x;\n            mappedNode.y = node.y;\n            var distanceMagnitude = Math.sqrt(distX * distX + distY * distY);\n            switch (distanceThresholdMode) {\n                case 'max':\n                    if (self.judgingDistance < distanceMagnitude)\n                        self.judgingDistance = distanceMagnitude;\n                    break;\n                case 'min':\n                    if (self.judgingDistance > distanceMagnitude)\n                        self.judgingDistance = distanceMagnitude;\n                    break;\n                default:\n                    sum = sum + distanceMagnitude;\n                    break;\n            }\n        });\n        if (!distanceThresholdMode || distanceThresholdMode === 'mean')\n            self.judgingDistance = sum / nodes.length;\n    };\n    Force2Layout.prototype.stop = function () {\n        if (this.timeInterval && typeof window !== \"undefined\") {\n            window.clearInterval(this.timeInterval);\n        }\n    };\n    Force2Layout.prototype.destroy = function () {\n        var self = this;\n        self.stop();\n        self.tick = null;\n        self.nodes = null;\n        self.edges = null;\n        self.destroyed = true;\n    };\n    Force2Layout.prototype.getType = function () {\n        return \"force2\";\n    };\n    Force2Layout.prototype.getSameTypeLeafMap = function () {\n        var _a = this, nodeClusterBy = _a.nodeClusterBy, nodes = _a.nodes, edges = _a.edges, nodeMap = _a.nodeMap, degreesMap = _a.degreesMap;\n        if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length))\n            return;\n        // eslint-disable-next-line\n        var sameTypeLeafMap = {};\n        nodes.forEach(function (node, i) {\n            var degree = degreesMap[node.id].all;\n            if (degree === 1) {\n                sameTypeLeafMap[node.id] = (0, util_1.getCoreNodeAndRelativeLeafNodes)('leaf', node, edges, nodeClusterBy, degreesMap, nodeMap);\n            }\n        });\n        return sameTypeLeafMap;\n    };\n    return Force2Layout;\n}(base_1.Base));\nexports.Force2Layout = Force2Layout;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/layout/force2/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\n\n// @ts-nocheck\nimport {\n  OutNode,\n  Edge,\n  PointTuple,\n  IndexMap,\n  Point,\n  GForceLayoutOptions,\n  Degree,\n  NodeMap,\n  CentripetalOptions\n} from \"../types\";\nimport { Base } from \"../base\";\nimport { isNumber, isFunction, isArray, getDegreeMap, isObject, getEdgeTerminal, getAvgNodePosition, getCoreNodeAndRelativeLeafNodes } from \"../../util\";\nimport { forceNBody } from \"./ForceNBody\";\n\ntype INode = OutNode & {\n  size: number | PointTuple;\n};\n\n\nconst proccessToFunc = (\n  value: number | Function | undefined,\n  defaultV?: number\n): ((d: any) => number) => {\n  let func;\n  if (!value) {\n    func = (d: any): number => {\n      return defaultV || 1;\n    };\n  } else if (isNumber(value)) {\n    func = (d: any): number => {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n  return func as any;\n};\n\n/**\n * graphin 中的 force 布局\n */\nexport class Force2Layout extends Base {\n  /** 布局中心 */\n  public center: PointTuple;\n\n  /** 停止迭代的最大迭代数 */\n  public maxIteration: number = 1000;\n\n  /** 是否启动 worker */\n  public workerEnabled: boolean = false;\n\n  /** 弹簧引力系数 */\n  public edgeStrength: number | ((d?: any) => number) | undefined = 200;\n\n  /** 斥力系数 */\n  public nodeStrength: number | ((d?: any) => number) | undefined = 1000;\n\n  /** 库伦系数 */\n  public coulombDisScale: number = 0.005;\n\n  /** 阻尼系数 */\n  public damping: number = 0.9;\n\n  /** 最大速度 */\n  public maxSpeed: number = 500;\n\n  /** 一次迭代的平均移动距离小于该值时停止迭代 */\n  public minMovement: number = 0.4;\n\n  /** 迭代中衰减 */\n  public interval: number = 0.02;\n\n  /** 斥力的一个系数 */\n  public factor: number = 1;\n\n  /** 每个节点质量的回调函数，若不指定，则默认使用度数作为节点质量 */\n  public getMass: ((d?: any) => number) | undefined;\n\n  /** 每个节点中心力的 x、y、强度的回调函数，若不指定，则没有额外中心力 */\n  public getCenter: ((d?: any, degree?: number) => number[]) | undefined;\n\n  /** 计算画布上下两侧对节点吸引力大小  */\n  public defSideCoe?: (node: Node) => number;\n\n  /** 理想边长 */\n  public linkDistance: number | ((edge?: any, source?: any, target?: any) => number) | undefined = 200;\n\n  /** 理想边长，兼容 graphin-force */\n  public defSpringLen: number | ((edge?: any, source?: any, target?: any) => number) | undefined;\n\n  /** 重力大小 */\n  public gravity: number = 0;\n\n  /** 向心力 */\n  public centripetalOptions: CentripetalOptions;\n\n  /** 是否需要叶子节点聚类 */\n  public leafCluster: boolean;\n\n  /** 是否需要全部节点聚类 */\n  public clustering: boolean;\n\n  /** 节点聚类的映射字段 */\n  public nodeClusterBy: string;\n\n  /** 节点聚类作用力系数 */\n  public clusterNodeStrength: number | ((node: Node) => number) = 20;\n\n  /** 是否防止重叠 */\n  public preventOverlap: boolean = true;\n\n  /** 防止重叠时的节点大小，默认从节点数据中取 size */\n  public nodeSize: number | number[] | ((d?: any) => number) | undefined;\n\n  /** 防止重叠时的节点之间最小间距 */\n  public nodeSpacing: number | number[] | ((d?: any) => number) | undefined;\n\n  /** 阈值的使用条件，mean 代表平均移动距离小于 minMovement 时停止迭代，max 代表最大移动距离大时 minMovement 时停时迭代。默认为 mean */\n  public distanceThresholdMode: 'mean' | 'max' | 'min' = 'mean';\n\n  /** 每次迭代结束的回调函数 */\n  public tick: (() => void) | null = () => { };\n\n  /** 是否允许每次迭代结束调用回调函数 */\n  public enableTick: boolean;\n\n  public nodes: INode[] | null = [];\n\n  public edges: Edge[] | null = [];\n\n  public width: number = 300;\n\n  public height: number = 300;\n\n  public nodeMap: NodeMap = {};\n\n  public nodeIdxMap: IndexMap = {};\n\n  public canvasEl: HTMLCanvasElement;\n\n  public onLayoutEnd: () => void;\n\n  /** 是否使用 window.setInterval 运行迭代 */\n  public animate: Boolean;\n\n  /** 监控信息，不配置则不计算 */\n  public monitor: (params: { energy: number, nodes: INode[], edge: Edge[], iterations: number }) => void;\n\n  /** 存储节点度数 */\n  private degreesMap: { [id: string]: Degree };\n\n  /** 迭代中的标识 */\n  private timeInterval: number;\n\n  /** 与 minMovement 进行对比的判断停止迭代节点移动距离 */\n  private judgingDistance: number;\n\n  constructor(options?: GForceLayoutOptions) {\n    super();\n    this.judgingDistance = 0;\n    /** 默认的向心配置 */\n    this.centripetalOptions = {\n      leaf: 2,\n      single: 2,\n      others: 1,\n      // eslint-disable-next-line\n      center: (n: any) => {\n        return {\n          x: this.width / 2,\n          y: this.height / 2,\n        };\n      },\n    };\n    const { getMass } = options;\n    this.propsGetMass = getMass;\n    this.updateCfg(options);\n  }\n\n  public getCentripetalOptions() {\n    const { leafCluster, clustering, nodeClusterBy, nodes, nodeMap, clusterNodeStrength: propsClusterNodeStrength } = this;\n\n    const getClusterNodeStrength = (node: Node) =>\n      typeof propsClusterNodeStrength === 'function' ? propsClusterNodeStrength(node) : propsClusterNodeStrength;\n\n    let centripetalOptions = {};\n    let sameTypeLeafMap: any;\n    // 如果传入了需要叶子节点聚类\n    if (leafCluster) {\n      sameTypeLeafMap = this.getSameTypeLeafMap() || {};\n      const relativeNodesType = Array.from(new Set(nodes?.map((node) => node[nodeClusterBy]))) || [];\n      centripetalOptions = {\n        single: 100,\n        leaf: (node, nodes, edges) => {\n          // 找出与它关联的边的起点或终点出发的所有一度节点中同类型的叶子节点\n          const { relativeLeafNodes, sameTypeLeafNodes } = sameTypeLeafMap[node.id] || {};\n          // 如果都是同一类型或者每种类型只有1个，则施加默认向心力\n          if (sameTypeLeafNodes?.length === relativeLeafNodes?.length || relativeNodesType?.length === 1) {\n            return 1;\n          }\n          return getClusterNodeStrength(node);\n        },\n        others: 1,\n        center: (node, nodes, edges) => {\n          const { degree } = node.data?.layout || {};\n          // 孤点默认给1个远离的中心点\n          if (!degree) {\n            return {\n              x: 100,\n              y: 100,\n            };\n          }\n          let centerNode;\n          if (degree === 1) {\n            // 如果为叶子节点\n            // 找出与它关联的边的起点出发的所有一度节点中同类型的叶子节点\n            const { sameTypeLeafNodes = [] } = sameTypeLeafMap[node.id] || {};\n            if (sameTypeLeafNodes.length === 1) {\n              // 如果同类型的叶子节点只有1个，中心节点置为undefined\n              centerNode = undefined;\n            } else if (sameTypeLeafNodes.length > 1) {\n              // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n              centerNode = getAvgNodePosition(sameTypeLeafNodes);\n            }\n          } else {\n            centerNode = undefined;\n          }\n          return {\n            x: centerNode?.x as number,\n            y: centerNode?.y as number,\n          };\n        },\n      };\n    }\n\n    // 如果传入了全局节点聚类\n    if (clustering) {\n      if (!sameTypeLeafMap) sameTypeLeafMap = this.getSameTypeLeafMap();\n      const clusters: string[] = Array.from(new Set(nodes.map((node, i) => {\n        return node[nodeClusterBy];\n      }))).filter(\n        (item) => item !== undefined,\n      );\n      const centerNodeInfo: { [key: string]: { x: number; y: number } } = {};\n      clusters.forEach((cluster) => {\n        const sameTypeNodes = nodes.filter((item) => item[nodeClusterBy] === cluster).map((node) => nodeMap[node.id]);\n        // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n        centerNodeInfo[cluster] = getAvgNodePosition(sameTypeNodes);\n      });\n      centripetalOptions = {\n        single: (node) => getClusterNodeStrength(node),\n        leaf: (node) => getClusterNodeStrength(node),\n        others: (node) => getClusterNodeStrength(node),\n        center: (node, nodes, edges) => {\n          // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n          const centerNode = centerNodeInfo[node[nodeClusterBy]];\n          return {\n            x: centerNode?.x as number,\n            y: centerNode?.y as number,\n          };\n        },\n      };\n    }\n\n    this.centripetalOptions = {\n      ...this.centripetalOptions,\n      ...centripetalOptions,\n    };\n\n    const { leaf, single, others } = this.centripetalOptions;\n    if (leaf && typeof leaf !== 'function') this.centripetalOptions.leaf = () => leaf;\n    if (single && typeof single !== 'function') this.centripetalOptions.single = () => single;\n    if (others && typeof others !== 'function') this.centripetalOptions.others = () => others;\n  }\n\n  public updateCfg(cfg: any) {\n    if (cfg) Object.assign(this, cfg);\n  }\n\n  public getDefaultCfg() {\n    return {\n      maxIteration: 500,\n      gravity: 10,\n      enableTick: true,\n      animate: true,\n    };\n  }\n\n  /**\n   * 执行布局\n   */\n  public execute() {\n    const self = this;\n    self.stop();\n    const { nodes, edges, defSpringLen } = self;\n\n    self.judgingDistance = 0;\n\n    if (!nodes || nodes.length === 0) {\n      self.onLayoutEnd([]);\n      return;\n    }\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n    const center = self.center;\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      self.onLayoutEnd([{ ...nodes[0] }]);\n      return;\n    }\n    self.degreesMap = getDegreeMap(nodes, edges);\n    if (self.propsGetMass) {\n      self.getMass = self.propsGetMass;\n    } else {\n      self.getMass = (d) => {\n        let massWeight = 1;\n        if (isNumber(d.mass)) massWeight = d.mass;\n        const degree = self.degreesMap[d.id].all;\n        return (!degree || degree < 5) ? massWeight : degree * 5 * massWeight;\n      };\n    }\n\n\n    // node size function\n    const nodeSize = self.nodeSize;\n    let nodeSizeFunc;\n    if (self.preventOverlap) {\n      const nodeSpacing = self.nodeSpacing;\n      let nodeSpacingFunc: (d?: any) => number;\n      if (isNumber(nodeSpacing)) {\n        nodeSpacingFunc = () => nodeSpacing as number;\n      } else if (isFunction(nodeSpacing)) {\n        nodeSpacingFunc = nodeSpacing as (d?: any) => number;\n      } else {\n        nodeSpacingFunc = () => 0;\n      }\n      if (!nodeSize) {\n        nodeSizeFunc = (d: INode) => {\n          if (d.size) {\n            if (isArray(d.size)) {\n              return Math.max(d.size[0], d.size[1]) + nodeSpacingFunc(d);\n            } if (isObject(d.size)) {\n              return Math.max(d.size.width, d.size.height) + nodeSpacingFunc(d);\n            }\n            return (d.size as number) + nodeSpacingFunc(d);\n          }\n          return 10 + nodeSpacingFunc(d);\n        };\n      } else if (isArray(nodeSize)) {\n        nodeSizeFunc = (d: INode) => {\n          return Math.max(nodeSize[0], nodeSize[1]) + nodeSpacingFunc(d);\n        };\n      } else {\n        nodeSizeFunc = (d: INode) => (nodeSize as number) + nodeSpacingFunc(d);\n      }\n    }\n    self.nodeSize = nodeSizeFunc;\n\n    self.linkDistance = proccessToFunc(self.linkDistance, 1);\n    self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n    self.edgeStrength = proccessToFunc(self.edgeStrength, 1);\n\n    const nodeMap: NodeMap = {};\n    const nodeIdxMap: IndexMap = {};\n    nodes.forEach((node, i) => {\n      if (!isNumber(node.x)) node.x = Math.random() * self.width;\n      if (!isNumber(node.y)) node.y = Math.random() * self.height;\n      const degree = self.degreesMap[node.id];\n      nodeMap[node.id] = {\n        ...node,\n        data: {\n          ...node.data,\n          size: self.nodeSize(node) || 30,\n          layout: {\n            inDegree: degree.in,\n            outDegree: degree.out,\n            degree: degree.all,\n            tDegree: degree.in,\n            sDegree: degree.out,\n            force: {\n              mass: self.getMass(node),\n              nodeStrength: self.nodeStrength(node)\n            }\n          }\n        }\n      };\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap;\n\n\n    self.edgeInfos = [];\n    edges?.forEach((edge) => {\n      const sourceNode = nodeMap[edge.source];\n      const targetNode = nodeMap[edge.target];\n      if (!sourceNode || !targetNode) {\n        elf.edgeInfos.push({});\n      } else {\n        self.edgeInfos.push({\n          edgeStrength: self.edgeStrength(edge),\n          linkDistance: defSpringLen ? defSpringLen(\n            {\n              ...edge,\n              source: sourceNode,\n              target: targetNode\n            },\n            sourceNode,\n            targetNode\n          ) : self.linkDistance(edge, sourceNode, targetNode) || 1 + ((nodeSize(sourceNode) + nodeSize(sourceNode)) || 0) / 2\n        });\n      }\n    });\n\n    this.getCentripetalOptions();\n\n    self.onLayoutEnd = self.onLayoutEnd || (() => { });\n\n    self.run();\n  }\n\n  public run() {\n    const self = this;\n    const { maxIteration, nodes, workerEnabled, minMovement, animate, nodeMap } = self;\n\n    if (!nodes) return;\n\n    const velArray: number[] = [];\n    nodes.forEach((_, i) => {\n      velArray[2 * i] = 0;\n      velArray[2 * i + 1] = 0;\n    });\n\n    const maxIter = maxIteration;\n    const silence = !animate;\n    if (workerEnabled || silence) {\n      let usedIter = 0;\n      for (let i = 0; (self.judgingDistance > minMovement || i < 1) && i < maxIter; i++) {\n        usedIter = i;\n        self.runOneStep(i, velArray);\n      }\n      self.onLayoutEnd(Object.values(nodeMap));\n    } else {\n      if (typeof window === \"undefined\") return;\n      let iter = 0;\n      // interval for render the result after each iteration\n      this.timeInterval = window.setInterval(() => {\n        if (!nodes) return;\n        self.runOneStep(iter, velArray);\n        iter++;\n        if (iter >= maxIter || self.judgingDistance < minMovement) {\n          self.onLayoutEnd(Object.values(nodeMap));\n          window.clearInterval(self.timeInterval);\n        }\n      }, 0);\n    }\n  }\n\n  private runOneStep(iter: number, velArray: number[]) {\n    const self = this;\n    const { nodes, edges, nodeMap, monitor } = self;\n    const accArray: number[] = [];\n    if (!nodes?.length) return;\n    self.calRepulsive(accArray);\n    if (edges) self.calAttractive(accArray);\n    self.calGravity(accArray);\n    const stepInterval = self.interval; // Math.max(0.02, self.interval - iter * 0.002);\n    self.updateVelocity(accArray, velArray, stepInterval);\n    self.updatePosition(velArray, stepInterval);\n    self.tick?.();\n\n    /** 如果需要监控信息，则提供给用户 */\n    if (monitor) {\n      const energy = this.calTotalEnergy(accArray);\n      monitor({ energy, nodes, edges, iterations: iter });\n    }\n  }\n\n  private calTotalEnergy(accArray: number[]) {\n    const { nodes, nodeMap } = this;\n    if (!nodes?.length) return 0;\n    let energy = 0.0;\n\n    nodes.forEach((node, i) => {\n      const vx = accArray[2 * i];\n      const vy = accArray[2 * i + 1];\n      const speed2 = vx * vx + vy * vy;\n      const { mass = 1 } = nodeMap[node.id].data.layout.force;\n      energy += mass * speed2 * 0.5; // p = 1/2*(mv^2)\n    });\n\n    return energy;\n  }\n\n  // coulombs law\n  public calRepulsive(accArray: number[]) {\n    const self = this;\n    const { nodes, nodeMap, factor, coulombDisScale } = self;\n    const nodeSize = self.nodeSize as Function;\n    forceNBody(nodes, nodeMap, factor, coulombDisScale * coulombDisScale, accArray);\n  }\n\n  // hooks law\n  public calAttractive(accArray: number[]) {\n    const self = this;\n    const { edges, nodeMap, nodeIdxMap, edgeInfos } = self;\n    const nodeSize = self.nodeSize as Function;\n    edges.forEach((edge, i) => {\n      const source = getEdgeTerminal(edge, 'source');\n      const target = getEdgeTerminal(edge, 'target');\n      const sourceNode = nodeMap[source];\n      const targetNode = nodeMap[target];\n      if (!sourceNode || !targetNode) return;\n      let vecX = targetNode.x - sourceNode.x;\n      let vecY = targetNode.y - sourceNode.y;\n      if (!vecX && !vecY) {\n        vecX = Math.random() * 0.01;\n        vecY = Math.random() * 0.01;\n      }\n      const vecLength = Math.sqrt(vecX * vecX + vecY * vecY);\n      const direX = vecX / vecLength;\n      const direY = vecY / vecLength;\n      // @ts-ignore\n      const { linkDistance = 200, edgeStrength = 200 } = edgeInfos[i] || {};\n      const diff = linkDistance - vecLength;\n      const param = diff * edgeStrength;\n      const massSource = sourceNode.data.layout.force.mass || 1;\n      const massTarget = targetNode.data.layout.force.mass || 1;\n      // 质量占比越大，对另一端影响程度越大\n      const sourceMassRatio = 1 / massSource;\n      const targetMassRatio = 1 / massTarget;\n      const disX = direX * param;\n      const disY = direY * param;\n      const sourceIdx = 2 * nodeIdxMap[source];\n      const targetIdx = 2 * nodeIdxMap[target];\n      accArray[sourceIdx] -= disX * sourceMassRatio;\n      accArray[sourceIdx + 1] -= disY * sourceMassRatio;\n      accArray[targetIdx] += disX * targetMassRatio;\n      accArray[targetIdx + 1] += disY * targetMassRatio;\n    });\n  }\n\n  // attract to center\n  public calGravity(accArray: number[]) {\n    const self = this;\n    const { nodes, edges = [], nodeMap, width, height, center, gravity: defaultGravity, degreesMap, centripetalOptions } = self;\n    if (!nodes) return;\n    const nodeLength = nodes.length;\n    for (let i = 0; i < nodeLength; i++) {\n      const idx = 2 * i;\n      const node = nodeMap[nodes[i].id];\n      const { mass = 1 } = node.data.layout.force;\n      let vecX = 0;\n      let vecY = 0;\n      let gravity = defaultGravity;\n\n      const { in: inDegree, out: outDegree, all: degree } = degreesMap[node.id];\n      const forceCenter = self.getCenter?.(node, degree);\n      if (forceCenter) {\n        const [centerX, centerY, strength] = forceCenter;\n        vecX = node.x - centerX;\n        vecY = node.y - centerY;\n        gravity = strength;\n      } else {\n        vecX = node.x - center[0];\n        vecY = node.y - center[1];\n      }\n\n      if (gravity) {\n        accArray[idx] -= gravity * vecX / mass;\n        accArray[idx + 1] -= gravity * vecY / mass;\n      }\n\n      if (centripetalOptions) {\n        const { leaf, single, others, center: centriCenter } = centripetalOptions;\n        const { x: centriX, y: centriY, centerStrength } = centriCenter?.(node, nodes, edges, width, height) || { x: 0, y: 0, centerStrength: 0 };\n        if (!isNumber(centriX) || !isNumber(centriY)) continue;\n        const vx = (node.x - centriX) / mass;\n        const vy = (node.y - centriY) / mass;\n        if (centerStrength) {\n          accArray[idx] -= centerStrength * vx;\n          accArray[idx + 1] -= centerStrength * vy;\n        }\n\n        // 孤点\n        if (degree === 0) {\n          const singleStrength = single(node);\n          if (!singleStrength) continue;\n          accArray[idx] -= singleStrength * vx;\n          accArray[idx + 1] -= singleStrength * vy;\n          continue;\n        }\n\n        // 没有出度或没有入度，都认为是叶子节点\n        if (inDegree === 0 || outDegree === 0) {\n          const leafStrength = leaf(node, nodes, edges);\n          if (!leafStrength) continue;\n          accArray[idx] -= leafStrength * vx;\n          accArray[idx + 1] -= leafStrength * vy;\n          continue;\n        }\n\n        /** others */\n        const othersStrength = others(node);\n        if (!othersStrength) continue;\n        accArray[idx] -= othersStrength * vx;\n        accArray[idx + 1] -= othersStrength * vy;\n      }\n    }\n  }\n\n  // TODO: 待 graphin 修改正确\n  // public attractToSide(accArray: number[]) {\n  //   const { defSideCoe, height, nodes } = this;\n  //   if (!defSideCoe || typeof defSideCoe !== 'function' || !nodes?.length) return;\n  //   nodes.forEach((node, i) => {\n  //     const sideCoe = defSideCoe!(node);\n  //     if (sideCoe === 0) return;\n  //     const targetY = sideCoe > 0 ? 0 : height;\n  //     const strength = Math.abs(sideCoe);\n  //     accArray[2 * i + 1] -= strength * (targetY - node.y);\n  //   });\n  // };\n\n  public updateVelocity(\n    accArray: number[],\n    velArray: number[],\n    stepInterval: number\n  ) {\n    const self = this;\n    const { nodes, damping, maxSpeed } = self;\n    if (!nodes?.length) return;\n    nodes.forEach((_, i) => {\n      let vx = (velArray[2 * i] + accArray[2 * i] * stepInterval) * damping || 0.01;\n      let vy = (velArray[2 * i + 1] + accArray[2 * i + 1] * stepInterval) * damping || 0.01;\n      const vLength = Math.sqrt(vx * vx + vy * vy);\n      if (vLength > maxSpeed) {\n        const param2 = maxSpeed / vLength;\n        vx = param2 * vx;\n        vy = param2 * vy;\n      }\n      velArray[2 * i] = vx;\n      velArray[2 * i + 1] = vy;\n    });\n  }\n\n  public updatePosition(\n    velArray: number[],\n    stepInterval: number,\n  ) {\n    const self = this;\n    const { nodes, distanceThresholdMode, nodeMap } = self;\n    if (!nodes?.length) {\n      this.judgingDistance = 0;\n      return;\n    }\n    let sum = 0;\n    if (distanceThresholdMode === 'max') self.judgingDistance = -Infinity;\n    else if (distanceThresholdMode === 'min') self.judgingDistance = Infinity;\n\n    nodes.forEach((node: any, i) => {\n      const mappedNode = nodeMap[node.id];\n      if (isNumber(node.fx) && isNumber(node.fy)) {\n        node.x = node.fx;\n        node.y = node.fy;\n        mappedNode.x = node.x;\n        mappedNode.y = node.y;\n        return;\n      }\n      const distX = velArray[2 * i] * stepInterval;\n      const distY = velArray[2 * i + 1] * stepInterval;\n      node.x += distX;\n      node.y += distY;\n      mappedNode.x = node.x;\n      mappedNode.y = node.y;\n\n      const distanceMagnitude = Math.sqrt(distX * distX + distY * distY);\n      switch (distanceThresholdMode) {\n        case 'max':\n          if (self.judgingDistance < distanceMagnitude) self.judgingDistance = distanceMagnitude;\n          break;\n        case 'min':\n          if (self.judgingDistance > distanceMagnitude) self.judgingDistance = distanceMagnitude;\n          break;\n        default:\n          sum = sum + distanceMagnitude;\n          break;\n      }\n    });\n    if (!distanceThresholdMode || distanceThresholdMode === 'mean') self.judgingDistance = sum / nodes.length;\n  }\n\n  public stop() {\n    if (this.timeInterval && typeof window !== \"undefined\") {\n      window.clearInterval(this.timeInterval);\n    }\n  }\n\n  public destroy() {\n    const self = this;\n    self.stop();\n    self.tick = null;\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  }\n\n  public getType() {\n    return \"force2\";\n  }\n\n  private getSameTypeLeafMap() {\n    const { nodeClusterBy, nodes, edges, nodeMap, degreesMap } = this;\n    if (!nodes?.length) return;\n    // eslint-disable-next-line\n    const sameTypeLeafMap: { [nodeId: string]: any } = {};\n    nodes.forEach((node, i) => {\n      const degree = degreesMap[node.id].all;\n      if (degree === 1) {\n        sameTypeLeafMap[node.id] = getCoreNodeAndRelativeLeafNodes('leaf', node, edges, nodeClusterBy, degreesMap, nodeMap);\n      }\n    });\n    return sameTypeLeafMap;\n  }\n}\n"]}},"error":null,"hash":"16ad10a3f0824c2466197b46eef4416d","cacheData":{"env":{}}}