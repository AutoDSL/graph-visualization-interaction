{"id":"node_modules/@antv/layout/lib/layout/force/force-in-a-box.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force-in-a-box.js.map","includedInParent":true,"mtime":1676178923620},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\force\\force-in-a-box.ts","includedInParent":true,"mtime":1676178923872},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"d3-force","loc":{"line":26,"column":35,"index":1139},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force-in-a-box.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\d3-force\\src\\index.js"},{"name":"../../util","loc":{"line":27,"column":21,"index":1174},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force-in-a-box.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\index.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3Force = __importStar(require(\"d3-force\"));\nvar util_1 = require(\"../../util\");\n// https://github.com/john-guerra/forceInABox/blob/master/src/forceInABox.js\nfunction forceInABox() {\n    function constant(_) {\n        return function () { return _; };\n    }\n    var groupBy = function (d) {\n        return d.cluster;\n    };\n    var forceNodeSize = constant(1);\n    var forceCharge = constant(-1);\n    var forceLinkDistance = constant(100);\n    var forceLinkStrength = constant(0.1);\n    var offset = [0, 0];\n    var nodes = [];\n    var nodesMap = {};\n    var links = [];\n    var centerX = 100;\n    var centerY = 100;\n    var foci = {\n        none: {\n            x: 0,\n            y: 0,\n        },\n    };\n    var templateNodes = [];\n    var templateForce;\n    var template = 'force';\n    var enableGrouping = true;\n    var strength = 0.1;\n    function force(alpha) {\n        if (!enableGrouping) {\n            return force;\n        }\n        templateForce.tick();\n        getFocisFromTemplate();\n        for (var i = 0, n = nodes.length, node = void 0, k = alpha * strength; i < n; ++i) {\n            node = nodes[i];\n            node.vx += (foci[groupBy(node)].x - node.x) * k;\n            node.vy += (foci[groupBy(node)].y - node.y) * k;\n        }\n    }\n    function initialize() {\n        if (!nodes)\n            return;\n        initializeWithForce();\n    }\n    function initializeWithForce() {\n        if (!nodes || !nodes.length) {\n            return;\n        }\n        if (groupBy(nodes[0]) === undefined) {\n            throw Error(\"Couldnt find the grouping attribute for the nodes. Make sure to set it up with forceInABox.groupBy('clusterAttr') before calling .links()\");\n        }\n        // checkLinksAsObjects();\n        var net = getGroupsGraph();\n        templateForce = d3Force\n            .forceSimulation(net.nodes)\n            .force('x', d3Force.forceX(centerX).strength(0.1))\n            .force('y', d3Force.forceY(centerY).strength(0.1))\n            .force('collide', d3Force.forceCollide(function (d) { return d.r; }).iterations(4))\n            .force('charge', d3Force.forceManyBody().strength(forceCharge))\n            .force('links', d3Force\n            .forceLink(net.nodes.length ? net.links : [])\n            .distance(forceLinkDistance)\n            .strength(forceLinkStrength));\n        templateNodes = templateForce.nodes();\n        getFocisFromTemplate();\n    }\n    function getGroupsGraph() {\n        var gnodes = [];\n        var glinks = [];\n        var dNodes = {};\n        var clustersList = [];\n        var clustersCounts = {};\n        var clustersLinks = [];\n        clustersCounts = computeClustersNodeCounts(nodes);\n        clustersLinks = computeClustersLinkCounts(links);\n        clustersList = Object.keys(clustersCounts);\n        clustersList.forEach(function (key, index) {\n            var val = clustersCounts[key];\n            // Uses approx meta-node size\n            gnodes.push({\n                id: key,\n                size: val.count,\n                r: Math.sqrt(val.sumforceNodeSize / Math.PI),\n            });\n            dNodes[key] = index;\n        });\n        clustersLinks.forEach(function (l) {\n            var sourceTerminal = (0, util_1.getEdgeTerminal)(l, 'source');\n            var targetTerminal = (0, util_1.getEdgeTerminal)(l, 'target');\n            var source = dNodes[sourceTerminal];\n            var target = dNodes[targetTerminal];\n            if (source !== undefined && target !== undefined) {\n                glinks.push({\n                    source: source,\n                    target: target,\n                    count: l.count,\n                });\n            }\n        });\n        return {\n            nodes: gnodes,\n            links: glinks,\n        };\n    }\n    function computeClustersNodeCounts(nodes) {\n        var clustersCounts = {};\n        nodes.forEach(function (d) {\n            var key = groupBy(d);\n            if (!clustersCounts[key]) {\n                clustersCounts[key] = {\n                    count: 0,\n                    sumforceNodeSize: 0,\n                };\n            }\n        });\n        nodes.forEach(function (d) {\n            var key = groupBy(d);\n            var nodeSize = forceNodeSize(d);\n            var tmpCount = clustersCounts[key];\n            tmpCount.count = tmpCount.count + 1;\n            tmpCount.sumforceNodeSize =\n                tmpCount.sumforceNodeSize + Math.PI * (nodeSize * nodeSize) * 1.3;\n            clustersCounts[key] = tmpCount;\n        });\n        return clustersCounts;\n    }\n    function computeClustersLinkCounts(links) {\n        var dClusterLinks = {};\n        var clusterLinks = [];\n        links.forEach(function (l) {\n            var key = getLinkKey(l);\n            var count = 0;\n            if (dClusterLinks[key] !== undefined) {\n                count = dClusterLinks[key];\n            }\n            count += 1;\n            dClusterLinks[key] = count;\n        });\n        // @ts-ignore\n        var entries = Object.entries(dClusterLinks);\n        entries.forEach(function (_a) {\n            var key = _a[0], count = _a[1];\n            var source = key.split('~')[0];\n            var target = key.split('~')[1];\n            if (source !== undefined && target !== undefined) {\n                clusterLinks.push({\n                    source: source,\n                    target: target,\n                    count: count,\n                });\n            }\n        });\n        return clusterLinks;\n    }\n    function getFocisFromTemplate() {\n        foci = {\n            none: {\n                x: 0,\n                y: 0,\n            },\n        };\n        templateNodes.forEach(function (d) {\n            foci[d.id] = {\n                x: d.x - offset[0],\n                y: d.y - offset[1],\n            };\n        });\n        return foci;\n    }\n    function getLinkKey(l) {\n        var source = (0, util_1.getEdgeTerminal)(l, 'source');\n        var target = (0, util_1.getEdgeTerminal)(l, 'target');\n        var sourceID = groupBy(nodesMap[source]);\n        var targetID = groupBy(nodesMap[target]);\n        return sourceID <= targetID\n            ? \"\".concat(sourceID, \"~\").concat(targetID)\n            : \"\".concat(targetID, \"~\").concat(sourceID);\n    }\n    function genNodesMap(nodes) {\n        nodesMap = {};\n        nodes.forEach(function (node) {\n            nodesMap[node.id] = node;\n        });\n    }\n    function setTemplate(x) {\n        if (!arguments.length)\n            return template;\n        template = x;\n        initialize();\n        return force;\n    }\n    function setGroupBy(x) {\n        if (!arguments.length)\n            return groupBy;\n        if (typeof x === 'string') {\n            groupBy = function (d) {\n                return d[x];\n            };\n            return force;\n        }\n        groupBy = x;\n        return force;\n    }\n    function setEnableGrouping(x) {\n        if (!arguments.length)\n            return enableGrouping;\n        enableGrouping = x;\n        return force;\n    }\n    function setStrength(x) {\n        if (!arguments.length)\n            return strength;\n        strength = x;\n        return force;\n    }\n    function setCenterX(_) {\n        if (arguments.length) {\n            centerX = _;\n            return force;\n        }\n        return centerX;\n    }\n    function setCenterY(_) {\n        if (arguments.length) {\n            centerY = _;\n            return force;\n        }\n        return centerY;\n    }\n    function setNodes(_) {\n        if (arguments.length) {\n            genNodesMap(_ || []);\n            nodes = _ || [];\n            return force;\n        }\n        return nodes;\n    }\n    function setLinks(_) {\n        if (arguments.length) {\n            links = _ || [];\n            initialize();\n            return force;\n        }\n        return links;\n    }\n    function setForceNodeSize(_) {\n        if (arguments.length) {\n            if (typeof _ === 'function') {\n                forceNodeSize = _;\n            }\n            else {\n                forceNodeSize = constant(+_);\n            }\n            initialize();\n            return force;\n        }\n        return forceNodeSize;\n    }\n    function setForceCharge(_) {\n        if (arguments.length) {\n            if (typeof _ === 'function') {\n                forceCharge = _;\n            }\n            else {\n                forceCharge = constant(+_);\n            }\n            initialize();\n            return force;\n        }\n        return forceCharge;\n    }\n    function setForceLinkDistance(_) {\n        if (arguments.length) {\n            if (typeof _ === 'function') {\n                forceLinkDistance = _;\n            }\n            else {\n                forceLinkDistance = constant(+_);\n            }\n            initialize();\n            return force;\n        }\n        return forceLinkDistance;\n    }\n    function setForceLinkStrength(_) {\n        if (arguments.length) {\n            if (typeof _ === 'function') {\n                forceLinkStrength = _;\n            }\n            else {\n                forceLinkStrength = constant(+_);\n            }\n            initialize();\n            return force;\n        }\n        return forceLinkStrength;\n    }\n    function setOffset(_) {\n        if (arguments.length) {\n            offset = _;\n            return force;\n        }\n        return offset;\n    }\n    force.initialize = function (_) {\n        nodes = _;\n        initialize();\n    };\n    force.template = setTemplate;\n    force.groupBy = setGroupBy;\n    force.enableGrouping = setEnableGrouping;\n    force.strength = setStrength;\n    force.centerX = setCenterX;\n    force.centerY = setCenterY;\n    force.nodes = setNodes;\n    force.links = setLinks;\n    force.forceNodeSize = setForceNodeSize;\n    // Legacy support\n    force.nodeSize = force.forceNodeSize;\n    force.forceCharge = setForceCharge;\n    force.forceLinkDistance = setForceLinkDistance;\n    force.forceLinkStrength = setForceLinkStrength;\n    force.offset = setOffset;\n    force.getFocis = getFocisFromTemplate;\n    return force;\n}\nexports.default = forceInABox;\n"},"sourceMaps":{"js":{"version":3,"file":"force-in-a-box.js","sourceRoot":"","sources":["../../../src/layout/force/force-in-a-box.ts"],"names":[],"mappings":"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","sourcesContent":["import * as d3Force from 'd3-force';\nimport { getEdgeTerminal } from '../../util';\n\ninterface INode {\n  id: string;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  cluster: any;\n}\n\n// https://github.com/john-guerra/forceInABox/blob/master/src/forceInABox.js\nexport default function forceInABox() {\n  function constant(_: any): () => any {\n    return () => _;\n  }\n\n  let groupBy = (d: INode) => {\n    return d.cluster;\n  };\n  let forceNodeSize: (() => number) | ((d: any) => number) = constant(1);\n  let forceCharge: (() => number) | ((d: any) => number) = constant(-1);\n  let forceLinkDistance: (() => number) | ((d: any) => number) = constant(100);\n  let forceLinkStrength: (() => number) | ((d: any) => number) = constant(0.1);\n  let offset = [0, 0];\n\n  let nodes: INode[] = [];\n  let nodesMap: any = {};\n  let links: any[] = [];\n  let centerX = 100;\n  let centerY = 100;\n  let foci: any = {\n    none: {\n      x: 0,\n      y: 0,\n    },\n  };\n  let templateNodes: INode[] = [];\n  let templateForce: any;\n  let template = 'force';\n  let enableGrouping = true;\n  let strength = 0.1;\n\n  function force(alpha: number) {\n    if (!enableGrouping) {\n      return force;\n    }\n    templateForce.tick();\n    getFocisFromTemplate();\n\n    for (let i = 0, n = nodes.length, node, k = alpha * strength; i < n; ++i) {\n      node = nodes[i];\n      node.vx += (foci[groupBy(node)].x - node.x) * k;\n      node.vy += (foci[groupBy(node)].y - node.y) * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    initializeWithForce();\n  }\n\n  function initializeWithForce() {\n    if (!nodes || !nodes.length) {\n      return;\n    }\n\n    if (groupBy(nodes[0]) === undefined) {\n      throw Error(\n        \"Couldnt find the grouping attribute for the nodes. Make sure to set it up with forceInABox.groupBy('clusterAttr') before calling .links()\",\n      );\n    }\n\n    // checkLinksAsObjects();\n\n    const net = getGroupsGraph();\n    templateForce = d3Force\n      .forceSimulation(net.nodes)\n      .force('x', d3Force.forceX(centerX).strength(0.1))\n      .force('y', d3Force.forceY(centerY).strength(0.1))\n      .force('collide', d3Force.forceCollide((d: any) => d.r).iterations(4))\n      .force('charge', d3Force.forceManyBody().strength(forceCharge))\n      .force(\n        'links',\n        d3Force\n          .forceLink(net.nodes.length ? net.links : [])\n          .distance(forceLinkDistance)\n          .strength(forceLinkStrength),\n      );\n\n    templateNodes = templateForce.nodes();\n\n    getFocisFromTemplate();\n  }\n\n  function getGroupsGraph() {\n    const gnodes: any = [];\n    const glinks: any = [];\n    const dNodes: any = {};\n    let clustersList = [];\n    let clustersCounts: any = {};\n    let clustersLinks: any = [];\n\n    clustersCounts = computeClustersNodeCounts(nodes);\n    clustersLinks = computeClustersLinkCounts(links);\n\n    clustersList = Object.keys(clustersCounts);\n\n    clustersList.forEach((key, index) => {\n      const val = clustersCounts[key];\n      // Uses approx meta-node size\n      gnodes.push({\n        id: key,\n        size: val.count,\n        r: Math.sqrt(val.sumforceNodeSize / Math.PI),\n      });\n      dNodes[key] = index;\n    });\n\n    clustersLinks.forEach((l: any) => {\n      const sourceTerminal = getEdgeTerminal(l, 'source');\n      const targetTerminal = getEdgeTerminal(l, 'target');\n      const source = dNodes[sourceTerminal];\n      const target = dNodes[targetTerminal];\n      if (source !== undefined && target !== undefined) {\n        glinks.push({\n          source,\n          target,\n          count: l.count,\n        });\n      }\n    });\n\n    return {\n      nodes: gnodes,\n      links: glinks,\n    };\n  }\n\n  function computeClustersNodeCounts(nodes: any) {\n    const clustersCounts: any = {};\n\n    nodes.forEach((d: any) => {\n      const key = groupBy(d);\n      if (!clustersCounts[key]) {\n        clustersCounts[key] = {\n          count: 0,\n          sumforceNodeSize: 0,\n        };\n      }\n    });\n    nodes.forEach((d: any) => {\n      const key = groupBy(d);\n      const nodeSize = forceNodeSize(d);\n      const tmpCount = clustersCounts[key];\n      tmpCount.count = tmpCount.count + 1;\n      tmpCount.sumforceNodeSize =\n        tmpCount.sumforceNodeSize + Math.PI * (nodeSize * nodeSize) * 1.3;\n      clustersCounts[key] = tmpCount;\n    });\n\n    return clustersCounts;\n  }\n\n  function computeClustersLinkCounts(links: any) {\n    const dClusterLinks: any = {};\n    const clusterLinks: any = [];\n    links.forEach((l: any) => {\n      const key = getLinkKey(l);\n      let count = 0;\n      if (dClusterLinks[key] !== undefined) {\n        count = dClusterLinks[key];\n      }\n      count += 1;\n      dClusterLinks[key] = count;\n    });\n\n    // @ts-ignore\n    const entries = Object.entries(dClusterLinks);\n\n    entries.forEach(([key, count]: any) => {\n      const source = key.split('~')[0];\n      const target = key.split('~')[1];\n      if (source !== undefined && target !== undefined) {\n        clusterLinks.push({\n          source,\n          target,\n          count,\n        });\n      }\n    });\n\n    return clusterLinks;\n  }\n\n  function getFocisFromTemplate() {\n    foci = {\n      none: {\n        x: 0,\n        y: 0,\n      },\n    };\n    templateNodes.forEach((d) => {\n      foci[d.id] = {\n        x: d.x - offset[0],\n        y: d.y - offset[1],\n      };\n    });\n    return foci;\n  }\n\n  function getLinkKey(l: any) {\n    const source = getEdgeTerminal(l, 'source');\n    const target = getEdgeTerminal(l, 'target');\n    const sourceID = groupBy(nodesMap[source]);\n    const targetID = groupBy(nodesMap[target]);\n\n    return sourceID <= targetID\n      ? `${sourceID}~${targetID}`\n      : `${targetID}~${sourceID}`;\n  }\n\n  function genNodesMap(nodes: any) {\n    nodesMap = {};\n    nodes.forEach((node: any) => {\n      nodesMap[node.id] = node;\n    });\n  }\n\n  function setTemplate(x: any) {\n    if (!arguments.length) return template;\n    template = x;\n    initialize();\n    return force;\n  }\n\n  function setGroupBy(x: any) {\n    if (!arguments.length) return groupBy;\n    if (typeof x === 'string') {\n      groupBy = (d: any) => {\n        return d[x];\n      };\n      return force;\n    }\n    groupBy = x;\n    return force;\n  }\n\n  function setEnableGrouping(x: any) {\n    if (!arguments.length) return enableGrouping;\n    enableGrouping = x;\n    return force;\n  }\n\n  function setStrength(x: any) {\n    if (!arguments.length) return strength;\n    strength = x;\n    return force;\n  }\n\n  function setCenterX(_: any) {\n    if (arguments.length) {\n      centerX = _;\n      return force;\n    }\n\n    return centerX;\n  }\n\n  function setCenterY(_: any) {\n    if (arguments.length) {\n      centerY = _;\n      return force;\n    }\n\n    return centerY;\n  }\n\n  function setNodes(_: any) {\n    if (arguments.length) {\n      genNodesMap(_ || []);\n      nodes = _ || [];\n      return force;\n    }\n    return nodes;\n  }\n\n  function setLinks(_: any) {\n    if (arguments.length) {\n      links = _ || [];\n      initialize();\n      return force;\n    }\n    return links;\n  }\n\n  function setForceNodeSize(_: any) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceNodeSize = _;\n      } else {\n        forceNodeSize = constant(+_);\n      }\n      initialize();\n      return force;\n    }\n\n    return forceNodeSize;\n  }\n\n  function setForceCharge(_: any) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceCharge = _;\n      } else {\n        forceCharge = constant(+_);\n      }\n      initialize();\n      return force;\n    }\n\n    return forceCharge;\n  }\n\n  function setForceLinkDistance(_: any) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkDistance = _;\n      } else {\n        forceLinkDistance = constant(+_);\n      }\n      initialize();\n      return force;\n    }\n\n    return forceLinkDistance;\n  }\n\n  function setForceLinkStrength(_: any) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkStrength = _;\n      } else {\n        forceLinkStrength = constant(+_);\n      }\n      initialize();\n      return force;\n    }\n\n    return forceLinkStrength;\n  }\n\n  function setOffset(_: any) {\n    if (arguments.length) {\n      offset = _;\n      return force;\n    }\n\n    return offset;\n  }\n\n  force.initialize = (_: any) => {\n    nodes = _;\n    initialize();\n  };\n\n  force.template = setTemplate;\n\n  force.groupBy = setGroupBy;\n\n  force.enableGrouping = setEnableGrouping;\n\n  force.strength = setStrength;\n\n  force.centerX = setCenterX;\n\n  force.centerY = setCenterY;\n\n  force.nodes = setNodes;\n\n  force.links = setLinks;\n\n  force.forceNodeSize = setForceNodeSize;\n\n  // Legacy support\n  force.nodeSize = force.forceNodeSize;\n\n  force.forceCharge = setForceCharge;\n\n  force.forceLinkDistance = setForceLinkDistance;\n\n  force.forceLinkStrength = setForceLinkStrength;\n\n  force.offset = setOffset;\n\n  force.getFocis = getFocisFromTemplate;\n\n  return force;\n}\n"]}},"error":null,"hash":"ac8d65c3bffec6c0f3330c67f2d935f5","cacheData":{"env":{}}}