{"id":"node_modules/@antv/layout/lib/layout/gForce.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gForce.js.map","includedInParent":true,"mtime":1676178923644},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\gForce.ts","includedInParent":true,"mtime":1676178923910},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"./base","loc":{"line":23,"column":21,"index":968},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gForce.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\base.js"},{"name":"../util","loc":{"line":24,"column":21,"index":1000},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\gForce.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GForceLayout = void 0;\nvar base_1 = require(\"./base\");\nvar util_1 = require(\"../util\");\nvar proccessToFunc = function (value, defaultV) {\n    var func;\n    if (!value) {\n        func = function (d) {\n            return defaultV || 1;\n        };\n    }\n    else if ((0, util_1.isNumber)(value)) {\n        func = function (d) {\n            return value;\n        };\n    }\n    else {\n        func = value;\n    }\n    return func;\n};\n/**\n * graphin 中的 force 布局\n */\nvar GForceLayout = /** @class */ (function (_super) {\n    __extends(GForceLayout, _super);\n    function GForceLayout(options) {\n        var _this = _super.call(this) || this;\n        /** 停止迭代的最大迭代数 */\n        _this.maxIteration = 500;\n        /** 是否启动 worker */\n        _this.workerEnabled = false;\n        /** 弹簧引力系数 */\n        _this.edgeStrength = 200;\n        /** 斥力系数 */\n        _this.nodeStrength = 1000;\n        /** 库伦系数 */\n        _this.coulombDisScale = 0.005;\n        /** 阻尼系数 */\n        _this.damping = 0.9;\n        /** 最大速度 */\n        _this.maxSpeed = 1000;\n        /** 一次迭代的平均移动距离小于该值时停止迭代 */\n        _this.minMovement = 0.5;\n        /** 迭代中衰减 */\n        _this.interval = 0.02;\n        /** 斥力的一个系数 */\n        _this.factor = 1;\n        /** 理想边长 */\n        _this.linkDistance = 1;\n        /** 重力大小 */\n        _this.gravity = 10;\n        /** 是否防止重叠 */\n        _this.preventOverlap = true;\n        /** 防止重叠的力大小参数 */\n        _this.collideStrength = 1;\n        /** 每次迭代结束的回调函数 */\n        _this.tick = function () { };\n        _this.nodes = [];\n        _this.edges = [];\n        _this.width = 300;\n        _this.height = 300;\n        _this.nodeMap = {};\n        _this.nodeIdxMap = {};\n        /** 是否使用 window.setInterval 运行迭代 */\n        _this.animate = true;\n        _this.updateCfg(options);\n        return _this;\n    }\n    GForceLayout.prototype.getDefaultCfg = function () {\n        return {\n            maxIteration: 500,\n            gravity: 10,\n            enableTick: true,\n            animate: true,\n        };\n    };\n    /**\n     * 执行布局\n     */\n    GForceLayout.prototype.execute = function () {\n        var _a, _b;\n        var self = this;\n        var nodes = self.nodes;\n        if (self.timeInterval !== undefined && typeof window !== \"undefined\") {\n            window.clearInterval(self.timeInterval);\n        }\n        if (!nodes || nodes.length === 0) {\n            (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n            return;\n        }\n        if (!self.width && typeof window !== \"undefined\") {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== \"undefined\") {\n            self.height = window.innerHeight;\n        }\n        if (!self.center) {\n            self.center = [self.width / 2, self.height / 2];\n        }\n        var center = self.center;\n        if (nodes.length === 1) {\n            nodes[0].x = center[0];\n            nodes[0].y = center[1];\n            (_b = self.onLayoutEnd) === null || _b === void 0 ? void 0 : _b.call(self);\n            return;\n        }\n        var nodeMap = {};\n        var nodeIdxMap = {};\n        nodes.forEach(function (node, i) {\n            if (!(0, util_1.isNumber)(node.x))\n                node.x = Math.random() * self.width;\n            if (!(0, util_1.isNumber)(node.y))\n                node.y = Math.random() * self.height;\n            nodeMap[node.id] = node;\n            nodeIdxMap[node.id] = i;\n        });\n        self.nodeMap = nodeMap;\n        self.nodeIdxMap = nodeIdxMap;\n        self.linkDistance = proccessToFunc(self.linkDistance, 1);\n        self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n        self.edgeStrength = proccessToFunc(self.edgeStrength, 1);\n        // node size function\n        var nodeSize = self.nodeSize;\n        var nodeSizeFunc;\n        if (self.preventOverlap) {\n            var nodeSpacing_1 = self.nodeSpacing;\n            var nodeSpacingFunc_1;\n            if ((0, util_1.isNumber)(nodeSpacing_1)) {\n                nodeSpacingFunc_1 = function () { return nodeSpacing_1; };\n            }\n            else if ((0, util_1.isFunction)(nodeSpacing_1)) {\n                nodeSpacingFunc_1 = nodeSpacing_1;\n            }\n            else {\n                nodeSpacingFunc_1 = function () { return 0; };\n            }\n            if (!nodeSize) {\n                nodeSizeFunc = function (d) {\n                    if (d.size) {\n                        if ((0, util_1.isArray)(d.size)) {\n                            return Math.max(d.size[0], d.size[1]) + nodeSpacingFunc_1(d);\n                        }\n                        if ((0, util_1.isObject)(d.size)) {\n                            return Math.max(d.size.width, d.size.height) + nodeSpacingFunc_1(d);\n                        }\n                        return d.size + nodeSpacingFunc_1(d);\n                    }\n                    return 10 + nodeSpacingFunc_1(d);\n                };\n            }\n            else if ((0, util_1.isArray)(nodeSize)) {\n                nodeSizeFunc = function (d) {\n                    return Math.max(nodeSize[0], nodeSize[1]) + nodeSpacingFunc_1(d);\n                };\n            }\n            else {\n                nodeSizeFunc = function (d) { return nodeSize + nodeSpacingFunc_1(d); };\n            }\n        }\n        self.nodeSize = nodeSizeFunc;\n        var edges = self.edges;\n        self.degrees = (0, util_1.getDegree)(nodes.length, self.nodeIdxMap, edges);\n        if (!self.getMass) {\n            self.getMass = function (d) {\n                var mass = d.mass || self.degrees[self.nodeIdxMap[d.id]].all || 1;\n                return mass;\n            };\n        }\n        // layout\n        self.run();\n    };\n    GForceLayout.prototype.run = function () {\n        var _a;\n        var self = this;\n        var maxIteration = self.maxIteration, nodes = self.nodes, workerEnabled = self.workerEnabled, minMovement = self.minMovement, animate = self.animate;\n        if (!nodes)\n            return;\n        if (workerEnabled || !animate) {\n            for (var i = 0; i < maxIteration; i++) {\n                var previousPos = self.runOneStep(i);\n                if (self.reachMoveThreshold(nodes, previousPos, minMovement)) {\n                    break;\n                }\n            }\n            (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n        }\n        else {\n            if (typeof window === \"undefined\")\n                return;\n            var iter_1 = 0;\n            // interval for render the result after each iteration\n            this.timeInterval = window.setInterval(function () {\n                var _a, _b;\n                if (!nodes)\n                    return;\n                var previousPos = self.runOneStep(iter_1) || [];\n                if (self.reachMoveThreshold(nodes, previousPos, minMovement)) {\n                    (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n                    window.clearInterval(self.timeInterval);\n                }\n                iter_1++;\n                if (iter_1 >= maxIteration) {\n                    (_b = self.onLayoutEnd) === null || _b === void 0 ? void 0 : _b.call(self);\n                    window.clearInterval(self.timeInterval);\n                }\n            }, 0);\n        }\n    };\n    GForceLayout.prototype.reachMoveThreshold = function (nodes, previousPos, minMovement) {\n        // whether to stop the iteration\n        var movement = 0;\n        nodes.forEach(function (node, j) {\n            var vx = node.x - previousPos[j].x;\n            var vy = node.y - previousPos[j].y;\n            movement += Math.sqrt(vx * vx + vy * vy);\n        });\n        movement /= nodes.length;\n        return movement < minMovement;\n    };\n    GForceLayout.prototype.runOneStep = function (iter) {\n        var _a;\n        var self = this;\n        var nodes = self.nodes, edges = self.edges;\n        var accArray = [];\n        var velArray = [];\n        if (!nodes)\n            return;\n        nodes.forEach(function (_, i) {\n            accArray[2 * i] = 0;\n            accArray[2 * i + 1] = 0;\n            velArray[2 * i] = 0;\n            velArray[2 * i + 1] = 0;\n        });\n        self.calRepulsive(accArray, nodes);\n        if (edges)\n            self.calAttractive(accArray, edges);\n        self.calGravity(accArray, nodes);\n        var stepInterval = Math.max(0.02, self.interval - iter * 0.002);\n        self.updateVelocity(accArray, velArray, stepInterval, nodes);\n        var previousPos = [];\n        nodes.forEach(function (node) {\n            previousPos.push({\n                x: node.x,\n                y: node.y\n            });\n        });\n        self.updatePosition(velArray, stepInterval, nodes);\n        (_a = self.tick) === null || _a === void 0 ? void 0 : _a.call(self);\n        return previousPos;\n    };\n    GForceLayout.prototype.calRepulsive = function (accArray, nodes) {\n        var self = this;\n        var getMass = self.getMass, factor = self.factor, coulombDisScale = self.coulombDisScale, preventOverlap = self.preventOverlap, _a = self.collideStrength, collideStrength = _a === void 0 ? 1 : _a;\n        var nodeStrength = self.nodeStrength;\n        var nodeSize = self.nodeSize;\n        nodes.forEach(function (ni, i) {\n            var massi = getMass ? getMass(ni) : 1;\n            nodes.forEach(function (nj, j) {\n                if (i >= j)\n                    return;\n                // if (!accArray[j]) accArray[j] = 0;\n                var vecX = ni.x - nj.x;\n                var vecY = ni.y - nj.y;\n                if (vecX === 0 && vecY === 0) {\n                    vecX = Math.random() * 0.01;\n                    vecY = Math.random() * 0.01;\n                }\n                var lengthSqr = vecX * vecX + vecY * vecY;\n                var vecLength = Math.sqrt(lengthSqr);\n                var nVecLength = (vecLength + 0.1) * coulombDisScale;\n                var direX = vecX / vecLength;\n                var direY = vecY / vecLength;\n                var param = (((nodeStrength(ni) + nodeStrength(nj)) * 0.5) * factor) /\n                    (nVecLength * nVecLength);\n                var massj = getMass ? getMass(nj) : 1;\n                accArray[2 * i] += (direX * param);\n                accArray[2 * i + 1] += (direY * param);\n                accArray[2 * j] -= (direX * param);\n                accArray[2 * j + 1] -= (direY * param);\n                if (preventOverlap && (nodeSize(ni) + nodeSize(nj)) / 2 > vecLength) {\n                    var paramOverlap = collideStrength * (nodeStrength(ni) + nodeStrength(nj)) * 0.5 / lengthSqr;\n                    accArray[2 * i] += (direX * paramOverlap) / massi;\n                    accArray[2 * i + 1] += (direY * paramOverlap) / massi;\n                    accArray[2 * j] -= (direX * paramOverlap) / massj;\n                    accArray[2 * j + 1] -= (direY * paramOverlap) / massj;\n                }\n            });\n        });\n    };\n    GForceLayout.prototype.calAttractive = function (accArray, edges) {\n        var self = this;\n        var nodeMap = self.nodeMap, nodeIdxMap = self.nodeIdxMap, linkDistance = self.linkDistance, edgeStrength = self.edgeStrength;\n        var nodeSize = self.nodeSize;\n        var getMass = self.getMass;\n        edges.forEach(function (edge, i) {\n            var source = (0, util_1.getEdgeTerminal)(edge, 'source');\n            var target = (0, util_1.getEdgeTerminal)(edge, 'target');\n            var sourceNode = nodeMap[source];\n            var targetNode = nodeMap[target];\n            var vecX = targetNode.x - sourceNode.x;\n            var vecY = targetNode.y - sourceNode.y;\n            if (vecX === 0 && vecY === 0) {\n                vecX = Math.random() * 0.01;\n                vecY = Math.random() * 0.01;\n            }\n            var vecLength = Math.sqrt(vecX * vecX + vecY * vecY);\n            var direX = vecX / vecLength;\n            var direY = vecY / vecLength;\n            var length = linkDistance(edge, sourceNode, targetNode) || 1 + ((nodeSize(sourceNode) + nodeSize(targetNode)) || 0) / 2;\n            var diff = length - vecLength;\n            var param = diff * edgeStrength(edge);\n            var sourceIdx = nodeIdxMap[source];\n            var targetIdx = nodeIdxMap[target];\n            var massSource = getMass ? getMass(sourceNode) : 1;\n            var massTarget = getMass ? getMass(targetNode) : 1;\n            accArray[2 * sourceIdx] -= (direX * param) / massSource;\n            accArray[2 * sourceIdx + 1] -= (direY * param) / massSource;\n            accArray[2 * targetIdx] += (direX * param) / massTarget;\n            accArray[2 * targetIdx + 1] += (direY * param) / massTarget;\n        });\n    };\n    GForceLayout.prototype.calGravity = function (accArray, nodes) {\n        var self = this;\n        // const nodes = self.nodes;\n        var center = self.center;\n        var defaultGravity = self.gravity;\n        var degrees = self.degrees;\n        var nodeLength = nodes.length;\n        for (var i = 0; i < nodeLength; i++) {\n            var node = nodes[i];\n            var vecX = node.x - center[0];\n            var vecY = node.y - center[1];\n            var gravity = defaultGravity;\n            if (self.getCenter) {\n                var customCenterOpt = self.getCenter(node, degrees[i].all);\n                if (customCenterOpt &&\n                    (0, util_1.isNumber)(customCenterOpt[0]) &&\n                    (0, util_1.isNumber)(customCenterOpt[1]) &&\n                    (0, util_1.isNumber)(customCenterOpt[2])) {\n                    vecX = node.x - customCenterOpt[0];\n                    vecY = node.y - customCenterOpt[1];\n                    gravity = customCenterOpt[2];\n                }\n            }\n            if (!gravity)\n                continue;\n            accArray[2 * i] -= gravity * vecX;\n            accArray[2 * i + 1] -= gravity * vecY;\n        }\n    };\n    GForceLayout.prototype.updateVelocity = function (accArray, velArray, stepInterval, nodes) {\n        var self = this;\n        var param = stepInterval * self.damping;\n        // const nodes = self.nodes;\n        nodes.forEach(function (node, i) {\n            var vx = accArray[2 * i] * param || 0.01;\n            var vy = accArray[2 * i + 1] * param || 0.01;\n            var vLength = Math.sqrt(vx * vx + vy * vy);\n            if (vLength > self.maxSpeed) {\n                var param2 = self.maxSpeed / vLength;\n                vx = param2 * vx;\n                vy = param2 * vy;\n            }\n            velArray[2 * i] = vx;\n            velArray[2 * i + 1] = vy;\n        });\n    };\n    GForceLayout.prototype.updatePosition = function (velArray, stepInterval, nodes) {\n        nodes.forEach(function (node, i) {\n            if ((0, util_1.isNumber)(node.fx) && (0, util_1.isNumber)(node.fy)) {\n                node.x = node.fx;\n                node.y = node.fy;\n                return;\n            }\n            var distX = velArray[2 * i] * stepInterval;\n            var distY = velArray[2 * i + 1] * stepInterval;\n            node.x += distX;\n            node.y += distY;\n        });\n    };\n    GForceLayout.prototype.stop = function () {\n        if (this.timeInterval && typeof window !== \"undefined\") {\n            window.clearInterval(this.timeInterval);\n        }\n    };\n    GForceLayout.prototype.destroy = function () {\n        var self = this;\n        self.stop();\n        self.tick = null;\n        self.nodes = null;\n        self.edges = null;\n        self.destroyed = true;\n    };\n    GForceLayout.prototype.getType = function () {\n        return \"gForce\";\n    };\n    return GForceLayout;\n}(base_1.Base));\nexports.GForceLayout = GForceLayout;\n"},"sourceMaps":{"js":{"version":3,"file":"gForce.js","sourceRoot":"","sources":["../../src/layout/gForce.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\n\n import {\n  OutNode,\n  Edge,\n  PointTuple,\n  IndexMap,\n  Point,\n  GForceLayoutOptions,\n  Degree\n} from \"./types\";\nimport { Base } from \"./base\";\nimport { isNumber, isFunction, isArray, getDegree, isObject, getEdgeTerminal } from \"../util\";\n\ntype INode = OutNode & {\n  size: number | PointTuple;\n};\n\ntype NodeMap = {\n  [key: string]: INode;\n};\n\nconst proccessToFunc = (\n  value: number | Function | undefined,\n  defaultV?: number\n): ((d: any) => number) => {\n  let func;\n  if (!value) {\n    func = (d: any): number => {\n      return defaultV || 1;\n    };\n  } else if (isNumber(value)) {\n    func = (d: any): number => {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n  return func as any;\n};\n\n/**\n * graphin 中的 force 布局\n */\nexport class GForceLayout extends Base {\n  /** 布局中心 */\n  public center: PointTuple;\n\n  /** 停止迭代的最大迭代数 */\n  public maxIteration: number = 500;\n\n  /** 是否启动 worker */\n  public workerEnabled: boolean = false;\n\n  /** 弹簧引力系数 */\n  public edgeStrength: number | ((d?: any) => number) | undefined = 200;\n\n  /** 斥力系数 */\n  public nodeStrength: number | ((d?: any) => number) | undefined = 1000;\n\n  /** 库伦系数 */\n  public coulombDisScale: number = 0.005;\n\n  /** 阻尼系数 */\n  public damping: number = 0.9;\n\n  /** 最大速度 */\n  public maxSpeed: number = 1000;\n\n  /** 一次迭代的平均移动距离小于该值时停止迭代 */\n  public minMovement: number = 0.5;\n\n  /** 迭代中衰减 */\n  public interval: number = 0.02;\n\n  /** 斥力的一个系数 */\n  public factor: number = 1;\n\n  /** 每个节点质量的回调函数，若不指定，则默认使用度数作为节点质量 */\n  public getMass: ((d?: any) => number) | undefined;\n\n  /** 每个节点中心力的 x、y、强度的回调函数，若不指定，则没有额外中心力 */\n  public getCenter: ((d?: any, degree?: number) => number[]) | undefined;\n\n  /** 理想边长 */\n  public linkDistance: number | ((edge?: any, source?: any, target?: any) => number) | undefined = 1;\n\n  /** 重力大小 */\n  public gravity: number = 10;\n\n  /** 是否防止重叠 */\n  public preventOverlap: boolean = true;\n\n  /** 防止重叠时的节点大小，默认从节点数据中取 size */\n  public nodeSize: number | number[] | ((d?: any) => number) | undefined;\n\n  /** 防止重叠的力大小参数 */\n  public collideStrength: number = 1;\n\n  /** 防止重叠时的节点之间最小间距 */\n  public nodeSpacing: number | number[] | ((d?: any) => number) | undefined;\n\n  /** 每次迭代结束的回调函数 */\n  public tick: (() => void) | null = () => {};\n\n  /** 是否允许每次迭代结束调用回调函数 */\n  public enableTick: boolean;\n\n  public nodes: INode[] | null = [];\n\n  public edges: Edge[] | null = [];\n\n  public width: number = 300;\n\n  public height: number = 300;\n\n  public nodeMap: NodeMap = {};\n\n  public nodeIdxMap: IndexMap = {};\n\n  public canvasEl: HTMLCanvasElement;\n\n  public onLayoutEnd: () => void;\n\n  /** 是否使用 window.setInterval 运行迭代 */\n  public animate: Boolean = true;\n\n  /** 存储节点度数 */\n  private degrees: Degree[];\n\n  /** 迭代中的标识 */\n  private timeInterval: number;\n\n  constructor(options?: GForceLayoutOptions) {\n    super();\n    this.updateCfg(options);\n  }\n\n  public getDefaultCfg() {\n    return {\n      maxIteration: 500,\n      gravity: 10,\n      enableTick: true,\n      animate: true,\n    };\n  }\n\n  /**\n   * 执行布局\n   */\n  public execute() {\n    const self = this;\n    const nodes = self.nodes;\n\n    if (self.timeInterval !== undefined && typeof window !== \"undefined\") {\n      window.clearInterval(self.timeInterval);\n    }\n\n    if (!nodes || nodes.length === 0) {\n      self.onLayoutEnd?.();\n      return;\n    }\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n    const center = self.center;\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      self.onLayoutEnd?.();\n      return;\n    }\n    const nodeMap: NodeMap = {};\n    const nodeIdxMap: IndexMap = {};\n    nodes.forEach((node, i) => {\n      if (!isNumber(node.x)) node.x = Math.random() * self.width;\n      if (!isNumber(node.y)) node.y = Math.random() * self.height;\n      nodeMap[node.id] = node;\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap;\n\n    self.linkDistance = proccessToFunc(self.linkDistance, 1);\n    self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n    self.edgeStrength = proccessToFunc(self.edgeStrength, 1);\n\n    // node size function\n    const nodeSize = self.nodeSize;\n    let nodeSizeFunc;\n    if (self.preventOverlap) {\n      const nodeSpacing = self.nodeSpacing;\n      let nodeSpacingFunc: (d?: any) => number;\n      if (isNumber(nodeSpacing)) {\n        nodeSpacingFunc = () => nodeSpacing as number;\n      } else if (isFunction(nodeSpacing)) {\n        nodeSpacingFunc = nodeSpacing as (d?: any) => number;\n      } else {\n        nodeSpacingFunc = () => 0;\n      }\n      if (!nodeSize) {\n        nodeSizeFunc = (d: INode) => {\n          if (d.size) {\n            if (isArray(d.size)) {\n              return Math.max(d.size[0], d.size[1]) + nodeSpacingFunc(d);\n            }  if(isObject(d.size)) {\n              return Math.max(d.size.width, d.size.height) + nodeSpacingFunc(d);\n            }\n            return (d.size as number) + nodeSpacingFunc(d);\n          }\n          return 10 + nodeSpacingFunc(d);\n        };\n      } else if (isArray(nodeSize)) {\n        nodeSizeFunc = (d: INode) => {\n          return Math.max(nodeSize[0], nodeSize[1]) + nodeSpacingFunc(d);\n        };\n      } else {\n        nodeSizeFunc = (d: INode) => (nodeSize as number) + nodeSpacingFunc(d);\n      }\n    }\n    self.nodeSize = nodeSizeFunc;\n\n    const edges = self.edges;\n    self.degrees = getDegree(nodes.length, self.nodeIdxMap, edges);\n    if (!self.getMass) {\n      self.getMass = (d) => {\n        const mass = d.mass || self.degrees[self.nodeIdxMap[d.id]].all || 1;\n        return mass;\n      };\n    }\n\n    // layout\n    self.run();\n  }\n\n  public run() {\n    const self = this;\n    const { maxIteration, nodes, workerEnabled, minMovement, animate } = self;\n\n    if (!nodes) return;\n\n    if (workerEnabled || !animate) {\n      for (let i = 0; i < maxIteration; i++) {\n        const previousPos = self.runOneStep(i);\n        if (self.reachMoveThreshold(nodes, previousPos, minMovement)) {\n          break;\n        }\n      }\n      self.onLayoutEnd?.();\n    } else {\n      if (typeof window === \"undefined\") return;\n      let iter = 0;\n      // interval for render the result after each iteration\n      this.timeInterval = window.setInterval(() => {\n        if (!nodes) return;\n        const previousPos = self.runOneStep(iter) || [];\n        if (self.reachMoveThreshold(nodes, previousPos, minMovement)) {\n          self.onLayoutEnd?.();\n          window.clearInterval(self.timeInterval);\n        }\n        iter++;\n        if (iter >= maxIteration) {\n          self.onLayoutEnd?.();\n          window.clearInterval(self.timeInterval);\n        }\n      }, 0);\n    }\n  }\n\n  private reachMoveThreshold(nodes: any, previousPos: any, minMovement: number) {\n    // whether to stop the iteration\n    let movement = 0;\n    nodes.forEach((node: any, j: number) => {\n      const vx = node.x - previousPos[j].x;\n      const vy = node.y - previousPos[j].y;\n      movement += Math.sqrt(vx * vx + vy * vy);\n    });\n    movement /= nodes.length;\n    return movement < minMovement;\n  }\n\n  private runOneStep(iter: number) {\n    const self = this;\n    const { nodes, edges } = self;\n    const accArray: number[] = [];\n    const velArray: number[] = [];\n    if (!nodes) return;\n    nodes.forEach((_, i) => {\n      accArray[2 * i] = 0;\n      accArray[2 * i + 1] = 0;\n      velArray[2 * i] = 0;\n      velArray[2 * i + 1] = 0;\n    });\n    self.calRepulsive(accArray, nodes);\n    if (edges) self.calAttractive(accArray, edges);\n    self.calGravity(accArray, nodes);\n    const stepInterval = Math.max(0.02, self.interval - iter * 0.002);\n    self.updateVelocity(accArray, velArray, stepInterval, nodes);\n    const previousPos: Point[] = [];\n    nodes.forEach((node) => {\n      previousPos.push({\n        x: node.x,\n        y: node.y\n      });\n    });\n    self.updatePosition(velArray, stepInterval, nodes);\n    self.tick?.();\n    return previousPos;\n  }\n\n  public calRepulsive(accArray: number[], nodes: INode[]) {\n    const self = this;\n    const { getMass, factor, coulombDisScale, preventOverlap, collideStrength = 1 } = self;\n    const nodeStrength = self.nodeStrength as Function;\n    const nodeSize = self.nodeSize as Function;\n    nodes.forEach((ni: INode, i) => {\n      const massi = getMass ? getMass(ni) : 1;\n      nodes.forEach((nj, j) => {\n        if (i >= j) return;\n        // if (!accArray[j]) accArray[j] = 0;\n        let vecX = ni.x - nj.x;\n        let vecY = ni.y - nj.y;\n        if (vecX === 0 && vecY === 0) {\n          vecX = Math.random() * 0.01;\n          vecY = Math.random() * 0.01;\n        }\n        const lengthSqr = vecX * vecX + vecY * vecY;\n        const vecLength = Math.sqrt(lengthSqr);\n        const nVecLength = (vecLength + 0.1) * coulombDisScale;\n        const direX = vecX / vecLength;\n        const direY = vecY / vecLength;\n        const param =\n          (((nodeStrength(ni) + nodeStrength(nj)) * 0.5) * factor) /\n          (nVecLength * nVecLength);\n        const massj = getMass ? getMass(nj) : 1;\n        accArray[2 * i] += (direX * param);\n        accArray[2 * i + 1] += (direY * param);\n        accArray[2 * j] -= (direX * param);\n        accArray[2 * j + 1] -= (direY * param);\n        if (preventOverlap && (nodeSize(ni) + nodeSize(nj)) / 2 > vecLength) {\n          const paramOverlap =\n            collideStrength * (nodeStrength(ni) + nodeStrength(nj)) * 0.5 / lengthSqr;\n          accArray[2 * i] += (direX * paramOverlap) / massi;\n          accArray[2 * i + 1] += (direY * paramOverlap) / massi;\n          accArray[2 * j] -= (direX * paramOverlap) / massj;\n          accArray[2 * j + 1] -= (direY * paramOverlap) / massj;\n        }\n      });\n    });\n  }\n\n  public calAttractive(accArray: number[], edges: Edge[]) {\n    const self = this;\n    const { nodeMap, nodeIdxMap, linkDistance, edgeStrength } = self;\n    const nodeSize = self.nodeSize as Function;\n    const getMass = self.getMass;\n    edges.forEach((edge, i) => {\n      const source = getEdgeTerminal(edge, 'source');\n      const target = getEdgeTerminal(edge, 'target');\n      const sourceNode = nodeMap[source];\n      const targetNode = nodeMap[target];\n      let vecX = targetNode.x - sourceNode.x;\n      let vecY = targetNode.y - sourceNode.y;\n      if (vecX === 0 && vecY === 0) {\n        vecX = Math.random() * 0.01;\n        vecY = Math.random() * 0.01;\n      }\n      const vecLength = Math.sqrt(vecX * vecX + vecY * vecY);\n      const direX = vecX / vecLength;\n      const direY = vecY / vecLength;\n      const length = (linkDistance as Function)(edge, sourceNode, targetNode) || 1 + ((nodeSize(sourceNode) + nodeSize(targetNode)) || 0) / 2;\n      const diff = length - vecLength;\n      const param = diff * (edgeStrength as Function)(edge);\n      const sourceIdx = nodeIdxMap[source];\n      const targetIdx = nodeIdxMap[target];\n      const massSource = getMass ? getMass(sourceNode) : 1;\n      const massTarget = getMass ? getMass(targetNode) : 1;\n      accArray[2 * sourceIdx] -= (direX * param) / massSource;\n      accArray[2 * sourceIdx + 1] -= (direY * param) / massSource;\n      accArray[2 * targetIdx] += (direX * param) / massTarget;\n      accArray[2 * targetIdx + 1] += (direY * param) / massTarget;\n    });\n  }\n\n  public calGravity(accArray: number[], nodes: INode[]) {\n    const self = this;\n    // const nodes = self.nodes;\n    const center = self.center;\n    const defaultGravity = self.gravity;\n    const degrees = self.degrees;\n    const nodeLength = nodes.length;\n    for (let i = 0; i < nodeLength; i++) {\n      const node = nodes[i];\n      let vecX = node.x - center[0];\n      let vecY = node.y - center[1];\n      let gravity = defaultGravity;\n\n      if (self.getCenter) {\n        const customCenterOpt = self.getCenter(node, degrees[i].all);\n        if (\n          customCenterOpt &&\n          isNumber(customCenterOpt[0]) &&\n          isNumber(customCenterOpt[1]) &&\n          isNumber(customCenterOpt[2])\n        ) {\n          vecX = node.x - customCenterOpt[0];\n          vecY = node.y - customCenterOpt[1];\n          gravity = customCenterOpt[2];\n        }\n      }\n      if (!gravity) continue;\n\n      accArray[2 * i] -= gravity * vecX;\n      accArray[2 * i + 1] -= gravity * vecY;\n    }\n  }\n\n  public updateVelocity(\n    accArray: number[],\n    velArray: number[],\n    stepInterval: number,\n    nodes: INode[]\n  ) {\n    const self = this;\n    const param = stepInterval * self.damping;\n    // const nodes = self.nodes;\n    nodes.forEach((node, i) => {\n      let vx = accArray[2 * i] * param || 0.01;\n      let vy = accArray[2 * i + 1] * param || 0.01;\n      const vLength = Math.sqrt(vx * vx + vy * vy);\n      if (vLength > self.maxSpeed) {\n        const param2 = self.maxSpeed / vLength;\n        vx = param2 * vx;\n        vy = param2 * vy;\n      }\n      velArray[2 * i] = vx;\n      velArray[2 * i + 1] = vy;\n    });\n  }\n\n  public updatePosition(\n    velArray: number[],\n    stepInterval: number,\n    nodes: INode[]\n  ) {\n    nodes.forEach((node: any, i) => {\n      if (isNumber(node.fx) && isNumber(node.fy)) {\n        node.x = node.fx;\n        node.y = node.fy;\n        return;\n      }\n      const distX = velArray[2 * i] * stepInterval;\n      const distY = velArray[2 * i + 1] * stepInterval;\n      node.x += distX;\n      node.y += distY;\n    });\n  }\n\n  public stop() {\n    if (this.timeInterval && typeof window !== \"undefined\") {\n      window.clearInterval(this.timeInterval);\n    }\n  }\n\n  public destroy() {\n    const self = this;\n    self.stop();\n    self.tick = null;\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  }\n\n  public getType() {\n    return \"gForce\";\n  }\n}\n"]}},"error":null,"hash":"8b77b97d904c9b3cd30f59dda0f4bcb5","cacheData":{"env":{}}}