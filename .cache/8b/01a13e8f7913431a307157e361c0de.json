{"id":"node_modules/@antv/layout/lib/layout/er/grid.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\er\\grid.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\src\\layout\\er\\grid.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1674179681168}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    function Grid() {\n        this.cells = [];\n        this.columnNum = 0;\n        this.rowNum = 0;\n        this.additionColumn = [];\n        this.additionRow = [];\n    }\n    Grid.prototype.init = function (width, height, gridSize) {\n        this.cells = [];\n        this.CELL_W = gridSize.CELL_W || Grid.DEFAULT_CELL_W;\n        this.CELL_H = gridSize.CELL_H || Grid.DEFAULT_CELL_H;\n        this.columnNum = Math.ceil(width / this.CELL_W);\n        this.rowNum = Math.ceil(height / this.CELL_H);\n        Grid.MIN_DIST = Math.pow(width, 2) + Math.pow(height, 2);\n        for (var i = 0; i < this.columnNum; i++) {\n            var tmp = [];\n            for (var j = 0; j < this.rowNum; j++) {\n                var cell = {\n                    dx: i,\n                    dy: j,\n                    x: i * this.CELL_W,\n                    y: j * this.CELL_H,\n                    occupied: false\n                };\n                tmp.push(cell);\n            }\n            this.cells.push(tmp);\n        }\n    };\n    Grid.prototype.findGridByNodeId = function (nodeId) {\n        var _a, _b;\n        for (var i = 0; i < this.columnNum; i++) {\n            for (var j = 0; j < this.rowNum; j++) {\n                if (this.cells[i][j].node) {\n                    if (((_b = (_a = this.cells[i][j]) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b.id) === nodeId) {\n                        return { column: i, row: j };\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    Grid.prototype.sqdist = function (a, b) {\n        return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);\n    };\n    Grid.prototype.occupyNearest = function (p) {\n        var minDist = Grid.MIN_DIST;\n        var d;\n        var candidate = null;\n        for (var i = 0; i < this.columnNum; i++) {\n            for (var j = 0; j < this.rowNum; j++) {\n                if (!this.cells[i][j].occupied && (d = this.sqdist(p, this.cells[i][j])) < minDist) {\n                    minDist = d;\n                    candidate = this.cells[i][j];\n                }\n            }\n        }\n        if (candidate) {\n            candidate.occupied = true;\n        }\n        return candidate;\n    };\n    Grid.prototype.insertColumn = function (columnIndex, length) {\n        if (length <= 0)\n            return;\n        // 插入空列\n        for (var i = 0; i < length; i++) {\n            this.cells[i + this.columnNum] = [];\n            for (var j = 0; j < this.rowNum; j++) {\n                this.cells[i + this.columnNum][j] = {\n                    dx: i,\n                    dy: j,\n                    x: i * this.CELL_W,\n                    y: j * this.CELL_H,\n                    occupied: false,\n                    node: null,\n                };\n            }\n        }\n        // 交换数据\n        for (var i = (this.columnNum - 1); i > columnIndex; i--) {\n            for (var j = 0; j < this.rowNum; j++) {\n                this.cells[i + length][j] = __assign(__assign({}, this.cells[i][j]), { x: (i + length) * this.CELL_W, y: j * this.CELL_H });\n                this.cells[i][j] = {\n                    x: i * this.CELL_W,\n                    y: j * this.CELL_H,\n                    occupied: true,\n                    node: null,\n                };\n            }\n        }\n        // 已有行列的处理\n        for (var j = 0; j < this.additionColumn.length; j++) {\n            if (this.additionColumn[j] >= columnIndex) {\n                this.additionColumn[j] += length;\n            }\n        }\n        // 记录新增的行列\n        for (var i = 0; i < length; i++) {\n            this.additionColumn.push(columnIndex + i + 1);\n        }\n        this.columnNum += length;\n    };\n    Grid.prototype.insertRow = function (rowIndex, length) {\n        if (length <= 0)\n            return;\n        // 插入空行\n        for (var j = 0; j < length; j++) {\n            for (var i = 0; i < this.columnNum; i++) {\n                this.cells[i][j + this.rowNum] = {\n                    dx: i,\n                    dy: j,\n                    x: i * this.CELL_W,\n                    y: j * this.CELL_H,\n                    occupied: false,\n                    node: null,\n                };\n            }\n        }\n        // 交换数据\n        for (var i = 0; i < this.columnNum; i++) {\n            for (var j = (this.rowNum - 1); j > rowIndex; j--) {\n                this.cells[i][j + length] = __assign(__assign({}, this.cells[i][j]), { dx: i, dy: j + length, x: i * this.CELL_W, y: (j + length) * this.CELL_H });\n                this.cells[i][j] = {\n                    dx: i,\n                    dy: j,\n                    x: i * this.CELL_W,\n                    y: j * this.CELL_H,\n                    occupied: false,\n                    node: null,\n                };\n            }\n        }\n        // 已有行列的处理\n        for (var j = 0; j < this.additionRow.length; j++) {\n            if (this.additionRow[j] >= rowIndex) {\n                this.additionRow[j] += length;\n            }\n        }\n        // 记录新增的行列\n        for (var i = 0; i < length; i++) {\n            this.additionRow.push(rowIndex + i + 1);\n        }\n        this.rowNum += length;\n    };\n    Grid.prototype.getNodes = function () {\n        var nodes = [];\n        for (var i = 0; i < this.columnNum; i++) {\n            for (var j = 0; j < this.rowNum; j++) {\n                if (this.cells[i][j].node) {\n                    nodes.push(this.cells[i][j]);\n                }\n            }\n        }\n        return nodes;\n    };\n    Grid.MIN_DIST = 50;\n    Grid.DEFAULT_CELL_W = 80;\n    Grid.DEFAULT_CELL_H = 80;\n    return Grid;\n}());\nexports.default = Grid;\n"},"sourceMaps":{"js":{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../../src/layout/er/grid.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICell, INode } from './type';\n\nexport default class Grid {\n  public cells: ICell[][] = [];\n  public columnNum:number = 0;\n  public rowNum: number = 0;\n  \n  public additionColumn: number[] = [];\n  public additionRow: number[] = [];\n  private static MIN_DIST = 50;\n  private static DEFAULT_CELL_W = 80;\n  private static DEFAULT_CELL_H = 80;\n  private CELL_W: number;\n  private CELL_H: number;\n\n  public init(width: number, height: number, gridSize: {\n    CELL_W: number,\n    CELL_H: number,\n  }) {\n    this.cells = [];\n    this.CELL_W = gridSize.CELL_W || Grid.DEFAULT_CELL_W;\n    this.CELL_H = gridSize.CELL_H || Grid.DEFAULT_CELL_H;\n    this.columnNum = Math.ceil(width / this.CELL_W);\n    this.rowNum = Math.ceil(height / this.CELL_H);\n    Grid.MIN_DIST = Math.pow(width, 2) + Math.pow(height, 2);\n\n    for(let i = 0; i < this.columnNum; i++) {\n      const tmp = [];\n      for(let j = 0; j < this.rowNum; j++) {\n        const cell = {\n          dx: i,\n          dy: j,\n          x : i * this.CELL_W,\n          y : j * this.CELL_H,\n          occupied : false\n        };\n        tmp.push(cell);\n      }\n      this.cells.push(tmp);\n    }\n  }\n\n  public findGridByNodeId(nodeId: string){\n    for(let i = 0; i < this.columnNum; i++) {\n      for(let j = 0; j < this.rowNum; j++) {\n        if(this.cells[i][j].node) {\n          if (this.cells[i][j]?.node?.id === nodeId) {\n            return {column: i, row: j};\n          }\n        }\n      }\n    }\n    return null;\n  }\n    \n  public sqdist(a: any, b: any) {\n    return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);\n  }\n\n  public occupyNearest(p: INode) {\n    let minDist = Grid.MIN_DIST;\n    let d;\n    let candidate = null;\n    for(let i = 0; i < this.columnNum; i++) {\n      for(let j = 0; j < this.rowNum; j++) {\n        if(!this.cells[i][j].occupied && ( d = this.sqdist(p, this.cells[i][j])) < minDist) {\n          minDist = d;\n          candidate = this.cells[i][j];\n        }\n      }\n    }\n    if(candidate) {\n      candidate.occupied = true;\n    }\n    return candidate;\n  }\n\n  public insertColumn(columnIndex: number, length: number) {\n    if (length <= 0) return ;\n    // 插入空列\n    for (let i = 0; i < length; i++) {\n      this.cells[i + this.columnNum] = [];\n      for(let j = 0; j < this.rowNum; j++) {\n        this.cells[i + this.columnNum][j] = {\n          dx: i,\n          dy: j,\n          x : i * this.CELL_W,\n          y : j * this.CELL_H,\n          occupied : false,\n          node: null,\n        };\n      }\n    }\n    // 交换数据\n    for(let i = (this.columnNum - 1); i > columnIndex; i--) {\n      for (let j = 0; j < this.rowNum; j++) {\n        this.cells[i + length][j] = {\n          ...this.cells[i][j],\n          x: (i+length) * this.CELL_W,\n          y: j * this.CELL_H,\n        };\n        this.cells[i][j] = {\n          x : i * this.CELL_W,\n          y : j * this.CELL_H,\n          occupied : true,\n          node: null,\n        };\n      }\n    }\n    // 已有行列的处理\n    for (let j = 0; j < this.additionColumn.length; j++) {\n      if (this.additionColumn[j] >= columnIndex) {\n        this.additionColumn[j] += length;\n      }\n    }\n    // 记录新增的行列\n    for (let i = 0; i < length; i++) {\n      this.additionColumn.push(columnIndex + i + 1);\n    }\n    this.columnNum += length;\n  }\n\n  public insertRow(rowIndex: number, length: number) {\n    if (length <= 0) return ;\n    // 插入空行\n    for (let j = 0; j < length; j++) {\n      for(let i = 0; i < this.columnNum; i++) {\n        this.cells[i][j + this.rowNum] = {\n          dx: i,\n          dy: j,\n          x : i * this.CELL_W,\n          y : j * this.CELL_H,\n          occupied : false,\n          node: null,\n        };\n      }\n    }\n\n    // 交换数据\n    for(let i = 0; i < this.columnNum; i++) {\n      for (let j = (this.rowNum - 1); j > rowIndex; j--) {\n        this.cells[i][j+length] = {\n          ...this.cells[i][j],\n          dx: i,\n          dy: j + length,\n          x: i * this.CELL_W,\n          y: (j+length) * this.CELL_H,\n        };\n        this.cells[i][j] = {\n          dx: i,\n          dy: j,\n          x : i * this.CELL_W,\n          y : j *this.CELL_H,\n          occupied : false,\n          node: null,\n        };\n        \n      }\n    }\n    \n    // 已有行列的处理\n    for (let j = 0; j < this.additionRow.length; j++) {\n      if (this.additionRow[j] >= rowIndex) {\n        this.additionRow[j] += length;\n      }\n    }\n    // 记录新增的行列\n    for (let i = 0; i < length; i++) {\n      this.additionRow.push(rowIndex + i + 1);\n    }\n    this.rowNum += length;\n  }\n\n  public getNodes() {\n    const nodes = [];\n    for(let i = 0; i < this.columnNum; i++) {\n      for(let j = 0; j < this.rowNum; j++) {\n        if(this.cells[i][j].node) {\n          nodes.push(this.cells[i][j]);\n        }\n      }\n    }\n    return nodes;\n  }\n}"]}},"error":null,"hash":"69d0be63258ecce4c11f9907e88f06a1","cacheData":{"env":{}}}