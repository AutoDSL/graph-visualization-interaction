{"id":"node_modules/@antv/algorithm/lib/mts.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\algorithm\\package.json","includedInParent":true,"mtime":1676178923049},{"name":"./structs/union-find","loc":{"line":8,"column":48,"index":155},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\algorithm\\lib\\mts.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\algorithm\\lib\\structs\\union-find.js"},{"name":"./structs/binary-heap","loc":{"line":10,"column":49,"index":231},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\algorithm\\lib\\mts.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\algorithm\\lib\\structs\\binary-heap.js"},{"name":"./util","loc":{"line":12,"column":20,"index":279},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\algorithm\\lib\\mts.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\algorithm\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _unionFind = _interopRequireDefault(require(\"./structs/union-find\"));\n\nvar _binaryHeap = _interopRequireDefault(require(\"./structs/binary-heap\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Prim algorithm，use priority queue，复杂度 O(E+V*logV), V: 节点数量，E: 边的数量\n * refer: https://en.wikipedia.org/wiki/Prim%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n */\nvar primMST = function primMST(graphData, weight) {\n  var selectedEdges = [];\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a,\n      _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n\n  if (nodes.length === 0) {\n    return selectedEdges;\n  } // 从nodes[0]开始\n\n\n  var currNode = nodes[0];\n  var visited = new Set();\n  visited.add(currNode); // 用二叉堆维护距已加入节点的其他节点的边的权值\n\n  var compareWeight = function compareWeight(a, b) {\n    if (weight) {\n      return a.weight - b.weight;\n    }\n\n    return 0;\n  };\n\n  var edgeQueue = new _binaryHeap.default(compareWeight);\n  (0, _util.getEdgesByNodeId)(currNode.id, edges).forEach(function (edge) {\n    edgeQueue.insert(edge);\n  });\n\n  while (!edgeQueue.isEmpty()) {\n    // 选取与已加入的结点之间边权最小的结点\n    var currEdge = edgeQueue.delMin();\n    var source = currEdge.source;\n    var target = currEdge.target;\n    if (visited.has(source) && visited.has(target)) continue;\n    selectedEdges.push(currEdge);\n\n    if (!visited.has(source)) {\n      visited.add(source);\n      (0, _util.getEdgesByNodeId)(source, edges).forEach(function (edge) {\n        edgeQueue.insert(edge);\n      });\n    }\n\n    if (!visited.has(target)) {\n      visited.add(target);\n      (0, _util.getEdgesByNodeId)(target, edges).forEach(function (edge) {\n        edgeQueue.insert(edge);\n      });\n    }\n  }\n\n  return selectedEdges;\n};\n/**\n * Kruskal algorithm，复杂度 O(E*logE), E: 边的数量\n * refer: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n * @return IEdge[] 返回构成MST的边的数组\n */\n\n\nvar kruskalMST = function kruskalMST(graphData, weight) {\n  var selectedEdges = [];\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a,\n      _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n\n  if (nodes.length === 0) {\n    return selectedEdges;\n  } // 若指定weight，则将所有的边按权值从小到大排序\n\n\n  var weightEdges = edges.map(function (edge) {\n    return edge;\n  });\n\n  if (weight) {\n    weightEdges.sort(function (a, b) {\n      return a.weight - b.weight;\n    });\n  }\n\n  var disjointSet = new _unionFind.default(nodes.map(function (n) {\n    return n.id;\n  })); // 从权值最小的边开始，如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边\n  // 直到遍历完所有点或边\n\n  while (weightEdges.length > 0) {\n    var curEdge = weightEdges.shift();\n    var source = curEdge.source;\n    var target = curEdge.target;\n\n    if (!disjointSet.connected(source, target)) {\n      selectedEdges.push(curEdge);\n      disjointSet.union(source, target);\n    }\n  }\n\n  return selectedEdges;\n};\n/**\n * 最小生成树\n * refer: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n * @param algo 'prim' | 'kruskal' 算法类型\n * @return EdgeConfig[] 返回构成MST的边的数组\n */\n\n\nvar minimumSpanningTree = function minimumSpanningTree(graphData, weight, algo) {\n  var algos = {\n    prim: primMST,\n    kruskal: kruskalMST\n  };\n  if (!algo) return kruskalMST(graphData, weight);\n  return algos[algo](graphData, weight);\n};\n\nvar _default = minimumSpanningTree;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@antv/algorithm/lib/mts.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}}],"sources":{"node_modules/@antv/algorithm/lib/mts.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _unionFind = _interopRequireDefault(require(\"./structs/union-find\"));\n\nvar _binaryHeap = _interopRequireDefault(require(\"./structs/binary-heap\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Prim algorithm，use priority queue，复杂度 O(E+V*logV), V: 节点数量，E: 边的数量\n * refer: https://en.wikipedia.org/wiki/Prim%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n */\nvar primMST = function primMST(graphData, weight) {\n  var selectedEdges = [];\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a,\n      _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n\n  if (nodes.length === 0) {\n    return selectedEdges;\n  } // 从nodes[0]开始\n\n\n  var currNode = nodes[0];\n  var visited = new Set();\n  visited.add(currNode); // 用二叉堆维护距已加入节点的其他节点的边的权值\n\n  var compareWeight = function compareWeight(a, b) {\n    if (weight) {\n      return a.weight - b.weight;\n    }\n\n    return 0;\n  };\n\n  var edgeQueue = new _binaryHeap.default(compareWeight);\n  (0, _util.getEdgesByNodeId)(currNode.id, edges).forEach(function (edge) {\n    edgeQueue.insert(edge);\n  });\n\n  while (!edgeQueue.isEmpty()) {\n    // 选取与已加入的结点之间边权最小的结点\n    var currEdge = edgeQueue.delMin();\n    var source = currEdge.source;\n    var target = currEdge.target;\n    if (visited.has(source) && visited.has(target)) continue;\n    selectedEdges.push(currEdge);\n\n    if (!visited.has(source)) {\n      visited.add(source);\n      (0, _util.getEdgesByNodeId)(source, edges).forEach(function (edge) {\n        edgeQueue.insert(edge);\n      });\n    }\n\n    if (!visited.has(target)) {\n      visited.add(target);\n      (0, _util.getEdgesByNodeId)(target, edges).forEach(function (edge) {\n        edgeQueue.insert(edge);\n      });\n    }\n  }\n\n  return selectedEdges;\n};\n/**\n * Kruskal algorithm，复杂度 O(E*logE), E: 边的数量\n * refer: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n * @return IEdge[] 返回构成MST的边的数组\n */\n\n\nvar kruskalMST = function kruskalMST(graphData, weight) {\n  var selectedEdges = [];\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a,\n      _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n\n  if (nodes.length === 0) {\n    return selectedEdges;\n  } // 若指定weight，则将所有的边按权值从小到大排序\n\n\n  var weightEdges = edges.map(function (edge) {\n    return edge;\n  });\n\n  if (weight) {\n    weightEdges.sort(function (a, b) {\n      return a.weight - b.weight;\n    });\n  }\n\n  var disjointSet = new _unionFind.default(nodes.map(function (n) {\n    return n.id;\n  })); // 从权值最小的边开始，如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边\n  // 直到遍历完所有点或边\n\n  while (weightEdges.length > 0) {\n    var curEdge = weightEdges.shift();\n    var source = curEdge.source;\n    var target = curEdge.target;\n\n    if (!disjointSet.connected(source, target)) {\n      selectedEdges.push(curEdge);\n      disjointSet.union(source, target);\n    }\n  }\n\n  return selectedEdges;\n};\n/**\n * 最小生成树\n * refer: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n * @param algo 'prim' | 'kruskal' 算法类型\n * @return EdgeConfig[] 返回构成MST的边的数组\n */\n\n\nvar minimumSpanningTree = function minimumSpanningTree(graphData, weight, algo) {\n  var algos = {\n    prim: primMST,\n    kruskal: kruskalMST\n  };\n  if (!algo) return kruskalMST(graphData, weight);\n  return algos[algo](graphData, weight);\n};\n\nvar _default = minimumSpanningTree;\nexports.default = _default;"},"lineCount":145}},"error":null,"hash":"60ba5be9294cd3383c8413c7394b59db","cacheData":{"env":{}}}