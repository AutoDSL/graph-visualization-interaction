{"id":"node_modules/@antv/layout/lib/layout/dagre/src/order/resolve-conflicts.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\order\\resolve-conflicts.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\src\\layout\\dagre\\src\\order\\resolve-conflicts.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1674179681168}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar resolveConflicts = function (entries, cg) {\n    var _a, _b, _c;\n    var mappedEntries = {};\n    entries === null || entries === void 0 ? void 0 : entries.forEach(function (entry, i) {\n        mappedEntries[entry.v] = {\n            i: i,\n            indegree: 0,\n            in: [],\n            out: [],\n            vs: [entry.v],\n        };\n        var tmp = mappedEntries[entry.v];\n        if (entry.barycenter !== undefined) {\n            tmp.barycenter = entry.barycenter;\n            tmp.weight = entry.weight;\n        }\n    });\n    (_a = cg.edges()) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n        var entryV = mappedEntries[e.v];\n        var entryW = mappedEntries[e.w];\n        if (entryV !== undefined && entryW !== undefined) {\n            entryW.indegree++;\n            entryV.out.push(mappedEntries[e.w]);\n        }\n    });\n    var sourceSet = (_c = (_b = Object.values(mappedEntries)).filter) === null || _c === void 0 ? void 0 : _c.call(_b, function (entry) { return !entry.indegree; });\n    return doResolveConflicts(sourceSet);\n};\nvar doResolveConflicts = function (sourceSet) {\n    var _a, _b;\n    var entries = [];\n    var handleIn = function (vEntry) {\n        return function (uEntry) {\n            if (uEntry.merged)\n                return;\n            if (uEntry.barycenter === undefined ||\n                vEntry.barycenter === undefined ||\n                uEntry.barycenter >= vEntry.barycenter) {\n                mergeEntries(vEntry, uEntry);\n            }\n        };\n    };\n    var handleOut = function (vEntry) {\n        return function (wEntry) {\n            wEntry[\"in\"].push(vEntry);\n            if (--wEntry.indegree === 0) {\n                sourceSet.push(wEntry);\n            }\n        };\n    };\n    var _loop_1 = function () {\n        var entry = sourceSet.pop();\n        entries.push(entry);\n        (_a = entry[\"in\"].reverse()) === null || _a === void 0 ? void 0 : _a.forEach(function (e) { return handleIn(entry)(e); });\n        (_b = entry.out) === null || _b === void 0 ? void 0 : _b.forEach(function (e) { return handleOut(entry)(e); });\n    };\n    while (sourceSet === null || sourceSet === void 0 ? void 0 : sourceSet.length) {\n        _loop_1();\n    }\n    var filtered = entries.filter(function (entry) { return !entry.merged; });\n    var keys = [\n        \"vs\",\n        \"i\",\n        \"barycenter\",\n        \"weight\",\n    ];\n    return filtered.map(function (entry) {\n        var picked = {};\n        keys === null || keys === void 0 ? void 0 : keys.forEach(function (key) {\n            if (entry[key] === undefined)\n                return;\n            picked[key] = entry[key];\n        });\n        return picked;\n    });\n};\nvar mergeEntries = function (target, source) {\n    var _a;\n    var sum = 0;\n    var weight = 0;\n    if (target.weight) {\n        sum += target.barycenter * target.weight;\n        weight += target.weight;\n    }\n    if (source.weight) {\n        sum += source.barycenter * source.weight;\n        weight += source.weight;\n    }\n    target.vs = (_a = source.vs) === null || _a === void 0 ? void 0 : _a.concat(target.vs);\n    target.barycenter = sum / weight;\n    target.weight = weight;\n    target.i = Math.min(source.i, target.i);\n    source.merged = true;\n};\nexports.default = resolveConflicts;\n"},"sourceMaps":{"js":{"version":3,"file":"resolve-conflicts.js","sourceRoot":"","sources":["../../../../../src/layout/dagre/src/order/resolve-conflicts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Graph } from \"../../graph\";\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\n\nexport type ConflictEntry = {\n  i: number;\n  indegree?: number;\n  in?: ConflictEntry[];\n  out?: ConflictEntry[];\n  vs: string[];\n  barycenter?: number;\n  weight?: number;\n  merged?: boolean;\n  fixorder?: number;\n  order?: number;\n};\n\nconst resolveConflicts = (\n  entries: {\n    v: string;\n    barycenter?: number;\n    weight?: number;\n  }[],\n  cg: Graph\n) => {\n  const mappedEntries: Record<string, ConflictEntry> = {};\n  entries?.forEach((entry, i: number) => {\n    mappedEntries[entry.v] = {\n      i,\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n    };\n    const tmp = mappedEntries[entry.v];\n    if (entry.barycenter !== undefined) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n\n  cg.edges()?.forEach((e) => {\n    const entryV = mappedEntries[e.v];\n    const entryW = mappedEntries[e.w];\n    if (entryV !== undefined && entryW !== undefined) {\n      entryW.indegree!++;\n      entryV.out!.push(mappedEntries[e.w]);\n    }\n  });\n\n  const sourceSet = Object.values(mappedEntries).filter?.(\n    (entry: ConflictEntry) => !entry.indegree\n  );\n\n  return doResolveConflicts(sourceSet);\n};\n\nconst doResolveConflicts = (sourceSet: ConflictEntry[]) => {\n  const entries = [];\n\n  const handleIn = (vEntry: ConflictEntry) => {\n    return (uEntry: ConflictEntry) => {\n      if (uEntry.merged) return;\n      if (\n        uEntry.barycenter === undefined ||\n        vEntry.barycenter === undefined ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  };\n\n  const handleOut = (vEntry: ConflictEntry) => {\n    return (wEntry: ConflictEntry) => {\n      wEntry[\"in\"]!.push(vEntry);\n      if (--wEntry.indegree! === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  };\n\n  while (sourceSet?.length) {\n    const entry = sourceSet.pop()!;\n    entries.push(entry);\n    entry[\"in\"]!.reverse()?.forEach((e: ConflictEntry) => handleIn(entry)(e));\n    entry.out?.forEach((e: ConflictEntry) => handleOut(entry)(e));\n  }\n\n  const filtered = entries.filter((entry) => !entry.merged);\n  const keys: (\"vs\" | \"i\" | \"barycenter\" | \"weight\")[] = [\n    \"vs\",\n    \"i\",\n    \"barycenter\",\n    \"weight\",\n  ];\n  return filtered.map((entry) => {\n    const picked: Record<string, any> = {};\n    keys?.forEach((key) => {\n      if (entry[key] === undefined) return;\n      picked[key] = entry[key];\n    });\n    return picked as ConflictEntry;\n  });\n};\n\nconst mergeEntries = (target: ConflictEntry, source: ConflictEntry) => {\n  let sum = 0;\n  let weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter! * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter! * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs?.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n};\n\nexport default resolveConflicts;\n"]}},"error":null,"hash":"819a17de4a646d609d0a9d328cb9c63c","cacheData":{"env":{}}}