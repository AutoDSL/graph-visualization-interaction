{"id":"node_modules/@antv/layout/lib/layout/forceAtlas2/body.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\forceAtlas2\\body.js.map","includedInParent":true,"mtime":1676178923541},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\forceAtlas2\\body.ts","includedInParent":true,"mtime":1676178923814},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// represents a body(a point mass) and its position\nvar Body = /** @class */ (function () {\n    function Body(params) {\n        /**\n         * the id of this body, the same with the node id\n         * @type  {number}\n         */\n        this.id = params.id || 0;\n        /**\n         * the position of this body\n         * @type  {number}\n         */\n        this.rx = params.rx;\n        /**\n         * the position of this body\n         * @type  {number}\n         */\n        this.ry = params.ry;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */\n        this.fx = 0;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */\n        this.fy = 0;\n        /**\n         * the mass of this body, =1 for a node\n         * @type  {number}\n         */\n        this.mass = params.mass;\n        /**\n         * the degree of the node represented by this body\n         * @type  {number}\n         */\n        this.degree = params.degree;\n        /**\n         * the parameter for repulsive force, = kr\n         * @type  {number}\n         */\n        this.g = params.g || 0;\n    }\n    // returns the euclidean distance\n    Body.prototype.distanceTo = function (bo) {\n        var dx = this.rx - bo.rx;\n        var dy = this.ry - bo.ry;\n        return Math.hypot(dx, dy);\n    };\n    Body.prototype.setPos = function (x, y) {\n        this.rx = x;\n        this.ry = y;\n    };\n    // resets the forces\n    Body.prototype.resetForce = function () {\n        this.fx = 0;\n        this.fy = 0;\n    };\n    Body.prototype.addForce = function (b) {\n        var dx = b.rx - this.rx;\n        var dy = b.ry - this.ry;\n        var dist = Math.hypot(dx, dy);\n        dist = dist < 0.0001 ? 0.0001 : dist;\n        // the repulsive defined by force atlas 2\n        var F = (this.g * (this.degree + 1) * (b.degree + 1)) / dist;\n        this.fx += F * dx / dist;\n        this.fy += F * dy / dist;\n    };\n    // if quad contains this body\n    Body.prototype.in = function (quad) {\n        return quad.contains(this.rx, this.ry);\n    };\n    // returns a new body\n    Body.prototype.add = function (bo) {\n        var nenwMass = this.mass + bo.mass;\n        var x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n        var y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n        var dg = this.degree + bo.degree;\n        var params = {\n            rx: x,\n            ry: y,\n            mass: nenwMass,\n            degree: dg\n        };\n        return new Body(params);\n    };\n    return Body;\n}());\nexports.default = Body;\n"},"sourceMaps":{"js":{"version":3,"file":"body.js","sourceRoot":"","sources":["../../../src/layout/forceAtlas2/body.ts"],"names":[],"mappings":"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","sourcesContent":["import Quad from './quad';\n\n/**\n * @fileOverview body\n * @author shiwu.wyy@antfin.com\n */\n\ntype BodyProps = {\n  id?: Number;\n  rx: number;\n  ry: number;\n  fx?: number;\n  fy?: number;\n  mass: number;\n  degree: number;\n  g?: number;\n};\n\n// represents a body(a point mass) and its position\nexport default class Body {\n  public id: Number;\n  public rx: number;\n  public ry: number;\n  public fx: number;\n  public fy: number;\n  public mass: number;\n  public degree: number;\n  public g: number;\n  \n  constructor(params: BodyProps) {\n    /**\n     * the id of this body, the same with the node id\n     * @type  {number}\n     */\n    this.id = params.id || 0;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n    this.rx = params.rx;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n    this.ry = params.ry;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n    this.fx = 0;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n    this.fy = 0;\n    /**\n     * the mass of this body, =1 for a node\n     * @type  {number}\n     */\n    this.mass = params.mass;\n    /**\n     * the degree of the node represented by this body\n     * @type  {number}\n     */\n    this.degree = params.degree;\n    /**\n     * the parameter for repulsive force, = kr\n     * @type  {number}\n     */\n    this.g = params.g || 0;\n  }\n  // returns the euclidean distance\n  distanceTo(bo: Body) {\n    const dx = this.rx - bo.rx;\n    const dy = this.ry - bo.ry;\n    return Math.hypot(dx, dy);\n  }\n  setPos(x: number, y: number) {\n    this.rx = x;\n    this.ry = y;\n  }\n  // resets the forces\n  resetForce() {\n    this.fx = 0;\n    this.fy = 0;\n  }\n  addForce(b: Body) {\n    const dx = b.rx - this.rx;\n    const dy = b.ry - this.ry;\n    let dist = Math.hypot(dx, dy);\n    dist = dist < 0.0001 ? 0.0001 : dist;\n    // the repulsive defined by force atlas 2\n    const F = (this.g * (this.degree + 1) * (b.degree + 1)) / dist;\n    this.fx += F * dx / dist;\n    this.fy += F * dy / dist;\n  }\n  // if quad contains this body\n  in(quad: Quad) {\n    return quad.contains(this.rx, this.ry);\n  }\n  // returns a new body\n  add(bo: Body) {\n    const nenwMass = this.mass + bo.mass;\n    const x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n    const y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n    const dg = this.degree + bo.degree;\n    const params: BodyProps = {\n      rx: x,\n      ry: y,\n      mass: nenwMass,\n      degree: dg\n    };\n    return new Body(params);\n  }\n}"]}},"error":null,"hash":"e0cf4571134c9c150861a3c15cf10448","cacheData":{"env":{}}}