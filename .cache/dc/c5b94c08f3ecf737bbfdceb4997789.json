{"id":"node_modules/@antv/algorithm/lib/detect-cycle.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\package.json","includedInParent":true,"mtime":1674179681169},{"name":"./dfs","loc":{"line":10,"column":42,"index":581},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\detect-cycle.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\dfs.js"},{"name":"./connected-component","loc":{"line":12,"column":58,"index":651},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\detect-cycle.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\connected-component.js"},{"name":"./util","loc":{"line":14,"column":20,"index":699},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\detect-cycle.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectAllUndirectedCycle = exports.detectAllDirectedCycle = exports.detectAllCycles = exports.default = void 0;\n\nvar _dfs = _interopRequireDefault(require(\"./dfs\"));\n\nvar _connectedComponent = _interopRequireWildcard(require(\"./connected-component\"));\n\nvar _util = require(\"./util\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n          previousNode = _a.previous;\n\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    (0, _dfs.default)(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\n\nvar detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n\n  if (include === void 0) {\n    include = true;\n  }\n\n  var allCycles = [];\n  var components = (0, _connectedComponent.default)(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = (0, _util.getNeighbors)(curNodeId, graphData.edges);\n\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n\n          if (cycleValid) {\n            var cycle = {};\n\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      };\n\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\n\nexports.detectAllUndirectedCycle = detectAllUndirectedCycle;\n\nvar detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n\n    while (stack.length > 0) {\n      var node = stack.pop();\n\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n\n      if (neighbor === start) {\n        var cycle = {};\n\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n\n    path.pop();\n    return closed;\n  };\n\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    var component = components[minCompIdx];\n    var adjList = [];\n\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n\n      for (var _i = 0, _b = (0, _util.getNeighbors)(node.id, graphData.edges, 'target').filter(function (n) {\n        return component.map(function (c) {\n          return c.id;\n        }).indexOf(n) > -1;\n      }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n\n  var nodeIdx = 0;\n\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = (0, _connectedComponent.detectStrongConnectComponents)({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n        adjList = scc.adjList,\n        component = scc.component;\n\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\n\nexports.detectAllDirectedCycle = detectAllDirectedCycle;\n\nvar detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\n\nexports.detectAllCycles = detectAllCycles;\nvar _default = detectDirectedCycle;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@antv/algorithm/lib/detect-cycle.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}}],"sources":{"node_modules/@antv/algorithm/lib/detect-cycle.js":"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectAllUndirectedCycle = exports.detectAllDirectedCycle = exports.detectAllCycles = exports.default = void 0;\n\nvar _dfs = _interopRequireDefault(require(\"./dfs\"));\n\nvar _connectedComponent = _interopRequireWildcard(require(\"./connected-component\"));\n\nvar _util = require(\"./util\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n          previousNode = _a.previous;\n\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    (0, _dfs.default)(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\n\nvar detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n\n  if (include === void 0) {\n    include = true;\n  }\n\n  var allCycles = [];\n  var components = (0, _connectedComponent.default)(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = (0, _util.getNeighbors)(curNodeId, graphData.edges);\n\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n\n          if (cycleValid) {\n            var cycle = {};\n\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      };\n\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\n\nexports.detectAllUndirectedCycle = detectAllUndirectedCycle;\n\nvar detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n\n    while (stack.length > 0) {\n      var node = stack.pop();\n\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n\n      if (neighbor === start) {\n        var cycle = {};\n\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n\n    path.pop();\n    return closed;\n  };\n\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    var component = components[minCompIdx];\n    var adjList = [];\n\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n\n      for (var _i = 0, _b = (0, _util.getNeighbors)(node.id, graphData.edges, 'target').filter(function (n) {\n        return component.map(function (c) {\n          return c.id;\n        }).indexOf(n) > -1;\n      }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n\n  var nodeIdx = 0;\n\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = (0, _connectedComponent.detectStrongConnectComponents)({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n        adjList = scc.adjList,\n        component = scc.component;\n\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\n\nexports.detectAllDirectedCycle = detectAllDirectedCycle;\n\nvar detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\n\nexports.detectAllCycles = detectAllCycles;\nvar _default = detectDirectedCycle;\nexports.default = _default;"},"lineCount":421}},"error":null,"hash":"c2c7a2d0f87c13794663dd782a771a7f","cacheData":{"env":{}}}