{"id":"index.html","dependencies":[{"name":"_css_loader","parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\index.html","resolved":"C:\\Users\\Ninth\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <script src=\"http://d3js.org/d3.v4.min.js\" charset=\"utf-8\"></script>\r\n        <title>D3</title>\r\n        <style>* {\r\n                margin: 0;\r\n                padding: 0;\r\n            }\r\n            body {\r\n                width: 100vw;\r\n                height: 100vh;\r\n                overflow: hidden;\r\n            }\r\n            .svg {\r\n                position: fixed;\r\n                top: 0;\r\n                left: 0;\r\n                width: 100vw;\r\n                height: 100vh;\r\n            }\r\n            .info {\r\n                position: fixed;\r\n                top: 0;\r\n                height: 60px;\r\n                width: 100vw;\r\n                background-color: #fff;\r\n                border-bottom: 1px solid #e2e2e2;\r\n                padding: 20px;\r\n                z-index: 999;\r\n                display: flex;\r\n                justify-content: space-around;\r\n            }\r\n            .info .label {\r\n                font-size: 20px;\r\n                font-weight: bold;\r\n            }\r\n            .info .list {\r\n                font-size: 18px;\r\n                max-width: 40vw;\r\n                white-space: nowrap;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            }</style>\r\n    </head>\r\n    <body>\r\n        <div class=\"info\">\r\n            <div class=\"neighbors\">\r\n                <div class=\"label\">邻居节点</div>\r\n                <div class=\"list\"></div>\r\n            </div>\r\n            <div class=\"sameClass\">\r\n                <div class=\"label\">同类节点</div>\r\n                <div class=\"list\"></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"svg\" id=\"forceDirected\"></div>\r\n        <script>var nodesCount = 300;\nvar edgesCount = 150;\nvar ranks = 5;\nvar data = {\n  nodes: [],\n  edges: []\n};\n\nfor (var i = 0; i < nodesCount; i++) {\n  data.nodes.push({\n    name: i.toString(),\n    class: i % 4\n  });\n}\n\nfor (var r = 0; r < ranks - 1; r++) {\n  for (var _i = 0; _i < edgesCount / ranks; _i++) {\n    var from = (nodesCount / ranks * r + Math.floor(Math.random() * (nodesCount / ranks))).toString();\n    var to = (nodesCount / ranks * (r + 1) + Math.floor(Math.random() * (nodesCount / ranks))).toString();\n    if (from != to) data.edges.push({\n      source: from,\n      target: to,\n      relation: 'from ' + from + ' to ' + to\n    });\n  }\n}\n\nfunction forceDirected() {\n  var width = document.body.clientWidth;\n  var height = document.body.clientHeight;\n  var padding = {\n    left: 30,\n    right: 30,\n    top: 20,\n    bottom: 20\n  };\n  var nodes = data.nodes;\n  var links = data.edges;\n  var svg = d3.select('#forceDirected').append('svg').attr('width', width).attr('height', height).call(d3.zoom().on('zoom', function () {\n    svg.attr('transform', d3.event.transform);\n  })).append('g'); // 通过布局来转换数据，然后进行绘制\n\n  var simulation = d3.forceSimulation().nodes(nodes).force('link', d3.forceLink(links).distance(100)).force('center', d3.forceCenter((width - padding.left - padding.right) / 2, (height - padding.top - padding.bottom) / 2)).force('charge', d3.forceManyBody().strength(5)).force('collide', d3.forceCollide().radius(50).iterations(20));\n  var color = d3.scaleOrdinal(d3.schemeCategory20); // 添加连线\n\n  svg.selectAll('line').data(links).enter().append('line').style('stroke', '#ccc').style('stroke-width', 2).text(function (d) {\n    return '';\n  }); // 添加节点\n\n  var nodeDoms = svg.selectAll('circle').data(nodes).enter().append('circle').attr('r', 20).style('fill', function (d, i) {\n    return color(d.class);\n  }).on('mouseover', function (e) {\n    var ardLinks = links.filter(function (item) {\n      return item.source == e || item.target == e;\n    }); // console.log(ardLinks)\n\n    var neighbors = ardLinks.map(function (item) {\n      if (item.source == e) {\n        return item.target.name;\n      } else {\n        return item.source.name;\n      }\n    });\n    var sameClass = nodes.filter(function (item) {\n      return item.class == e.class;\n    }).map(function (item) {\n      return item.name;\n    }); // console.log(e.name, 'nbs:', neighbors, 'scls:', sameClass)\n\n    document.querySelector('.neighbors .list').innerHTML = neighbors.join(',');\n    document.querySelector('.sameClass .list').innerHTML = sameClass.join(',');\n    nodeDoms.style('fill', function (d, i) {\n      return neighbors.includes(d.name) ? color(5) : sameClass.includes(d.name) ? color(6) : color(d.class);\n    });\n  }).on('mouseleave', function (e) {\n    nodeDoms.style('fill', function (d, i) {\n      return color(d.class);\n    });\n  }) // 添加圆圈的拖拽事件，同时他会触发simulation的tick事件，重新布局该区域\n  .call(d3.drag().on('start', function (d) {\n    if (!d3.event.active) {\n      simulation.alphaTarget(0.8).restart(); // 设置衰减系数，对节点位置移动过程的模拟，数值越高移动越快，数值范围[0，1]\n    }\n\n    d.fx = d.x;\n    d.fy = d.y;\n  }).on('drag', function (d) {\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }).on('end', function (d) {\n    if (!d3.event.active) {\n      simulation.alphaTarget(0);\n    }\n\n    d.fx = null;\n    d.fy = null;\n  })); // 添加描述\n\n  svg.selectAll('text').data(nodes).enter().append('text').style('font-size', '12px').style('fill', '#000').style('pointer-events', 'none').attr('dx', -5).attr('dy', 3).text(function (d) {\n    return d.name;\n  }); // 添加relation\n  // svg.selectAll('.relation')\n  //     .data(links)\n  //     .enter()\n  //     .append('text')\n  //     .style('fill', 'red')\n  //     .style('font-size', '12px')\n  //     .attr('class', 'relation')\n  //     .attr('dx', 0)\n  //     .attr('dy', 0)\n  //     .text(function (d) {\n  //         return d.relation\n  //     })\n  //数据重绘\n\n  simulation.on('tick', function () {\n    svg.selectAll('circle').attr('cx', function (d) {\n      return d.x;\n    }).attr('cy', function (d) {\n      return d.y;\n    });\n    svg.selectAll('text').attr('x', function (d) {\n      return d.x;\n    }).attr('y', function (d) {\n      return d.y;\n    });\n    svg.selectAll('line').attr('x1', function (d) {\n      return d.source.x;\n    }).attr('y1', function (d) {\n      return d.source.y;\n    }).attr('x2', function (d) {\n      return d.target.x;\n    }).attr('y2', function (d) {\n      return d.target.y;\n    });\n    svg.selectAll('.relation').attr('x', function (d) {\n      return (d.source.x + d.target.x) / 2;\n    }).attr('y', function (d) {\n      return (d.source.y + d.target.y) / 2;\n    });\n  });\n}\n\nforceDirected();</script>\r\n    </body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"648840afa5828c01ed789dffc2e006cd","cacheData":{"env":{}}}