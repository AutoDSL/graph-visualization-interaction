{"id":"node_modules/@antv/algorithm/lib/gaddi.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\package.json","includedInParent":true,"mtime":1674179681169},{"name":"tslib","loc":{"line":8,"column":21,"index":128},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\gaddi.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\tslib\\tslib.es6.js"},{"name":"./floydWarshall","loc":{"line":10,"column":52,"index":191},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\gaddi.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\floydWarshall.js"},{"name":"./gSpan/gSpan","loc":{"line":12,"column":44,"index":257},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\gaddi.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\gSpan\\gSpan.js"},{"name":"./dijkstra","loc":{"line":14,"column":47,"index":324},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\gaddi.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\dijkstra.js"},{"name":"./util","loc":{"line":16,"column":20,"index":361},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\gaddi.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _floydWarshall = _interopRequireDefault(require(\"./floydWarshall\"));\n\nvar _gSpan = _interopRequireDefault(require(\"./gSpan/gSpan\"));\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * 为 graphData 中每个节点生成邻居单元数组\n * @param graphData\n * @param spm\n * @param nodeLabelProp\n * @param k k-近邻\n */\nvar findKNeighborUnits = function findKNeighborUnits(graphData, spm, nodeLabelProp, k) {\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (k === void 0) {\n    k = 2;\n  }\n\n  var units = [];\n  var nodes = graphData.nodes;\n  spm.forEach(function (row, i) {\n    units.push(findKNeighborUnit(nodes, row, i, nodeLabelProp, k));\n  });\n  return units;\n};\n\nvar findKNeighborUnit = function findKNeighborUnit(nodes, row, i, nodeLabelProp, k) {\n  var unitNodeIdxs = [i];\n  var neighbors = [];\n  var labelCountMap = {};\n  row.forEach(function (v, j) {\n    if (v <= k && i !== j) {\n      unitNodeIdxs.push(j);\n      neighbors.push(nodes[j]);\n      var label = nodes[j][nodeLabelProp];\n      if (!labelCountMap[label]) labelCountMap[label] = {\n        count: 1,\n        dists: [v]\n      };else {\n        labelCountMap[label].count++;\n        labelCountMap[label].dists.push(v);\n      }\n    }\n  }); // 将 labelCountMap 中的 dists 按照从小到大排序，方便后面使用\n\n  Object.keys(labelCountMap).forEach(function (label) {\n    labelCountMap[label].dists = labelCountMap[label].dists.sort(function (a, b) {\n      return a - b;\n    });\n  });\n  return {\n    nodeIdx: i,\n    nodeId: nodes[i].id,\n    nodeIdxs: unitNodeIdxs,\n    neighbors: neighbors,\n    neighborNum: unitNodeIdxs.length - 1,\n    nodeLabelCountMap: labelCountMap\n  };\n};\n/**\n * 随机寻找点对，满足距离小于 k\n * @param k 参数 k，表示 k-近邻\n * @param nodeNum 参数 length\n * @param maxNodePairNum 寻找点对的数量不超过 maxNodePairNum\n * @param spm 最短路径矩阵\n */\n\n\nvar findNodePairsRandomly = function findNodePairsRandomly(k, nodeNum, maxNodePairNum, kNeighborUnits, spm) {\n  // 每个节点需要随机找出的点对数\n  var nodePairNumEachNode = Math.ceil(maxNodePairNum / nodeNum);\n  var nodePairMap = {};\n  var foundNodePairCount = 0; // 遍历节点，为每个节点随机找出 nodePairNumEachNode 个点对，满足距离小于 k。找到的点对数量超过 maxNodePairNum 或所有节点遍历结束时终止\n\n  kNeighborUnits.forEach(function (unit, i) {\n    // 若未达到 nodePairNumEachNode，或循环次数小于最大循环次数(2 * nodeNum)，继续循环\n    var nodePairForICount = 0;\n    var outerLoopCount = 0;\n    var neighbors = unit.nodeIdxs; // the first one is the center node\n\n    var neighborNum = unit.neighborNum - 1;\n\n    while (nodePairForICount < nodePairNumEachNode) {\n      // 另一端节点在节点数组中的的 index\n      var oidx = neighbors[1 + Math.floor(Math.random() * neighborNum)];\n      var innerLoopCount = 0; // 若随机得到的另一端 idx 不符合条件，则继续 random。条件是不是同一个节点、这个点对没有被记录过、距离小于 k\n\n      while (nodePairMap[\"\".concat(i, \"-\").concat(oidx)] || nodePairMap[\"\".concat(oidx, \"-\").concat(i)]) {\n        oidx = Math.floor(Math.random() * nodeNum);\n        innerLoopCount++;\n        if (innerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n      }\n\n      if (innerLoopCount < 2 * nodeNum) {\n        // 未达到最大循环次数，说明找到了合适的另一端\n        nodePairMap[\"\".concat(i, \"-\").concat(oidx)] = {\n          start: i,\n          end: oidx,\n          distance: spm[i][oidx]\n        };\n        nodePairForICount++;\n        foundNodePairCount++; // 如果当前找到的点对数量达到了上限，返回结果\n\n        if (foundNodePairCount >= maxNodePairNum) return nodePairMap;\n      }\n\n      outerLoopCount++;\n      if (outerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n    } // 这个节点没有找到足够 nodePairNumEachNode 的点对。更新 nodePairNumEachNode，让后续节点找更多的点对\n\n\n    if (nodePairForICount < nodePairNumEachNode) {\n      var gap = nodePairNumEachNode - nodePairForICount;\n      nodePairNumEachNode = (nodePairNumEachNode + gap) / (nodeNum - i - 1);\n    }\n  });\n  return nodePairMap;\n};\n/**\n * 计算所有 nodePairMap 中节点对的相交邻居诱导子图\n * @param nodePairMap 节点对 map，key 为 node1.id-node2.id，value 为 { startNodeIdx, endNodeIdx, distance }\n * @param neighborUnits 每个节点的邻居元数组\n * @param graphData 原图数据\n * @param edgeMap 边的 map，方便检索\n * @param cachedInducedGraphMap 缓存的结果，下次进入该函数将继续更新该缓存，若 key 在缓存中存在则不需要重复计算\n */\n\n\nvar getIntersectNeighborInducedGraph = function getIntersectNeighborInducedGraph(nodePairMap, neighborUnits, graphData, cachedInducedGraphMap) {\n  var nodes = graphData.nodes;\n  if (!cachedInducedGraphMap) cachedInducedGraphMap = {};\n  Object.keys(nodePairMap).forEach(function (key) {\n    var _a, _b;\n\n    if (cachedInducedGraphMap && cachedInducedGraphMap[key]) return;\n    cachedInducedGraphMap[key] = {\n      nodes: [],\n      edges: []\n    };\n    var pair = nodePairMap[key];\n    var startUnitNodeIds = (_a = neighborUnits[pair.start]) === null || _a === void 0 ? void 0 : _a.nodeIdxs;\n    var endUnitNodeIds = (_b = neighborUnits[pair.end]) === null || _b === void 0 ? void 0 : _b.nodeIdxs;\n    if (!startUnitNodeIds || !endUnitNodeIds) return; // 不存在邻元，返回空图\n\n    var endSet = new Set(endUnitNodeIds);\n    var intersect = startUnitNodeIds.filter(function (x) {\n      return endSet.has(x);\n    }); // 可能会爆栈（在 1580 + 6 nodes full-connected 时出现）\n\n    if (!intersect || !intersect.length) return; // 没有交集，返回空图\n\n    var intersectIdMap = {};\n    var intersectLength = intersect.length;\n\n    for (var i = 0; i < intersectLength; i++) {\n      var node = nodes[intersect[i]];\n      cachedInducedGraphMap[key].nodes.push(node); // 将交集中的点加入诱导子图\n\n      intersectIdMap[node.id] = true;\n    } // 遍历所有边数据，如果边的两端都在交集中，将该边加入诱导子图\n\n\n    graphData.edges.forEach(function (edge) {\n      if (intersectIdMap[edge.source] && intersectIdMap[edge.target]) cachedInducedGraphMap[key].edges.push(edge);\n    });\n  });\n  return cachedInducedGraphMap;\n};\n/**\n * 计算 strcutre 在 graph 上的匹配数量\n * @param graph 图数据\n * @param structure 目前支持只有两个节点一条边的最简单结构\n * @param nodeLabelProp 节点类型字段名\n * @param edgeLabelProp 边类型字段名\n */\n\n\nvar getMatchedCount = function getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp) {\n  var _a, _b;\n\n  var nodeMap = {};\n  graph.nodes.forEach(function (node) {\n    nodeMap[node.id] = node;\n  });\n  var count = 0;\n  if (!((_a = structure === null || structure === void 0 ? void 0 : structure.edges) === null || _a === void 0 ? void 0 : _a.length) || ((_b = structure === null || structure === void 0 ? void 0 : structure.nodes) === null || _b === void 0 ? void 0 : _b.length) < 2) return 0;\n  graph.edges.forEach(function (e) {\n    var sourceLabel = nodeMap[e.source][nodeLabelProp];\n    var targetLabel = nodeMap[e.target][nodeLabelProp];\n    var strNodeLabel1 = structure === null || structure === void 0 ? void 0 : structure.nodes[0][nodeLabelProp];\n    var strNodeLabel2 = structure === null || structure === void 0 ? void 0 : structure.nodes[1][nodeLabelProp];\n    var strEdgeLabel = structure === null || structure === void 0 ? void 0 : structure.edges[0][edgeLabelProp];\n    if (e[edgeLabelProp] !== strEdgeLabel) return;\n\n    if (sourceLabel === strNodeLabel1 && targetLabel === strNodeLabel2 || sourceLabel === strNodeLabel2 && targetLabel === strNodeLabel1) {\n      count++;\n    }\n  });\n  return count;\n};\n/**\n * structures 中寻找最具有代表性的一个。这个结构是使得 matchedCountMap 的分组方式类内间距最小，类间间距最大\n * @param matchedCountMap 每个 structure 分类后的各图匹配数量，格式 { [strcture.idx]: { [interInducedGraphKey]: count } }\n * @param structureNum strcuture 个数，与 matchedCountMap.length 对应\n * @param structures\n */\n\n\nvar findRepresentStructure = function findRepresentStructure(matchedCountMap, structureNum, structures) {\n  var maxOffset = Infinity,\n      representClusterType = 0;\n\n  var _loop_1 = function _loop_1(i) {\n    // 一种分组的 map，key 是 intGraph 的 key，value 是 structures[i] 的匹配个数\n    var countMapI = matchedCountMap[i]; // 按照 value 为该组排序，生成 keys 的数组：\n\n    var sortedGraphKeys = Object.keys(countMapI).sort(function (a, b) {\n      return countMapI[a] - countMapI[b];\n    }); // 共 100 个 graphKeys，将 graphKeys 按顺序分为 groupNum 组\n\n    var groupNum = 10;\n    var clusters = []; // 总共有 groupNum 个项\n\n    sortedGraphKeys.forEach(function (key, j) {\n      if (!clusters[j % groupNum]) clusters[j % groupNum] = {\n        graphs: [],\n        totalCount: 0,\n        aveCount: 0\n      };\n      clusters[j % groupNum].graphs.push(key);\n      clusters[j % groupNum].totalCount += countMapI[key];\n    }); // 计算 cluster 与 cluster 之间的距离 innerDist，每个 cluster 内部的距离 intraDist\n\n    var aveIntraDist = 0; // 该类的类内平均值\n\n    var aveCounts = []; // 类内平均匹配数量，将用于计算类间距离\n\n    clusters.forEach(function (graphsInCluster) {\n      // 类内均值\n      var aveCount = graphsInCluster.totalCount / graphsInCluster.graphs.length;\n      graphsInCluster.aveCount = aveCount;\n      aveCounts.push(aveCount); // 对于每类，计算类内间距平均值\n\n      var aveIntraPerCluster = 0;\n      var graphsNum = graphsInCluster.length;\n      graphsInCluster.graphs.forEach(function (graphKey1, j) {\n        var graph1Count = countMapI[graphKey1];\n        graphsInCluster.graphs.forEach(function (graphKey2, k) {\n          if (j === k) return;\n          aveIntraPerCluster += Math.abs(graph1Count - countMapI[graphKey2]);\n        });\n      });\n      aveIntraPerCluster /= graphsNum * (graphsNum - 1) / 2;\n      aveIntraDist += aveIntraPerCluster;\n    });\n    aveIntraDist /= clusters.length; // 用类内均值计算类间距\n\n    var aveInterDist = 0; // 类间间距平均值\n\n    aveCounts.forEach(function (aveCount1, j) {\n      aveCounts.forEach(function (aveCount2, k) {\n        if (j === k) return;\n        aveInterDist += Math.abs(aveCount1 - aveCount2);\n      });\n      aveInterDist /= aveCounts.length * (aveCounts.length - 1) / 2;\n    }); // 寻找 (类间间距均值-类内间距均值) 最大的一种分组方式（对应的 structure 就是最终要找的唯一 DS(G)）\n\n    var offset = aveInterDist - aveIntraDist;\n\n    if (maxOffset < offset) {\n      maxOffset = offset;\n      representClusterType = i;\n    }\n  };\n\n  for (var i = 0; i < structureNum; i++) {\n    _loop_1(i);\n  }\n\n  return {\n    structure: structures[representClusterType],\n    structureCountMap: matchedCountMap[representClusterType]\n  };\n};\n\nvar getNodeMaps = function getNodeMaps(nodes, nodeLabelProp) {\n  var nodeMap = {},\n      nodeLabelMap = {};\n  nodes.forEach(function (node, i) {\n    nodeMap[node.id] = {\n      idx: i,\n      node: node,\n      degree: 0,\n      inDegree: 0,\n      outDegree: 0\n    };\n    var label = node[nodeLabelProp];\n    if (!nodeLabelMap[label]) nodeLabelMap[label] = [];\n    nodeLabelMap[label].push(node);\n  });\n  return {\n    nodeMap: nodeMap,\n    nodeLabelMap: nodeLabelMap\n  };\n};\n\nvar getEdgeMaps = function getEdgeMaps(edges, edgeLabelProp, nodeMap) {\n  var edgeMap = {},\n      edgeLabelMap = {};\n  edges.forEach(function (edge, i) {\n    edgeMap[\"\".concat(_util.uniqueId)] = {\n      idx: i,\n      edge: edge\n    };\n    var label = edge[edgeLabelProp];\n    if (!edgeLabelMap[label]) edgeLabelMap[label] = [];\n    edgeLabelMap[label].push(edge);\n    var sourceNode = nodeMap[edge.source];\n\n    if (sourceNode) {\n      sourceNode.degree++;\n      sourceNode.outDegree++;\n    }\n\n    var targetNode = nodeMap[edge.target];\n\n    if (targetNode) {\n      targetNode.degree++;\n      targetNode.inDegree++;\n    }\n  });\n  return {\n    edgeMap: edgeMap,\n    edgeLabelMap: edgeLabelMap\n  };\n};\n/**\n * 输出最短路径的 map，key 为 sourceNode.id-targetNode.id，value 为这两个节点的最短路径长度\n * @param nodes\n * @param spm\n * @param directed\n */\n\n\nvar getSpmMap = function getSpmMap(nodes, spm, directed) {\n  var length = spm.length;\n  var map = {};\n  spm.forEach(function (row, i) {\n    var start = directed ? 0 : i + 1;\n    var iId = nodes[i].id;\n\n    for (var j = start; j < length; j++) {\n      if (i === j) continue;\n      var jId = nodes[j].id;\n      var dist = row[j];\n      map[\"\".concat(iId, \"-\").concat(jId)] = dist;\n      if (!directed) map[\"\".concat(jId, \"-\").concat(iId)] = dist;\n    }\n  });\n  return map;\n};\n/**\n * 计算一对节点（node1，node2）的 NDS 距离\n * @param graph 原图数据\n * @param node1\n * @param node2\n */\n\n\nvar getNDSDist = function getNDSDist(graph, node1, node2, nodeMap, spDist, kNeighborUnits, structure, nodeLabelProp, edgeLabelProp, cachedNDSMap, cachedInterInducedGraph) {\n  var _a;\n\n  var key = \"\".concat(node1.id, \"-\").concat(node2.id);\n  if (cachedNDSMap && cachedNDSMap[key]) return cachedNDSMap[key];\n  var interInducedGraph = cachedInterInducedGraph ? cachedInterInducedGraph[key] : undefined; // 若没有缓存相交邻居诱导子图，计算\n\n  if (!interInducedGraph) {\n    var pairMap = (_a = {}, _a[key] = {\n      start: nodeMap[node1.id].idx,\n      end: nodeMap[node2.id].idx,\n      distance: spDist\n    }, _a);\n    cachedInterInducedGraph = getIntersectNeighborInducedGraph(pairMap, kNeighborUnits, graph, cachedInterInducedGraph);\n    interInducedGraph = cachedInterInducedGraph[key];\n  }\n\n  return getMatchedCount(interInducedGraph, structure, nodeLabelProp, edgeLabelProp);\n};\n/**\n * 计算 pattern 上绩点的度数并存储到 minPatternNodeLabelDegreeMap\n */\n\n\nvar stashPatternNodeLabelDegreeMap = function stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap) {\n  var _a, _b, _c;\n\n  var minPatternNodeLabelDegree = (_a = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _a === void 0 ? void 0 : _a.degree;\n  var minPatternNodeLabelInDegree = (_b = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _b === void 0 ? void 0 : _b.inDegree;\n  var minPatternNodeLabelOutDegree = (_c = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _c === void 0 ? void 0 : _c.outDegree;\n\n  if (minPatternNodeLabelDegreeMap[neighborLabel] === undefined) {\n    minPatternNodeLabelDegree = Infinity;\n    minPatternNodeLabelInDegree = Infinity;\n    minPatternNodeLabelOutDegree = Infinity;\n    patternNodeLabelMap[neighborLabel].forEach(function (patternNodeWithLabel) {\n      var patternNodeDegree = patternNodeMap[patternNodeWithLabel.id].degree;\n      if (minPatternNodeLabelDegree > patternNodeDegree) minPatternNodeLabelDegree = patternNodeDegree;\n      var patternNodeInDegree = patternNodeMap[patternNodeWithLabel.id].inDegree;\n      if (minPatternNodeLabelInDegree > patternNodeInDegree) minPatternNodeLabelInDegree = patternNodeInDegree;\n      var patternNodeOutDegree = patternNodeMap[patternNodeWithLabel.id].outDegree;\n      if (minPatternNodeLabelOutDegree > patternNodeOutDegree) minPatternNodeLabelOutDegree = patternNodeOutDegree;\n    });\n    minPatternNodeLabelDegreeMap[neighborLabel] = {\n      degree: minPatternNodeLabelDegree,\n      inDegree: minPatternNodeLabelInDegree,\n      outDegree: minPatternNodeLabelOutDegree\n    };\n  }\n\n  return {\n    minPatternNodeLabelDegree: minPatternNodeLabelDegree,\n    minPatternNodeLabelInDegree: minPatternNodeLabelInDegree,\n    minPatternNodeLabelOutDegree: minPatternNodeLabelOutDegree\n  };\n};\n/**\n * GADDI 模式匹配\n * @param graphData 原图数据\n * @param pattern 搜索图（需要在原图上搜索的模式）数据\n * @param directed 是否计算有向图，默认 false\n * @param k 参数 k，表示 k-近邻\n * @param length 参数 length\n * @param nodeLabelProp 节点数据中代表节点标签（分类信息）的属性名。默认为 cluster\n * @param edgeLabelProp 边数据中代表边标签（分类信息）的属性名。默认为 cluster\n */\n\n\nvar GADDI = function GADDI(graphData, pattern, directed, k, length, nodeLabelProp, edgeLabelProp) {\n  var _a;\n\n  if (directed === void 0) {\n    directed = false;\n  }\n\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (edgeLabelProp === void 0) {\n    edgeLabelProp = 'cluster';\n  }\n\n  if (!graphData || !graphData.nodes) return; // 分为三步：\n  // 0. 预计算：节点/边数，邻接矩阵、最短路径矩阵\n  // 1. 处理原图 graphData。再分为 1~5 小步\n  // 2. 匹配\n  // console.log(\"----- stage-pre: preprocessing -------\");\n  // -------- 第零步，预计算：节点/边数，邻接矩阵、最短路径矩阵-------\n\n  var nodeNum = graphData.nodes.length;\n  if (!nodeNum) return; // console.log(\"----- stage-pre.1: calc shortest path matrix for graph -------\");\n\n  var spm = (0, _floydWarshall.default)(graphData, directed); // console.log(\n  //   \"----- stage-pre.2: calc shortest path matrix for pattern -------\"\n  // );\n\n  var patternSpm = (0, _floydWarshall.default)(pattern, directed); // console.log(\n  //   \"----- stage-pre.3: calc shortest path matrix map for graph -------\"\n  // );\n\n  var spmMap = getSpmMap(graphData.nodes, spm, directed); // console.log(\n  //   \"----- stage-pre.4: calc shortest path matrix map for pattern -------\"\n  // );\n\n  var patternSpmMap = getSpmMap(pattern.nodes, patternSpm, directed); // console.log(\"----- stage-pre.5: establish maps -------\");\n  // 节点的 map，以 id 为 id 映射，方便后续快速检索\n\n  var _b = getNodeMaps(graphData.nodes, nodeLabelProp),\n      nodeMap = _b.nodeMap,\n      nodeLabelMap = _b.nodeLabelMap;\n\n  var _c = getNodeMaps(pattern.nodes, nodeLabelProp),\n      patternNodeMap = _c.nodeMap,\n      patternNodeLabelMap = _c.nodeLabelMap; // 计算节点度数\n\n\n  getEdgeMaps(graphData.edges, edgeLabelProp, nodeMap);\n  var patternEdgeLabelMap = getEdgeMaps(pattern.edges, edgeLabelProp, patternNodeMap).edgeLabelMap; // 若未指定 length，自动计算 pattern 半径（最短路径最大值）\n\n  var patternSpmSpread = [];\n  patternSpm === null || patternSpm === void 0 ? void 0 : patternSpm.forEach(function (row) {\n    patternSpmSpread = patternSpmSpread.concat(row);\n  });\n  if (!length) length = Math.max.apply(Math, (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], patternSpmSpread, false), [2], false));\n  if (!k) k = length; // console.log(\"params\", directed, length, k);\n  // console.log(\"----- stage-pre.6: calc k neighbor units -------\");\n  // 计算每个节点的 k 邻元集合\n\n  var kNeighborUnits = findKNeighborUnits(graphData, spm, nodeLabelProp, k);\n  var patternKNeighborUnits = findKNeighborUnits(pattern, patternSpm, nodeLabelProp, k); // console.log(\n  //   \"----- stage0: going to processing graph and find intersect neighbor induced graphs -------\"\n  // );\n  // console.log(\"----- stage0.1: going to select random node pairs -------\");\n  // -------- 第一步，处理原图 graphData-------\n  // 1.1. 随机选择最多 100 个点对，满足距离小于 Length 和 k\n  // 当 graphData 少于 20 个节点，则不能找出 100 个点对，只找出不多于 n(n-1)/2 个点对\n\n  var maxNodePairNum = Math.min(100, nodeNum * (nodeNum - 1) / 2);\n  var nodePairsMap = findNodePairsRandomly(k, nodeNum, maxNodePairNum, kNeighborUnits, spm); // console.log(\n  //   \"----- stage0.2: going to calculate intersect neighbor induced graphs -------\"\n  // );\n  // 1.2. 生成上面节点对的相应相交邻居诱导子图。格式为 {'beginNodeIdx-endNodeIdx': {nodes: [], edges: []}}\n\n  var intGMap = getIntersectNeighborInducedGraph(nodePairsMap, kNeighborUnits, graphData); // 1.3. 使用 gSpan 算法（frequent graph mining）计算 ISIntG 的前 10 个频率最高的子结构（3-4条边）\n\n  var top = 10,\n      minSupport = 1,\n      minNodeNum = 1,\n      maxNodeNum = 4;\n  var params = {\n    graphs: intGMap,\n    nodeLabelProp: nodeLabelProp,\n    edgeLabelProp: edgeLabelProp,\n    minSupport: minSupport,\n    minNodeNum: minNodeNum,\n    maxNodeNum: maxNodeNum,\n    directed: directed\n  }; // console.log(\n  //   \"----- stage1: (gSpan) going to find frequent structure dsG -------\"\n  // );\n  // console.log(\"----- stage1.1: going to run gSpan -------\");\n  // 暂时假设生成的 sub structure 都只有一条边\n\n  var freStructures = (0, _gSpan.default)(params).slice(0, top); // structureNum 可能小于 top\n\n  var structureNum = freStructures.length; // 1.4. 计算上述 10 个子结构在 intGMap 中每个诱导子图的匹配个数\n\n  var matchedCountMap = [];\n  freStructures.forEach(function (structure, i) {\n    matchedCountMap[i] = {};\n    Object.keys(intGMap).forEach(function (key) {\n      var graph = intGMap[key];\n      var subStructureCount = getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp);\n      matchedCountMap[i][key] = subStructureCount;\n    });\n  }); // console.log(\n  //   \"----- stage1.1: going to find the most represent strucutre -------\"\n  // );\n  // 1.5. 对于每个子结构，根据匹配个数为 intGMap 中的诱导子图分组，生成 structureNum 种分组\n  // 计算每种分组的类间距和类内间距，找到类间距最大、类内间距最小的一种分组，这种分组对应的子结构被选为唯一代表性子结构 DS(G)\n\n  var _d = findRepresentStructure(matchedCountMap, structureNum, freStructures),\n      dsG = _d.structure,\n      ndsDist = _d.structureCountMap; // -------- 第二步，匹配-------\n  // 2.1 找到从 Q 中的一个节点作为起始节点，寻找 G 中的匹配。这个其实节点的标签可以在 G 中找到最多的节点\n\n\n  var beginPNode = pattern.nodes[0],\n      candidates = [],\n      label = (_a = pattern.nodes[0]) === null || _a === void 0 ? void 0 : _a[nodeLabelProp],\n      maxNodeNumWithSameLabel = -Infinity;\n  pattern.nodes.forEach(function (node) {\n    var pLabel = node[nodeLabelProp];\n    var nodesWithSameLabel = nodeLabelMap[pLabel];\n\n    if ((nodesWithSameLabel === null || nodesWithSameLabel === void 0 ? void 0 : nodesWithSameLabel.length) > maxNodeNumWithSameLabel) {\n      maxNodeNumWithSameLabel = nodesWithSameLabel.length;\n      candidates = nodesWithSameLabel;\n      label = pLabel;\n      beginPNode = node;\n    }\n  }); // console.log(\"----- stage2: going to find candidates -------\");\n  // 全局缓存，避免重复计算\n\n  var minPatternNodeLabelDegreeMap = {}; // key 是 label，value 是该 label 节点的最小度数\n\n  var patternIntGraphMap = {},\n      patternNDSDist = {},\n      // key 为 node.id-node.id\n  patternNDSDistMap = {}; // key 为 node.id-label2，value nds距离值数组（按从大到小排序，无需关心具体对应哪个 node2）\n  // 2.2.2 对于 Q 中的另一个标签的 k 个节点，计算它们到 node 的最短路径以及 NDS 距离\n\n  var patternSpDist = {};\n  var patternSpDistBack = {};\n  Object.keys(patternNodeLabelMap).forEach(function (label2, j) {\n    patternSpDist[label2] = [];\n\n    if (directed) {\n      patternSpDistBack[label2] = [];\n    }\n\n    var maxDist = -Infinity;\n    var patternNodesWithLabel2 = patternNodeLabelMap[label2];\n    var patternNodePairMap = {};\n    patternNodesWithLabel2.forEach(function (nodeWithLabel2) {\n      var dist = patternSpmMap[\"\".concat(beginPNode.id, \"-\").concat(nodeWithLabel2.id)];\n      dist && patternSpDist[label2].push(dist);\n      if (maxDist < dist) maxDist = dist;\n      patternNodePairMap[\"\".concat(beginPNode.id, \"-\").concat(nodeWithLabel2.id)] = {\n        start: 0,\n        end: patternNodeMap[nodeWithLabel2.id].idx,\n        distance: dist\n      };\n\n      if (directed) {\n        var distBack = patternSpmMap[\"\".concat(nodeWithLabel2.id, \"-\").concat(beginPNode.id)];\n        distBack && patternSpDistBack[label2].push(distBack);\n      }\n    }); // spDist[label2] 按照从小到大排序\n\n    patternSpDist[label2] = patternSpDist[label2].sort(function (a, b) {\n      return a - b;\n    });\n    if (directed) patternSpDistBack[label2] = patternSpDistBack[label2].sort(function (a, b) {\n      return a - b;\n    }); // 计算 Q 中所有 label2 节点到 beginPNode 的 NDS 距离\n    // 所有 label2 节点到 beginPNode 的邻居相交诱导子图：\n    // key: node1.id-node2.id\n\n    patternIntGraphMap = getIntersectNeighborInducedGraph(patternNodePairMap, patternKNeighborUnits, pattern, patternIntGraphMap); // pattern 中 beginNode 到当前 label2 节点 的 NDS 距离（数组，无需关心具体对应到哪个节点）\n\n    var currentPatternNDSDistArray = [];\n    Object.keys(patternNodePairMap).forEach(function (key) {\n      if (patternNDSDist[key]) {\n        currentPatternNDSDistArray.push(patternNDSDist[key]);\n        return; // 缓存过则不需要再次计算\n      }\n\n      var patternIntGraph = patternIntGraphMap[key];\n      patternNDSDist[key] = getMatchedCount(patternIntGraph, dsG, nodeLabelProp, edgeLabelProp);\n      currentPatternNDSDistArray.push(patternNDSDist[key]);\n    }); // 根据值为 currentPatternNDSDist 从大到小排序\n\n    currentPatternNDSDistArray = currentPatternNDSDistArray.sort(function (a, b) {\n      return b - a;\n    });\n    patternNDSDistMap[\"\".concat(beginPNode.id, \"-\").concat(label2)] = currentPatternNDSDistArray;\n    if (label2 === label) return;\n    var candidatesNum = (candidates === null || candidates === void 0 ? void 0 : candidates.length) || 0;\n\n    var _loop_4 = function _loop_4(m) {\n      var cNode = candidates[m]; // prune1：若 candidates 中节点 cNode 的 kNeighborUnits 中标签为 label2 的节点个数少于 pattern 中 label2 个数，删去它\n\n      var graphNeighborUnit = kNeighborUnits[nodeMap[cNode.id].idx];\n      var graphNeighborUnitCountMap = graphNeighborUnit.nodeLabelCountMap[label2];\n      var patternLabel2Num = patternNodeLabelMap[label2].length;\n\n      if (!graphNeighborUnitCountMap || graphNeighborUnitCountMap.count < patternLabel2Num) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune2：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点最短路径大于 patternSpDist[label2]，删去它\n      // (prune2 规则即：candidate 相关的最短路径的最大 spDist[label2].length 个，按照大小顺序依次和 patternSpDist[label2] 中的值比较，只要遇到一个是 G > Q 的，就删去这个 candidate)\n\n\n      var prune2Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (graphNeighborUnitCountMap.dists[n] > patternSpDist[label2][n]) {\n          prune2Invalid = true;\n          break;\n        }\n      }\n\n      if (prune2Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune3：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点 NDS 距离小于 patternNDSDist[beginNode.id-label2]，删去它\n      // TODO：prune3，currentPatternNDSDistArray 与 currentNDSDist 的比较\n      // 计算 G 中所有 label2 节点到 cNode 的 NDS 距离\n      // 所有 label2 节点到 cNode 的邻居相交诱导子图：\n\n\n      var cNodePairMap = {};\n      graphNeighborUnit.neighbors.forEach(function (neighborNode) {\n        var dist = spmMap[\"\".concat(cNode.id, \"-\").concat(neighborNode.id)];\n        cNodePairMap[\"\".concat(cNode.id, \"-\").concat(neighborNode.id)] = {\n          start: nodeMap[cNode.id].idx,\n          end: nodeMap[neighborNode.id].idx,\n          distance: dist\n        };\n      }); // 更新 intGMap\n\n      intGMap = getIntersectNeighborInducedGraph(cNodePairMap, kNeighborUnits, graphData, intGMap); // candidate 到它周围 label2 节点的 NDS 距离, key 是 node.id-node.id\n\n      var currentNDSDistArray = [];\n      Object.keys(cNodePairMap).forEach(function (key) {\n        if (ndsDist[key]) {\n          currentNDSDistArray.push(ndsDist[key]);\n          return; // 缓存过则不需要再次计算\n        }\n\n        var intGraph = intGMap[key];\n        ndsDist[key] = getMatchedCount(intGraph, dsG, nodeLabelProp, edgeLabelProp);\n        currentNDSDistArray.push(ndsDist[key]);\n      }); // 根据值为 currentNDSDistArray 从大到小排序\n\n      currentNDSDistArray = currentNDSDistArray.sort(function (a, b) {\n        return b - a;\n      });\n      var prune3Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (currentNDSDistArray[n] < currentPatternNDSDistArray[n]) {\n          prune3Invalid = true;\n          break;\n        }\n      }\n\n      if (prune3Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      }\n    };\n\n    for (var m = candidatesNum - 1; m >= 0; m--) {\n      _loop_4(m);\n    }\n  });\n  var candidateGraphs = []; // console.log(\n  //   \"----- stage3: going to splice neighbors for each candidate graph -------\"\n  // );\n  // candidates 经过筛选后，以每个 candidate 为中心，生成 Length-neighbor 的邻居诱导子图\n  // 并在诱导子图中去除不可能在 Q 上找到匹配的点：在 Q 上不存在的 label，其他 label 到 candidate 的最大最短距离符合 Q、NDS 距离符合 Q\n\n  candidates === null || candidates === void 0 ? void 0 : candidates.forEach(function (candidate) {\n    var nodeIdx = nodeMap[candidate.id].idx;\n    var lengthNeighborUnit = findKNeighborUnit(graphData.nodes, spm[nodeIdx], nodeIdx, nodeLabelProp, length);\n    var neighborNodes = lengthNeighborUnit.neighbors; // 删除不可能找到匹配的邻居点\n\n    var neighborNum = neighborNodes.length;\n    var unmatched = false;\n\n    for (var i = neighborNum - 1; i >= 0; i--) {\n      // 如果通过裁剪，符合条件的节点数量已过少，说明不能匹配这个 candidate 相关的图\n      if (neighborNodes.length + 1 < pattern.nodes.length) {\n        unmatched = true;\n        return;\n      }\n\n      var neighborNode = neighborNodes[i];\n      var neighborLabel = neighborNode[nodeLabelProp]; // prune1: 若该邻居点的 label 不存在于 pattern 中，移除这个点\n\n      if (!patternNodeLabelMap[neighborLabel] || !patternNodeLabelMap[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune2: 若该邻居点到 candidate 的最短路径比和它有相同 label 的节点到 beginPNode 的最大最短路径长度长，移除这个点\n      // prune2.1: 如果没有这个标签到 beginPNode 的距离记录，说明 pattern 上（可能 beginPNode 是这个 label）没有其他这个 label 的节点\n\n\n      if (!patternSpDist[neighborLabel] || !patternSpDist[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      var key = \"\".concat(candidate.id, \"-\").concat(neighborNode.id); // prune2.2\n\n      var distToCandidate = spmMap[key];\n      var idx = patternSpDist[neighborLabel].length - 1;\n      var maxDistWithLabelInPattern = patternSpDist[neighborLabel][idx]; // patternSpDist[neighborLabel] 已经按照从小到大排序\n\n      if (distToCandidate > maxDistWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      if (directed) {\n        var keyBack = \"\".concat(neighborNode.id, \"-\").concat(candidate.id);\n        var distFromCandidate = spmMap[keyBack];\n        idx = patternSpDistBack[neighborLabel].length - 1;\n        var maxBackDistWithLabelInPattern = patternSpDistBack[neighborLabel][idx];\n\n        if (distFromCandidate > maxBackDistWithLabelInPattern) {\n          neighborNodes.splice(i, 1);\n          continue;\n        }\n      } // prune3: 若该邻居点到 candidate 的 NDS 距离比和它有相同 label 的节点到 beginPNode 的最小 NDS 距离小，移除这个点\n\n\n      var ndsToCandidate = ndsDist[key] ? ndsDist[key] : getNDSDist(graphData, candidate, neighborNode, nodeMap, distToCandidate, kNeighborUnits, dsG, nodeLabelProp, edgeLabelProp, ndsDist, intGMap);\n      var patternKey = \"\".concat(beginPNode.id, \"-\").concat(neighborLabel);\n      var minNdsWithLabelInPattern = patternNDSDistMap[patternKey][patternNDSDistMap[patternKey].length - 1]; // patternNDSDist[key] 一定存在\n\n      if (ndsToCandidate < minNdsWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune4: 若该邻居点的度数小于 pattern 同 label 节点最小度数，删去该点\n\n\n      var _a = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap),\n          minPatternNodeLabelDegree = _a.minPatternNodeLabelDegree,\n          minPatternNodeLabelInDegree = _a.minPatternNodeLabelInDegree,\n          minPatternNodeLabelOutDegree = _a.minPatternNodeLabelOutDegree;\n\n      if (nodeMap[neighborNode.id].degree < minPatternNodeLabelDegree) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n    } // 节点在个数上符合匹配（不少于 pattern 的节点个数），现在筛选相关边\n\n\n    if (!unmatched) {\n      candidateGraphs.push({\n        nodes: [candidate].concat(neighborNodes)\n      });\n    }\n  }); // console.log(\n  //   \"----- stage4: going to splice edges and neighbors for each candidate graph -------\"\n  // );\n\n  var undirectedLengthsToBeginPNode = (0, _dijkstra.default)(pattern, beginPNode.id, false).length;\n  var undirectedLengthsToBeginPNodeLabelMap = {};\n\n  if (directed) {\n    Object.keys(undirectedLengthsToBeginPNode).forEach(function (nodeId) {\n      var nodeLabel = patternNodeMap[nodeId].node[nodeLabelProp];\n      if (!undirectedLengthsToBeginPNodeLabelMap[nodeLabel]) undirectedLengthsToBeginPNodeLabelMap[nodeLabel] = [undirectedLengthsToBeginPNode[nodeId]];else undirectedLengthsToBeginPNodeLabelMap[nodeLabel].push(undirectedLengthsToBeginPNode[nodeId]);\n    });\n    Object.keys(undirectedLengthsToBeginPNodeLabelMap).forEach(function (pLabel) {\n      undirectedLengthsToBeginPNodeLabelMap[pLabel].sort(function (a, b) {\n        return a - b;\n      });\n    });\n  } else {\n    undirectedLengthsToBeginPNodeLabelMap = patternSpDist;\n  } // 现在 candidateGraphs 里面只有节点，进行边的筛选\n\n\n  var candidateGraphNum = candidateGraphs.length;\n\n  var _loop_2 = function _loop_2(i) {\n    var candidateGraph = candidateGraphs[i];\n    var candidate = candidateGraph.nodes[0];\n    var candidateNodeLabelCountMap = {};\n    var candidateNodeMap = {};\n    candidateGraph.nodes.forEach(function (node, q) {\n      candidateNodeMap[node.id] = {\n        idx: q,\n        node: node,\n        degree: 0,\n        inDegree: 0,\n        outDegree: 0\n      };\n      var cNodeLabel = node[nodeLabelProp];\n      if (!candidateNodeLabelCountMap[cNodeLabel]) candidateNodeLabelCountMap[cNodeLabel] = 1;else candidateNodeLabelCountMap[cNodeLabel]++;\n    }); // 根据 candidate 和 neighborNodes 中的节点生成 G 的诱导子图\n    // 即，将 graphData 上两端都在 candidateGraph.nodes 中的边放入 candidateEdges\n\n    var candidateEdges = [];\n    var edgeLabelCountMap = {};\n    graphData.edges.forEach(function (edge) {\n      if (candidateNodeMap[edge.source] && candidateNodeMap[edge.target]) {\n        candidateEdges.push(edge);\n        if (!edgeLabelCountMap[edge[edgeLabelProp]]) edgeLabelCountMap[edge[edgeLabelProp]] = 1;else edgeLabelCountMap[edge[edgeLabelProp]]++;\n        candidateNodeMap[edge.source].degree++;\n        candidateNodeMap[edge.target].degree++;\n        candidateNodeMap[edge.source].outDegree++;\n        candidateNodeMap[edge.target].inDegree++;\n      }\n    }); // prune：若有一个 edgeLabel 在 candidateGraph 上的个数少于 pattern，去除该图\n\n    var pattenrEdgeLabelNum = Object.keys(patternEdgeLabelMap).length;\n    var prunedByEdgeLabel = false;\n\n    for (var e = 0; e < pattenrEdgeLabelNum; e++) {\n      var label_1 = Object.keys(patternEdgeLabelMap)[e];\n\n      if (!edgeLabelCountMap[label_1] || edgeLabelCountMap[label_1] < patternEdgeLabelMap[label_1].length) {\n        prunedByEdgeLabel = true;\n        break;\n      }\n    }\n\n    if (prunedByEdgeLabel) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // 遍历 candidateEdges，进行边的筛选\n\n\n    var candidateEdgeNum = candidateEdges.length; // prune：若边数过少，去除该图\n\n    if (candidateEdgeNum < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"break\";\n    }\n\n    var candidateGraphInvalid = false;\n\n    var _loop_5 = function _loop_5(e) {\n      var edge = candidateEdges[e];\n      var edgeLabel = edge[edgeLabelProp];\n      var patternEdgesWithLabel = patternEdgeLabelMap[edgeLabel]; // prune 1: 若边的 label 不存在于 pattern 边 label 中，去除该边\n\n      if (!patternEdgesWithLabel || !patternEdgesWithLabel.length) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      } // prune 2: 若边的 label +两端 label 的三元组关系不能在 pattern 中找到，去除该边\n\n\n      var sourceLabel = candidateNodeMap[edge.source].node[nodeLabelProp];\n      var targetLabel = candidateNodeMap[edge.target].node[nodeLabelProp];\n      var edgeMatched = false;\n      patternEdgesWithLabel.forEach(function (patternEdge) {\n        var patternSource = patternNodeMap[patternEdge.source].node;\n        var patternTarget = patternNodeMap[patternEdge.target].node;\n        if (patternSource[nodeLabelProp] === sourceLabel && patternTarget[nodeLabelProp] === targetLabel) edgeMatched = true;\n        if (!directed && patternSource[nodeLabelProp] === targetLabel && patternTarget[nodeLabelProp] === sourceLabel) edgeMatched = true;\n      });\n\n      if (!edgeMatched) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      }\n    };\n\n    for (var e = candidateEdgeNum - 1; e >= 0; e--) {\n      var state_2 = _loop_5(e);\n\n      if (state_2 === \"break\") break;\n    } // prune2: 删除边的过程中，发现边数过少/边 label 数过少时，去除该图\n\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    candidateGraph.edges = candidateEdges;\n    var lengthsToCandidate = (0, _dijkstra.default)(candidateGraph, candidateGraph.nodes[0].id, false).length;\n    Object.keys(lengthsToCandidate).reverse().forEach(function (targetId) {\n      if (targetId === candidateGraph.nodes[0].id || candidateGraphInvalid) return; // prune4: 通过上述裁剪，可能导致该邻居子图变为不连通。裁剪掉目前在这个邻居子图中和 candidate（第一个节点）不连通的节点\n\n      if (lengthsToCandidate[targetId] === Infinity) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n        return;\n      } // prune5: 经过边裁剪后，可能又出现了最短路径过长的节点 （比 pattern 中同 label 的节点到 beginNode 最大最短距离远），删去这些节点\n\n\n      var nLabel = nodeMap[targetId].node[nodeLabelProp];\n\n      if (!undirectedLengthsToBeginPNodeLabelMap[nLabel] || !undirectedLengthsToBeginPNodeLabelMap[nLabel].length || lengthsToCandidate[targetId] > undirectedLengthsToBeginPNodeLabelMap[nLabel][undirectedLengthsToBeginPNodeLabelMap[nLabel].length - 1]) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n      }\n    });\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    var degreeChanged = true;\n    var loopCount = 0;\n\n    while (degreeChanged && !candidateGraphInvalid) {\n      degreeChanged = false; // candidate 度数不足，删去该图\n\n      var condition = directed ? candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree || candidateNodeMap[candidate.id].inDegree < patternNodeMap[beginPNode.id].inDegree || candidateNodeMap[candidate.id].outDegree < patternNodeMap[beginPNode.id].outDegree : candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree;\n\n      if (condition) {\n        candidateGraphInvalid = true;\n        break;\n      } // candidate label 个数不足，删去该图\n\n\n      if (candidateNodeLabelCountMap[candidate[nodeLabelProp]] < patternNodeLabelMap[candidate[nodeLabelProp]].length) {\n        candidateGraphInvalid = true;\n        break;\n      } // prune6：去除度数过小的节点\n\n\n      var currentCandidateNodeNum = candidateGraph.nodes.length;\n\n      for (var o = currentCandidateNodeNum - 1; o >= 0; o--) {\n        var cgNode = candidateGraph.nodes[o];\n        var nodeDegree = candidateNodeMap[cgNode.id].degree;\n        var nodeInDegree = candidateNodeMap[cgNode.id].inDegree;\n        var nodeOutDegree = candidateNodeMap[cgNode.id].outDegree;\n        var cNodeLabel = cgNode[nodeLabelProp];\n\n        var _e = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, cNodeLabel, patternNodeMap, patternNodeLabelMap),\n            minPatternNodeLabelDegree = _e.minPatternNodeLabelDegree,\n            minPatternNodeLabelInDegree = _e.minPatternNodeLabelInDegree,\n            minPatternNodeLabelOutDegree = _e.minPatternNodeLabelOutDegree;\n\n        var deleteCondition = directed ? nodeDegree < minPatternNodeLabelDegree || nodeInDegree < minPatternNodeLabelInDegree || nodeOutDegree < minPatternNodeLabelOutDegree : nodeDegree < minPatternNodeLabelDegree;\n\n        if (deleteCondition) {\n          candidateNodeLabelCountMap[cgNode[nodeLabelProp]]--; // 节点 label 个数不足\n\n          if (candidateNodeLabelCountMap[cgNode[nodeLabelProp]] < patternNodeLabelMap[cgNode[nodeLabelProp]].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          candidateGraph.nodes.splice(o, 1);\n          candidateNodeMap[cgNode.id] = undefined;\n          degreeChanged = true;\n        }\n      }\n\n      if (candidateGraphInvalid || !degreeChanged && loopCount !== 0) break; // 经过 prune5 节点裁剪，删去端点已经不在 candidateGraph 中的边\n\n      candidateEdgeNum = candidateEdges.length;\n\n      for (var y = candidateEdgeNum - 1; y >= 0; y--) {\n        var cedge = candidateEdges[y];\n\n        if (!candidateNodeMap[cedge.source] || !candidateNodeMap[cedge.target]) {\n          candidateEdges.splice(y, 1);\n          var edgeLabel = cedge[edgeLabelProp];\n          edgeLabelCountMap[edgeLabel]--;\n\n          if (candidateNodeMap[cedge.source]) {\n            candidateNodeMap[cedge.source].degree--;\n            candidateNodeMap[cedge.source].outDegree--;\n          }\n\n          if (candidateNodeMap[cedge.target]) {\n            candidateNodeMap[cedge.target].degree--;\n            candidateNodeMap[cedge.target].inDegree--;\n          } // 边 label 数量不足\n\n\n          if (patternEdgeLabelMap[edgeLabel] && edgeLabelCountMap[edgeLabel] < patternEdgeLabelMap[edgeLabel].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          degreeChanged = true;\n        }\n      }\n\n      loopCount++;\n    }\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // prune: 若节点/边数过少，节点/边 label 过少，去掉这个图\n\n\n    if (candidateGraphInvalid || candidateGraph.nodes.length < pattern.nodes.length || candidateEdges.length < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n  };\n\n  for (var i = candidateGraphNum - 1; i >= 0; i--) {\n    var state_1 = _loop_2(i);\n\n    if (state_1 === \"break\") break;\n  } // 此时已经生成的多个 candidateGraphs，可能有重复\n  // console.log(\n  //   \"----- stage5: going to splice dulplicated candidate graphs -------\"\n  // );\n  // 删去 candidateGraphs 中一模一样的子图，通过边的 node-node-edgeLabel 作为 key，这类边个数作为 value，进行匹配\n\n\n  var currentLength = candidateGraphs.length;\n\n  var _loop_3 = function _loop_3(i) {\n    var cg1 = candidateGraphs[i];\n    var cg1EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n    cg1.edges.forEach(function (edge) {\n      var key = \"\".concat(edge.source, \"-\").concat(edge.target, \"-\").concat(edge.label);\n      if (!cg1EdgeMap[key]) cg1EdgeMap[key] = 1;else cg1EdgeMap[key]++;\n    });\n\n    var _loop_6 = function _loop_6(j) {\n      var cg2 = candidateGraphs[j];\n      var cg2EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n      cg2.edges.forEach(function (edge) {\n        var key = \"\".concat(edge.source, \"-\").concat(edge.target, \"-\").concat(edge.label);\n        if (!cg2EdgeMap[key]) cg2EdgeMap[key] = 1;else cg2EdgeMap[key]++;\n      });\n      var same = true;\n\n      if (Object.keys(cg2EdgeMap).length !== Object.keys(cg1EdgeMap).length) {\n        same = false;\n      } else {\n        Object.keys(cg1EdgeMap).forEach(function (key) {\n          if (cg2EdgeMap[key] !== cg1EdgeMap[key]) same = false;\n        });\n      }\n\n      if (same) {\n        candidateGraphs.splice(j, 1);\n      }\n    };\n\n    for (var j = currentLength - 1; j > i; j--) {\n      _loop_6(j);\n    }\n\n    currentLength = candidateGraphs.length;\n  };\n\n  for (var i = 0; i <= currentLength - 1; i++) {\n    _loop_3(i);\n  }\n\n  return candidateGraphs;\n};\n\nvar _default = GADDI;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1159,"column":0},"generated":{"line":1159,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1160,"column":0},"generated":{"line":1160,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1161,"column":0},"generated":{"line":1161,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1162,"column":0},"generated":{"line":1162,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1163,"column":0},"generated":{"line":1163,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1164,"column":0},"generated":{"line":1164,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1165,"column":0},"generated":{"line":1165,"column":0}},{"source":"node_modules/@antv/algorithm/lib/gaddi.js","original":{"line":1166,"column":0},"generated":{"line":1166,"column":0}}],"sources":{"node_modules/@antv/algorithm/lib/gaddi.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _floydWarshall = _interopRequireDefault(require(\"./floydWarshall\"));\n\nvar _gSpan = _interopRequireDefault(require(\"./gSpan/gSpan\"));\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * 为 graphData 中每个节点生成邻居单元数组\n * @param graphData\n * @param spm\n * @param nodeLabelProp\n * @param k k-近邻\n */\nvar findKNeighborUnits = function findKNeighborUnits(graphData, spm, nodeLabelProp, k) {\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (k === void 0) {\n    k = 2;\n  }\n\n  var units = [];\n  var nodes = graphData.nodes;\n  spm.forEach(function (row, i) {\n    units.push(findKNeighborUnit(nodes, row, i, nodeLabelProp, k));\n  });\n  return units;\n};\n\nvar findKNeighborUnit = function findKNeighborUnit(nodes, row, i, nodeLabelProp, k) {\n  var unitNodeIdxs = [i];\n  var neighbors = [];\n  var labelCountMap = {};\n  row.forEach(function (v, j) {\n    if (v <= k && i !== j) {\n      unitNodeIdxs.push(j);\n      neighbors.push(nodes[j]);\n      var label = nodes[j][nodeLabelProp];\n      if (!labelCountMap[label]) labelCountMap[label] = {\n        count: 1,\n        dists: [v]\n      };else {\n        labelCountMap[label].count++;\n        labelCountMap[label].dists.push(v);\n      }\n    }\n  }); // 将 labelCountMap 中的 dists 按照从小到大排序，方便后面使用\n\n  Object.keys(labelCountMap).forEach(function (label) {\n    labelCountMap[label].dists = labelCountMap[label].dists.sort(function (a, b) {\n      return a - b;\n    });\n  });\n  return {\n    nodeIdx: i,\n    nodeId: nodes[i].id,\n    nodeIdxs: unitNodeIdxs,\n    neighbors: neighbors,\n    neighborNum: unitNodeIdxs.length - 1,\n    nodeLabelCountMap: labelCountMap\n  };\n};\n/**\n * 随机寻找点对，满足距离小于 k\n * @param k 参数 k，表示 k-近邻\n * @param nodeNum 参数 length\n * @param maxNodePairNum 寻找点对的数量不超过 maxNodePairNum\n * @param spm 最短路径矩阵\n */\n\n\nvar findNodePairsRandomly = function findNodePairsRandomly(k, nodeNum, maxNodePairNum, kNeighborUnits, spm) {\n  // 每个节点需要随机找出的点对数\n  var nodePairNumEachNode = Math.ceil(maxNodePairNum / nodeNum);\n  var nodePairMap = {};\n  var foundNodePairCount = 0; // 遍历节点，为每个节点随机找出 nodePairNumEachNode 个点对，满足距离小于 k。找到的点对数量超过 maxNodePairNum 或所有节点遍历结束时终止\n\n  kNeighborUnits.forEach(function (unit, i) {\n    // 若未达到 nodePairNumEachNode，或循环次数小于最大循环次数(2 * nodeNum)，继续循环\n    var nodePairForICount = 0;\n    var outerLoopCount = 0;\n    var neighbors = unit.nodeIdxs; // the first one is the center node\n\n    var neighborNum = unit.neighborNum - 1;\n\n    while (nodePairForICount < nodePairNumEachNode) {\n      // 另一端节点在节点数组中的的 index\n      var oidx = neighbors[1 + Math.floor(Math.random() * neighborNum)];\n      var innerLoopCount = 0; // 若随机得到的另一端 idx 不符合条件，则继续 random。条件是不是同一个节点、这个点对没有被记录过、距离小于 k\n\n      while (nodePairMap[\"\".concat(i, \"-\").concat(oidx)] || nodePairMap[\"\".concat(oidx, \"-\").concat(i)]) {\n        oidx = Math.floor(Math.random() * nodeNum);\n        innerLoopCount++;\n        if (innerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n      }\n\n      if (innerLoopCount < 2 * nodeNum) {\n        // 未达到最大循环次数，说明找到了合适的另一端\n        nodePairMap[\"\".concat(i, \"-\").concat(oidx)] = {\n          start: i,\n          end: oidx,\n          distance: spm[i][oidx]\n        };\n        nodePairForICount++;\n        foundNodePairCount++; // 如果当前找到的点对数量达到了上限，返回结果\n\n        if (foundNodePairCount >= maxNodePairNum) return nodePairMap;\n      }\n\n      outerLoopCount++;\n      if (outerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n    } // 这个节点没有找到足够 nodePairNumEachNode 的点对。更新 nodePairNumEachNode，让后续节点找更多的点对\n\n\n    if (nodePairForICount < nodePairNumEachNode) {\n      var gap = nodePairNumEachNode - nodePairForICount;\n      nodePairNumEachNode = (nodePairNumEachNode + gap) / (nodeNum - i - 1);\n    }\n  });\n  return nodePairMap;\n};\n/**\n * 计算所有 nodePairMap 中节点对的相交邻居诱导子图\n * @param nodePairMap 节点对 map，key 为 node1.id-node2.id，value 为 { startNodeIdx, endNodeIdx, distance }\n * @param neighborUnits 每个节点的邻居元数组\n * @param graphData 原图数据\n * @param edgeMap 边的 map，方便检索\n * @param cachedInducedGraphMap 缓存的结果，下次进入该函数将继续更新该缓存，若 key 在缓存中存在则不需要重复计算\n */\n\n\nvar getIntersectNeighborInducedGraph = function getIntersectNeighborInducedGraph(nodePairMap, neighborUnits, graphData, cachedInducedGraphMap) {\n  var nodes = graphData.nodes;\n  if (!cachedInducedGraphMap) cachedInducedGraphMap = {};\n  Object.keys(nodePairMap).forEach(function (key) {\n    var _a, _b;\n\n    if (cachedInducedGraphMap && cachedInducedGraphMap[key]) return;\n    cachedInducedGraphMap[key] = {\n      nodes: [],\n      edges: []\n    };\n    var pair = nodePairMap[key];\n    var startUnitNodeIds = (_a = neighborUnits[pair.start]) === null || _a === void 0 ? void 0 : _a.nodeIdxs;\n    var endUnitNodeIds = (_b = neighborUnits[pair.end]) === null || _b === void 0 ? void 0 : _b.nodeIdxs;\n    if (!startUnitNodeIds || !endUnitNodeIds) return; // 不存在邻元，返回空图\n\n    var endSet = new Set(endUnitNodeIds);\n    var intersect = startUnitNodeIds.filter(function (x) {\n      return endSet.has(x);\n    }); // 可能会爆栈（在 1580 + 6 nodes full-connected 时出现）\n\n    if (!intersect || !intersect.length) return; // 没有交集，返回空图\n\n    var intersectIdMap = {};\n    var intersectLength = intersect.length;\n\n    for (var i = 0; i < intersectLength; i++) {\n      var node = nodes[intersect[i]];\n      cachedInducedGraphMap[key].nodes.push(node); // 将交集中的点加入诱导子图\n\n      intersectIdMap[node.id] = true;\n    } // 遍历所有边数据，如果边的两端都在交集中，将该边加入诱导子图\n\n\n    graphData.edges.forEach(function (edge) {\n      if (intersectIdMap[edge.source] && intersectIdMap[edge.target]) cachedInducedGraphMap[key].edges.push(edge);\n    });\n  });\n  return cachedInducedGraphMap;\n};\n/**\n * 计算 strcutre 在 graph 上的匹配数量\n * @param graph 图数据\n * @param structure 目前支持只有两个节点一条边的最简单结构\n * @param nodeLabelProp 节点类型字段名\n * @param edgeLabelProp 边类型字段名\n */\n\n\nvar getMatchedCount = function getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp) {\n  var _a, _b;\n\n  var nodeMap = {};\n  graph.nodes.forEach(function (node) {\n    nodeMap[node.id] = node;\n  });\n  var count = 0;\n  if (!((_a = structure === null || structure === void 0 ? void 0 : structure.edges) === null || _a === void 0 ? void 0 : _a.length) || ((_b = structure === null || structure === void 0 ? void 0 : structure.nodes) === null || _b === void 0 ? void 0 : _b.length) < 2) return 0;\n  graph.edges.forEach(function (e) {\n    var sourceLabel = nodeMap[e.source][nodeLabelProp];\n    var targetLabel = nodeMap[e.target][nodeLabelProp];\n    var strNodeLabel1 = structure === null || structure === void 0 ? void 0 : structure.nodes[0][nodeLabelProp];\n    var strNodeLabel2 = structure === null || structure === void 0 ? void 0 : structure.nodes[1][nodeLabelProp];\n    var strEdgeLabel = structure === null || structure === void 0 ? void 0 : structure.edges[0][edgeLabelProp];\n    if (e[edgeLabelProp] !== strEdgeLabel) return;\n\n    if (sourceLabel === strNodeLabel1 && targetLabel === strNodeLabel2 || sourceLabel === strNodeLabel2 && targetLabel === strNodeLabel1) {\n      count++;\n    }\n  });\n  return count;\n};\n/**\n * structures 中寻找最具有代表性的一个。这个结构是使得 matchedCountMap 的分组方式类内间距最小，类间间距最大\n * @param matchedCountMap 每个 structure 分类后的各图匹配数量，格式 { [strcture.idx]: { [interInducedGraphKey]: count } }\n * @param structureNum strcuture 个数，与 matchedCountMap.length 对应\n * @param structures\n */\n\n\nvar findRepresentStructure = function findRepresentStructure(matchedCountMap, structureNum, structures) {\n  var maxOffset = Infinity,\n      representClusterType = 0;\n\n  var _loop_1 = function _loop_1(i) {\n    // 一种分组的 map，key 是 intGraph 的 key，value 是 structures[i] 的匹配个数\n    var countMapI = matchedCountMap[i]; // 按照 value 为该组排序，生成 keys 的数组：\n\n    var sortedGraphKeys = Object.keys(countMapI).sort(function (a, b) {\n      return countMapI[a] - countMapI[b];\n    }); // 共 100 个 graphKeys，将 graphKeys 按顺序分为 groupNum 组\n\n    var groupNum = 10;\n    var clusters = []; // 总共有 groupNum 个项\n\n    sortedGraphKeys.forEach(function (key, j) {\n      if (!clusters[j % groupNum]) clusters[j % groupNum] = {\n        graphs: [],\n        totalCount: 0,\n        aveCount: 0\n      };\n      clusters[j % groupNum].graphs.push(key);\n      clusters[j % groupNum].totalCount += countMapI[key];\n    }); // 计算 cluster 与 cluster 之间的距离 innerDist，每个 cluster 内部的距离 intraDist\n\n    var aveIntraDist = 0; // 该类的类内平均值\n\n    var aveCounts = []; // 类内平均匹配数量，将用于计算类间距离\n\n    clusters.forEach(function (graphsInCluster) {\n      // 类内均值\n      var aveCount = graphsInCluster.totalCount / graphsInCluster.graphs.length;\n      graphsInCluster.aveCount = aveCount;\n      aveCounts.push(aveCount); // 对于每类，计算类内间距平均值\n\n      var aveIntraPerCluster = 0;\n      var graphsNum = graphsInCluster.length;\n      graphsInCluster.graphs.forEach(function (graphKey1, j) {\n        var graph1Count = countMapI[graphKey1];\n        graphsInCluster.graphs.forEach(function (graphKey2, k) {\n          if (j === k) return;\n          aveIntraPerCluster += Math.abs(graph1Count - countMapI[graphKey2]);\n        });\n      });\n      aveIntraPerCluster /= graphsNum * (graphsNum - 1) / 2;\n      aveIntraDist += aveIntraPerCluster;\n    });\n    aveIntraDist /= clusters.length; // 用类内均值计算类间距\n\n    var aveInterDist = 0; // 类间间距平均值\n\n    aveCounts.forEach(function (aveCount1, j) {\n      aveCounts.forEach(function (aveCount2, k) {\n        if (j === k) return;\n        aveInterDist += Math.abs(aveCount1 - aveCount2);\n      });\n      aveInterDist /= aveCounts.length * (aveCounts.length - 1) / 2;\n    }); // 寻找 (类间间距均值-类内间距均值) 最大的一种分组方式（对应的 structure 就是最终要找的唯一 DS(G)）\n\n    var offset = aveInterDist - aveIntraDist;\n\n    if (maxOffset < offset) {\n      maxOffset = offset;\n      representClusterType = i;\n    }\n  };\n\n  for (var i = 0; i < structureNum; i++) {\n    _loop_1(i);\n  }\n\n  return {\n    structure: structures[representClusterType],\n    structureCountMap: matchedCountMap[representClusterType]\n  };\n};\n\nvar getNodeMaps = function getNodeMaps(nodes, nodeLabelProp) {\n  var nodeMap = {},\n      nodeLabelMap = {};\n  nodes.forEach(function (node, i) {\n    nodeMap[node.id] = {\n      idx: i,\n      node: node,\n      degree: 0,\n      inDegree: 0,\n      outDegree: 0\n    };\n    var label = node[nodeLabelProp];\n    if (!nodeLabelMap[label]) nodeLabelMap[label] = [];\n    nodeLabelMap[label].push(node);\n  });\n  return {\n    nodeMap: nodeMap,\n    nodeLabelMap: nodeLabelMap\n  };\n};\n\nvar getEdgeMaps = function getEdgeMaps(edges, edgeLabelProp, nodeMap) {\n  var edgeMap = {},\n      edgeLabelMap = {};\n  edges.forEach(function (edge, i) {\n    edgeMap[\"\".concat(_util.uniqueId)] = {\n      idx: i,\n      edge: edge\n    };\n    var label = edge[edgeLabelProp];\n    if (!edgeLabelMap[label]) edgeLabelMap[label] = [];\n    edgeLabelMap[label].push(edge);\n    var sourceNode = nodeMap[edge.source];\n\n    if (sourceNode) {\n      sourceNode.degree++;\n      sourceNode.outDegree++;\n    }\n\n    var targetNode = nodeMap[edge.target];\n\n    if (targetNode) {\n      targetNode.degree++;\n      targetNode.inDegree++;\n    }\n  });\n  return {\n    edgeMap: edgeMap,\n    edgeLabelMap: edgeLabelMap\n  };\n};\n/**\n * 输出最短路径的 map，key 为 sourceNode.id-targetNode.id，value 为这两个节点的最短路径长度\n * @param nodes\n * @param spm\n * @param directed\n */\n\n\nvar getSpmMap = function getSpmMap(nodes, spm, directed) {\n  var length = spm.length;\n  var map = {};\n  spm.forEach(function (row, i) {\n    var start = directed ? 0 : i + 1;\n    var iId = nodes[i].id;\n\n    for (var j = start; j < length; j++) {\n      if (i === j) continue;\n      var jId = nodes[j].id;\n      var dist = row[j];\n      map[\"\".concat(iId, \"-\").concat(jId)] = dist;\n      if (!directed) map[\"\".concat(jId, \"-\").concat(iId)] = dist;\n    }\n  });\n  return map;\n};\n/**\n * 计算一对节点（node1，node2）的 NDS 距离\n * @param graph 原图数据\n * @param node1\n * @param node2\n */\n\n\nvar getNDSDist = function getNDSDist(graph, node1, node2, nodeMap, spDist, kNeighborUnits, structure, nodeLabelProp, edgeLabelProp, cachedNDSMap, cachedInterInducedGraph) {\n  var _a;\n\n  var key = \"\".concat(node1.id, \"-\").concat(node2.id);\n  if (cachedNDSMap && cachedNDSMap[key]) return cachedNDSMap[key];\n  var interInducedGraph = cachedInterInducedGraph ? cachedInterInducedGraph[key] : undefined; // 若没有缓存相交邻居诱导子图，计算\n\n  if (!interInducedGraph) {\n    var pairMap = (_a = {}, _a[key] = {\n      start: nodeMap[node1.id].idx,\n      end: nodeMap[node2.id].idx,\n      distance: spDist\n    }, _a);\n    cachedInterInducedGraph = getIntersectNeighborInducedGraph(pairMap, kNeighborUnits, graph, cachedInterInducedGraph);\n    interInducedGraph = cachedInterInducedGraph[key];\n  }\n\n  return getMatchedCount(interInducedGraph, structure, nodeLabelProp, edgeLabelProp);\n};\n/**\n * 计算 pattern 上绩点的度数并存储到 minPatternNodeLabelDegreeMap\n */\n\n\nvar stashPatternNodeLabelDegreeMap = function stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap) {\n  var _a, _b, _c;\n\n  var minPatternNodeLabelDegree = (_a = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _a === void 0 ? void 0 : _a.degree;\n  var minPatternNodeLabelInDegree = (_b = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _b === void 0 ? void 0 : _b.inDegree;\n  var minPatternNodeLabelOutDegree = (_c = minPatternNodeLabelDegreeMap[neighborLabel]) === null || _c === void 0 ? void 0 : _c.outDegree;\n\n  if (minPatternNodeLabelDegreeMap[neighborLabel] === undefined) {\n    minPatternNodeLabelDegree = Infinity;\n    minPatternNodeLabelInDegree = Infinity;\n    minPatternNodeLabelOutDegree = Infinity;\n    patternNodeLabelMap[neighborLabel].forEach(function (patternNodeWithLabel) {\n      var patternNodeDegree = patternNodeMap[patternNodeWithLabel.id].degree;\n      if (minPatternNodeLabelDegree > patternNodeDegree) minPatternNodeLabelDegree = patternNodeDegree;\n      var patternNodeInDegree = patternNodeMap[patternNodeWithLabel.id].inDegree;\n      if (minPatternNodeLabelInDegree > patternNodeInDegree) minPatternNodeLabelInDegree = patternNodeInDegree;\n      var patternNodeOutDegree = patternNodeMap[patternNodeWithLabel.id].outDegree;\n      if (minPatternNodeLabelOutDegree > patternNodeOutDegree) minPatternNodeLabelOutDegree = patternNodeOutDegree;\n    });\n    minPatternNodeLabelDegreeMap[neighborLabel] = {\n      degree: minPatternNodeLabelDegree,\n      inDegree: minPatternNodeLabelInDegree,\n      outDegree: minPatternNodeLabelOutDegree\n    };\n  }\n\n  return {\n    minPatternNodeLabelDegree: minPatternNodeLabelDegree,\n    minPatternNodeLabelInDegree: minPatternNodeLabelInDegree,\n    minPatternNodeLabelOutDegree: minPatternNodeLabelOutDegree\n  };\n};\n/**\n * GADDI 模式匹配\n * @param graphData 原图数据\n * @param pattern 搜索图（需要在原图上搜索的模式）数据\n * @param directed 是否计算有向图，默认 false\n * @param k 参数 k，表示 k-近邻\n * @param length 参数 length\n * @param nodeLabelProp 节点数据中代表节点标签（分类信息）的属性名。默认为 cluster\n * @param edgeLabelProp 边数据中代表边标签（分类信息）的属性名。默认为 cluster\n */\n\n\nvar GADDI = function GADDI(graphData, pattern, directed, k, length, nodeLabelProp, edgeLabelProp) {\n  var _a;\n\n  if (directed === void 0) {\n    directed = false;\n  }\n\n  if (nodeLabelProp === void 0) {\n    nodeLabelProp = 'cluster';\n  }\n\n  if (edgeLabelProp === void 0) {\n    edgeLabelProp = 'cluster';\n  }\n\n  if (!graphData || !graphData.nodes) return; // 分为三步：\n  // 0. 预计算：节点/边数，邻接矩阵、最短路径矩阵\n  // 1. 处理原图 graphData。再分为 1~5 小步\n  // 2. 匹配\n  // console.log(\"----- stage-pre: preprocessing -------\");\n  // -------- 第零步，预计算：节点/边数，邻接矩阵、最短路径矩阵-------\n\n  var nodeNum = graphData.nodes.length;\n  if (!nodeNum) return; // console.log(\"----- stage-pre.1: calc shortest path matrix for graph -------\");\n\n  var spm = (0, _floydWarshall.default)(graphData, directed); // console.log(\n  //   \"----- stage-pre.2: calc shortest path matrix for pattern -------\"\n  // );\n\n  var patternSpm = (0, _floydWarshall.default)(pattern, directed); // console.log(\n  //   \"----- stage-pre.3: calc shortest path matrix map for graph -------\"\n  // );\n\n  var spmMap = getSpmMap(graphData.nodes, spm, directed); // console.log(\n  //   \"----- stage-pre.4: calc shortest path matrix map for pattern -------\"\n  // );\n\n  var patternSpmMap = getSpmMap(pattern.nodes, patternSpm, directed); // console.log(\"----- stage-pre.5: establish maps -------\");\n  // 节点的 map，以 id 为 id 映射，方便后续快速检索\n\n  var _b = getNodeMaps(graphData.nodes, nodeLabelProp),\n      nodeMap = _b.nodeMap,\n      nodeLabelMap = _b.nodeLabelMap;\n\n  var _c = getNodeMaps(pattern.nodes, nodeLabelProp),\n      patternNodeMap = _c.nodeMap,\n      patternNodeLabelMap = _c.nodeLabelMap; // 计算节点度数\n\n\n  getEdgeMaps(graphData.edges, edgeLabelProp, nodeMap);\n  var patternEdgeLabelMap = getEdgeMaps(pattern.edges, edgeLabelProp, patternNodeMap).edgeLabelMap; // 若未指定 length，自动计算 pattern 半径（最短路径最大值）\n\n  var patternSpmSpread = [];\n  patternSpm === null || patternSpm === void 0 ? void 0 : patternSpm.forEach(function (row) {\n    patternSpmSpread = patternSpmSpread.concat(row);\n  });\n  if (!length) length = Math.max.apply(Math, (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], patternSpmSpread, false), [2], false));\n  if (!k) k = length; // console.log(\"params\", directed, length, k);\n  // console.log(\"----- stage-pre.6: calc k neighbor units -------\");\n  // 计算每个节点的 k 邻元集合\n\n  var kNeighborUnits = findKNeighborUnits(graphData, spm, nodeLabelProp, k);\n  var patternKNeighborUnits = findKNeighborUnits(pattern, patternSpm, nodeLabelProp, k); // console.log(\n  //   \"----- stage0: going to processing graph and find intersect neighbor induced graphs -------\"\n  // );\n  // console.log(\"----- stage0.1: going to select random node pairs -------\");\n  // -------- 第一步，处理原图 graphData-------\n  // 1.1. 随机选择最多 100 个点对，满足距离小于 Length 和 k\n  // 当 graphData 少于 20 个节点，则不能找出 100 个点对，只找出不多于 n(n-1)/2 个点对\n\n  var maxNodePairNum = Math.min(100, nodeNum * (nodeNum - 1) / 2);\n  var nodePairsMap = findNodePairsRandomly(k, nodeNum, maxNodePairNum, kNeighborUnits, spm); // console.log(\n  //   \"----- stage0.2: going to calculate intersect neighbor induced graphs -------\"\n  // );\n  // 1.2. 生成上面节点对的相应相交邻居诱导子图。格式为 {'beginNodeIdx-endNodeIdx': {nodes: [], edges: []}}\n\n  var intGMap = getIntersectNeighborInducedGraph(nodePairsMap, kNeighborUnits, graphData); // 1.3. 使用 gSpan 算法（frequent graph mining）计算 ISIntG 的前 10 个频率最高的子结构（3-4条边）\n\n  var top = 10,\n      minSupport = 1,\n      minNodeNum = 1,\n      maxNodeNum = 4;\n  var params = {\n    graphs: intGMap,\n    nodeLabelProp: nodeLabelProp,\n    edgeLabelProp: edgeLabelProp,\n    minSupport: minSupport,\n    minNodeNum: minNodeNum,\n    maxNodeNum: maxNodeNum,\n    directed: directed\n  }; // console.log(\n  //   \"----- stage1: (gSpan) going to find frequent structure dsG -------\"\n  // );\n  // console.log(\"----- stage1.1: going to run gSpan -------\");\n  // 暂时假设生成的 sub structure 都只有一条边\n\n  var freStructures = (0, _gSpan.default)(params).slice(0, top); // structureNum 可能小于 top\n\n  var structureNum = freStructures.length; // 1.4. 计算上述 10 个子结构在 intGMap 中每个诱导子图的匹配个数\n\n  var matchedCountMap = [];\n  freStructures.forEach(function (structure, i) {\n    matchedCountMap[i] = {};\n    Object.keys(intGMap).forEach(function (key) {\n      var graph = intGMap[key];\n      var subStructureCount = getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp);\n      matchedCountMap[i][key] = subStructureCount;\n    });\n  }); // console.log(\n  //   \"----- stage1.1: going to find the most represent strucutre -------\"\n  // );\n  // 1.5. 对于每个子结构，根据匹配个数为 intGMap 中的诱导子图分组，生成 structureNum 种分组\n  // 计算每种分组的类间距和类内间距，找到类间距最大、类内间距最小的一种分组，这种分组对应的子结构被选为唯一代表性子结构 DS(G)\n\n  var _d = findRepresentStructure(matchedCountMap, structureNum, freStructures),\n      dsG = _d.structure,\n      ndsDist = _d.structureCountMap; // -------- 第二步，匹配-------\n  // 2.1 找到从 Q 中的一个节点作为起始节点，寻找 G 中的匹配。这个其实节点的标签可以在 G 中找到最多的节点\n\n\n  var beginPNode = pattern.nodes[0],\n      candidates = [],\n      label = (_a = pattern.nodes[0]) === null || _a === void 0 ? void 0 : _a[nodeLabelProp],\n      maxNodeNumWithSameLabel = -Infinity;\n  pattern.nodes.forEach(function (node) {\n    var pLabel = node[nodeLabelProp];\n    var nodesWithSameLabel = nodeLabelMap[pLabel];\n\n    if ((nodesWithSameLabel === null || nodesWithSameLabel === void 0 ? void 0 : nodesWithSameLabel.length) > maxNodeNumWithSameLabel) {\n      maxNodeNumWithSameLabel = nodesWithSameLabel.length;\n      candidates = nodesWithSameLabel;\n      label = pLabel;\n      beginPNode = node;\n    }\n  }); // console.log(\"----- stage2: going to find candidates -------\");\n  // 全局缓存，避免重复计算\n\n  var minPatternNodeLabelDegreeMap = {}; // key 是 label，value 是该 label 节点的最小度数\n\n  var patternIntGraphMap = {},\n      patternNDSDist = {},\n      // key 为 node.id-node.id\n  patternNDSDistMap = {}; // key 为 node.id-label2，value nds距离值数组（按从大到小排序，无需关心具体对应哪个 node2）\n  // 2.2.2 对于 Q 中的另一个标签的 k 个节点，计算它们到 node 的最短路径以及 NDS 距离\n\n  var patternSpDist = {};\n  var patternSpDistBack = {};\n  Object.keys(patternNodeLabelMap).forEach(function (label2, j) {\n    patternSpDist[label2] = [];\n\n    if (directed) {\n      patternSpDistBack[label2] = [];\n    }\n\n    var maxDist = -Infinity;\n    var patternNodesWithLabel2 = patternNodeLabelMap[label2];\n    var patternNodePairMap = {};\n    patternNodesWithLabel2.forEach(function (nodeWithLabel2) {\n      var dist = patternSpmMap[\"\".concat(beginPNode.id, \"-\").concat(nodeWithLabel2.id)];\n      dist && patternSpDist[label2].push(dist);\n      if (maxDist < dist) maxDist = dist;\n      patternNodePairMap[\"\".concat(beginPNode.id, \"-\").concat(nodeWithLabel2.id)] = {\n        start: 0,\n        end: patternNodeMap[nodeWithLabel2.id].idx,\n        distance: dist\n      };\n\n      if (directed) {\n        var distBack = patternSpmMap[\"\".concat(nodeWithLabel2.id, \"-\").concat(beginPNode.id)];\n        distBack && patternSpDistBack[label2].push(distBack);\n      }\n    }); // spDist[label2] 按照从小到大排序\n\n    patternSpDist[label2] = patternSpDist[label2].sort(function (a, b) {\n      return a - b;\n    });\n    if (directed) patternSpDistBack[label2] = patternSpDistBack[label2].sort(function (a, b) {\n      return a - b;\n    }); // 计算 Q 中所有 label2 节点到 beginPNode 的 NDS 距离\n    // 所有 label2 节点到 beginPNode 的邻居相交诱导子图：\n    // key: node1.id-node2.id\n\n    patternIntGraphMap = getIntersectNeighborInducedGraph(patternNodePairMap, patternKNeighborUnits, pattern, patternIntGraphMap); // pattern 中 beginNode 到当前 label2 节点 的 NDS 距离（数组，无需关心具体对应到哪个节点）\n\n    var currentPatternNDSDistArray = [];\n    Object.keys(patternNodePairMap).forEach(function (key) {\n      if (patternNDSDist[key]) {\n        currentPatternNDSDistArray.push(patternNDSDist[key]);\n        return; // 缓存过则不需要再次计算\n      }\n\n      var patternIntGraph = patternIntGraphMap[key];\n      patternNDSDist[key] = getMatchedCount(patternIntGraph, dsG, nodeLabelProp, edgeLabelProp);\n      currentPatternNDSDistArray.push(patternNDSDist[key]);\n    }); // 根据值为 currentPatternNDSDist 从大到小排序\n\n    currentPatternNDSDistArray = currentPatternNDSDistArray.sort(function (a, b) {\n      return b - a;\n    });\n    patternNDSDistMap[\"\".concat(beginPNode.id, \"-\").concat(label2)] = currentPatternNDSDistArray;\n    if (label2 === label) return;\n    var candidatesNum = (candidates === null || candidates === void 0 ? void 0 : candidates.length) || 0;\n\n    var _loop_4 = function _loop_4(m) {\n      var cNode = candidates[m]; // prune1：若 candidates 中节点 cNode 的 kNeighborUnits 中标签为 label2 的节点个数少于 pattern 中 label2 个数，删去它\n\n      var graphNeighborUnit = kNeighborUnits[nodeMap[cNode.id].idx];\n      var graphNeighborUnitCountMap = graphNeighborUnit.nodeLabelCountMap[label2];\n      var patternLabel2Num = patternNodeLabelMap[label2].length;\n\n      if (!graphNeighborUnitCountMap || graphNeighborUnitCountMap.count < patternLabel2Num) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune2：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点最短路径大于 patternSpDist[label2]，删去它\n      // (prune2 规则即：candidate 相关的最短路径的最大 spDist[label2].length 个，按照大小顺序依次和 patternSpDist[label2] 中的值比较，只要遇到一个是 G > Q 的，就删去这个 candidate)\n\n\n      var prune2Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (graphNeighborUnitCountMap.dists[n] > patternSpDist[label2][n]) {\n          prune2Invalid = true;\n          break;\n        }\n      }\n\n      if (prune2Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      } // prune3：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点 NDS 距离小于 patternNDSDist[beginNode.id-label2]，删去它\n      // TODO：prune3，currentPatternNDSDistArray 与 currentNDSDist 的比较\n      // 计算 G 中所有 label2 节点到 cNode 的 NDS 距离\n      // 所有 label2 节点到 cNode 的邻居相交诱导子图：\n\n\n      var cNodePairMap = {};\n      graphNeighborUnit.neighbors.forEach(function (neighborNode) {\n        var dist = spmMap[\"\".concat(cNode.id, \"-\").concat(neighborNode.id)];\n        cNodePairMap[\"\".concat(cNode.id, \"-\").concat(neighborNode.id)] = {\n          start: nodeMap[cNode.id].idx,\n          end: nodeMap[neighborNode.id].idx,\n          distance: dist\n        };\n      }); // 更新 intGMap\n\n      intGMap = getIntersectNeighborInducedGraph(cNodePairMap, kNeighborUnits, graphData, intGMap); // candidate 到它周围 label2 节点的 NDS 距离, key 是 node.id-node.id\n\n      var currentNDSDistArray = [];\n      Object.keys(cNodePairMap).forEach(function (key) {\n        if (ndsDist[key]) {\n          currentNDSDistArray.push(ndsDist[key]);\n          return; // 缓存过则不需要再次计算\n        }\n\n        var intGraph = intGMap[key];\n        ndsDist[key] = getMatchedCount(intGraph, dsG, nodeLabelProp, edgeLabelProp);\n        currentNDSDistArray.push(ndsDist[key]);\n      }); // 根据值为 currentNDSDistArray 从大到小排序\n\n      currentNDSDistArray = currentNDSDistArray.sort(function (a, b) {\n        return b - a;\n      });\n      var prune3Invalid = false;\n\n      for (var n = 0; n < patternLabel2Num; n++) {\n        if (currentNDSDistArray[n] < currentPatternNDSDistArray[n]) {\n          prune3Invalid = true;\n          break;\n        }\n      }\n\n      if (prune3Invalid) {\n        candidates.splice(m, 1);\n        return \"continue\";\n      }\n    };\n\n    for (var m = candidatesNum - 1; m >= 0; m--) {\n      _loop_4(m);\n    }\n  });\n  var candidateGraphs = []; // console.log(\n  //   \"----- stage3: going to splice neighbors for each candidate graph -------\"\n  // );\n  // candidates 经过筛选后，以每个 candidate 为中心，生成 Length-neighbor 的邻居诱导子图\n  // 并在诱导子图中去除不可能在 Q 上找到匹配的点：在 Q 上不存在的 label，其他 label 到 candidate 的最大最短距离符合 Q、NDS 距离符合 Q\n\n  candidates === null || candidates === void 0 ? void 0 : candidates.forEach(function (candidate) {\n    var nodeIdx = nodeMap[candidate.id].idx;\n    var lengthNeighborUnit = findKNeighborUnit(graphData.nodes, spm[nodeIdx], nodeIdx, nodeLabelProp, length);\n    var neighborNodes = lengthNeighborUnit.neighbors; // 删除不可能找到匹配的邻居点\n\n    var neighborNum = neighborNodes.length;\n    var unmatched = false;\n\n    for (var i = neighborNum - 1; i >= 0; i--) {\n      // 如果通过裁剪，符合条件的节点数量已过少，说明不能匹配这个 candidate 相关的图\n      if (neighborNodes.length + 1 < pattern.nodes.length) {\n        unmatched = true;\n        return;\n      }\n\n      var neighborNode = neighborNodes[i];\n      var neighborLabel = neighborNode[nodeLabelProp]; // prune1: 若该邻居点的 label 不存在于 pattern 中，移除这个点\n\n      if (!patternNodeLabelMap[neighborLabel] || !patternNodeLabelMap[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune2: 若该邻居点到 candidate 的最短路径比和它有相同 label 的节点到 beginPNode 的最大最短路径长度长，移除这个点\n      // prune2.1: 如果没有这个标签到 beginPNode 的距离记录，说明 pattern 上（可能 beginPNode 是这个 label）没有其他这个 label 的节点\n\n\n      if (!patternSpDist[neighborLabel] || !patternSpDist[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      var key = \"\".concat(candidate.id, \"-\").concat(neighborNode.id); // prune2.2\n\n      var distToCandidate = spmMap[key];\n      var idx = patternSpDist[neighborLabel].length - 1;\n      var maxDistWithLabelInPattern = patternSpDist[neighborLabel][idx]; // patternSpDist[neighborLabel] 已经按照从小到大排序\n\n      if (distToCandidate > maxDistWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      if (directed) {\n        var keyBack = \"\".concat(neighborNode.id, \"-\").concat(candidate.id);\n        var distFromCandidate = spmMap[keyBack];\n        idx = patternSpDistBack[neighborLabel].length - 1;\n        var maxBackDistWithLabelInPattern = patternSpDistBack[neighborLabel][idx];\n\n        if (distFromCandidate > maxBackDistWithLabelInPattern) {\n          neighborNodes.splice(i, 1);\n          continue;\n        }\n      } // prune3: 若该邻居点到 candidate 的 NDS 距离比和它有相同 label 的节点到 beginPNode 的最小 NDS 距离小，移除这个点\n\n\n      var ndsToCandidate = ndsDist[key] ? ndsDist[key] : getNDSDist(graphData, candidate, neighborNode, nodeMap, distToCandidate, kNeighborUnits, dsG, nodeLabelProp, edgeLabelProp, ndsDist, intGMap);\n      var patternKey = \"\".concat(beginPNode.id, \"-\").concat(neighborLabel);\n      var minNdsWithLabelInPattern = patternNDSDistMap[patternKey][patternNDSDistMap[patternKey].length - 1]; // patternNDSDist[key] 一定存在\n\n      if (ndsToCandidate < minNdsWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      } // prune4: 若该邻居点的度数小于 pattern 同 label 节点最小度数，删去该点\n\n\n      var _a = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap),\n          minPatternNodeLabelDegree = _a.minPatternNodeLabelDegree,\n          minPatternNodeLabelInDegree = _a.minPatternNodeLabelInDegree,\n          minPatternNodeLabelOutDegree = _a.minPatternNodeLabelOutDegree;\n\n      if (nodeMap[neighborNode.id].degree < minPatternNodeLabelDegree) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n    } // 节点在个数上符合匹配（不少于 pattern 的节点个数），现在筛选相关边\n\n\n    if (!unmatched) {\n      candidateGraphs.push({\n        nodes: [candidate].concat(neighborNodes)\n      });\n    }\n  }); // console.log(\n  //   \"----- stage4: going to splice edges and neighbors for each candidate graph -------\"\n  // );\n\n  var undirectedLengthsToBeginPNode = (0, _dijkstra.default)(pattern, beginPNode.id, false).length;\n  var undirectedLengthsToBeginPNodeLabelMap = {};\n\n  if (directed) {\n    Object.keys(undirectedLengthsToBeginPNode).forEach(function (nodeId) {\n      var nodeLabel = patternNodeMap[nodeId].node[nodeLabelProp];\n      if (!undirectedLengthsToBeginPNodeLabelMap[nodeLabel]) undirectedLengthsToBeginPNodeLabelMap[nodeLabel] = [undirectedLengthsToBeginPNode[nodeId]];else undirectedLengthsToBeginPNodeLabelMap[nodeLabel].push(undirectedLengthsToBeginPNode[nodeId]);\n    });\n    Object.keys(undirectedLengthsToBeginPNodeLabelMap).forEach(function (pLabel) {\n      undirectedLengthsToBeginPNodeLabelMap[pLabel].sort(function (a, b) {\n        return a - b;\n      });\n    });\n  } else {\n    undirectedLengthsToBeginPNodeLabelMap = patternSpDist;\n  } // 现在 candidateGraphs 里面只有节点，进行边的筛选\n\n\n  var candidateGraphNum = candidateGraphs.length;\n\n  var _loop_2 = function _loop_2(i) {\n    var candidateGraph = candidateGraphs[i];\n    var candidate = candidateGraph.nodes[0];\n    var candidateNodeLabelCountMap = {};\n    var candidateNodeMap = {};\n    candidateGraph.nodes.forEach(function (node, q) {\n      candidateNodeMap[node.id] = {\n        idx: q,\n        node: node,\n        degree: 0,\n        inDegree: 0,\n        outDegree: 0\n      };\n      var cNodeLabel = node[nodeLabelProp];\n      if (!candidateNodeLabelCountMap[cNodeLabel]) candidateNodeLabelCountMap[cNodeLabel] = 1;else candidateNodeLabelCountMap[cNodeLabel]++;\n    }); // 根据 candidate 和 neighborNodes 中的节点生成 G 的诱导子图\n    // 即，将 graphData 上两端都在 candidateGraph.nodes 中的边放入 candidateEdges\n\n    var candidateEdges = [];\n    var edgeLabelCountMap = {};\n    graphData.edges.forEach(function (edge) {\n      if (candidateNodeMap[edge.source] && candidateNodeMap[edge.target]) {\n        candidateEdges.push(edge);\n        if (!edgeLabelCountMap[edge[edgeLabelProp]]) edgeLabelCountMap[edge[edgeLabelProp]] = 1;else edgeLabelCountMap[edge[edgeLabelProp]]++;\n        candidateNodeMap[edge.source].degree++;\n        candidateNodeMap[edge.target].degree++;\n        candidateNodeMap[edge.source].outDegree++;\n        candidateNodeMap[edge.target].inDegree++;\n      }\n    }); // prune：若有一个 edgeLabel 在 candidateGraph 上的个数少于 pattern，去除该图\n\n    var pattenrEdgeLabelNum = Object.keys(patternEdgeLabelMap).length;\n    var prunedByEdgeLabel = false;\n\n    for (var e = 0; e < pattenrEdgeLabelNum; e++) {\n      var label_1 = Object.keys(patternEdgeLabelMap)[e];\n\n      if (!edgeLabelCountMap[label_1] || edgeLabelCountMap[label_1] < patternEdgeLabelMap[label_1].length) {\n        prunedByEdgeLabel = true;\n        break;\n      }\n    }\n\n    if (prunedByEdgeLabel) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // 遍历 candidateEdges，进行边的筛选\n\n\n    var candidateEdgeNum = candidateEdges.length; // prune：若边数过少，去除该图\n\n    if (candidateEdgeNum < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"break\";\n    }\n\n    var candidateGraphInvalid = false;\n\n    var _loop_5 = function _loop_5(e) {\n      var edge = candidateEdges[e];\n      var edgeLabel = edge[edgeLabelProp];\n      var patternEdgesWithLabel = patternEdgeLabelMap[edgeLabel]; // prune 1: 若边的 label 不存在于 pattern 边 label 中，去除该边\n\n      if (!patternEdgesWithLabel || !patternEdgesWithLabel.length) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      } // prune 2: 若边的 label +两端 label 的三元组关系不能在 pattern 中找到，去除该边\n\n\n      var sourceLabel = candidateNodeMap[edge.source].node[nodeLabelProp];\n      var targetLabel = candidateNodeMap[edge.target].node[nodeLabelProp];\n      var edgeMatched = false;\n      patternEdgesWithLabel.forEach(function (patternEdge) {\n        var patternSource = patternNodeMap[patternEdge.source].node;\n        var patternTarget = patternNodeMap[patternEdge.target].node;\n        if (patternSource[nodeLabelProp] === sourceLabel && patternTarget[nodeLabelProp] === targetLabel) edgeMatched = true;\n        if (!directed && patternSource[nodeLabelProp] === targetLabel && patternTarget[nodeLabelProp] === sourceLabel) edgeMatched = true;\n      });\n\n      if (!edgeMatched) {\n        edgeLabelCountMap[edgeLabel]--; // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          return \"break\";\n        }\n\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        return \"continue\";\n      }\n    };\n\n    for (var e = candidateEdgeNum - 1; e >= 0; e--) {\n      var state_2 = _loop_5(e);\n\n      if (state_2 === \"break\") break;\n    } // prune2: 删除边的过程中，发现边数过少/边 label 数过少时，去除该图\n\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    candidateGraph.edges = candidateEdges;\n    var lengthsToCandidate = (0, _dijkstra.default)(candidateGraph, candidateGraph.nodes[0].id, false).length;\n    Object.keys(lengthsToCandidate).reverse().forEach(function (targetId) {\n      if (targetId === candidateGraph.nodes[0].id || candidateGraphInvalid) return; // prune4: 通过上述裁剪，可能导致该邻居子图变为不连通。裁剪掉目前在这个邻居子图中和 candidate（第一个节点）不连通的节点\n\n      if (lengthsToCandidate[targetId] === Infinity) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n        return;\n      } // prune5: 经过边裁剪后，可能又出现了最短路径过长的节点 （比 pattern 中同 label 的节点到 beginNode 最大最短距离远），删去这些节点\n\n\n      var nLabel = nodeMap[targetId].node[nodeLabelProp];\n\n      if (!undirectedLengthsToBeginPNodeLabelMap[nLabel] || !undirectedLengthsToBeginPNodeLabelMap[nLabel].length || lengthsToCandidate[targetId] > undirectedLengthsToBeginPNodeLabelMap[nLabel][undirectedLengthsToBeginPNodeLabelMap[nLabel].length - 1]) {\n        var targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n        candidateNodeLabelCountMap[targetNodeLabel]--;\n\n        if (candidateNodeLabelCountMap[targetNodeLabel] < patternNodeLabelMap[targetNodeLabel].length) {\n          candidateGraphInvalid = true;\n          return;\n        }\n\n        var idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n        candidateGraph.nodes.splice(idx, 1);\n        candidateNodeMap[targetId] = undefined;\n      }\n    });\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n\n    var degreeChanged = true;\n    var loopCount = 0;\n\n    while (degreeChanged && !candidateGraphInvalid) {\n      degreeChanged = false; // candidate 度数不足，删去该图\n\n      var condition = directed ? candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree || candidateNodeMap[candidate.id].inDegree < patternNodeMap[beginPNode.id].inDegree || candidateNodeMap[candidate.id].outDegree < patternNodeMap[beginPNode.id].outDegree : candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree;\n\n      if (condition) {\n        candidateGraphInvalid = true;\n        break;\n      } // candidate label 个数不足，删去该图\n\n\n      if (candidateNodeLabelCountMap[candidate[nodeLabelProp]] < patternNodeLabelMap[candidate[nodeLabelProp]].length) {\n        candidateGraphInvalid = true;\n        break;\n      } // prune6：去除度数过小的节点\n\n\n      var currentCandidateNodeNum = candidateGraph.nodes.length;\n\n      for (var o = currentCandidateNodeNum - 1; o >= 0; o--) {\n        var cgNode = candidateGraph.nodes[o];\n        var nodeDegree = candidateNodeMap[cgNode.id].degree;\n        var nodeInDegree = candidateNodeMap[cgNode.id].inDegree;\n        var nodeOutDegree = candidateNodeMap[cgNode.id].outDegree;\n        var cNodeLabel = cgNode[nodeLabelProp];\n\n        var _e = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, cNodeLabel, patternNodeMap, patternNodeLabelMap),\n            minPatternNodeLabelDegree = _e.minPatternNodeLabelDegree,\n            minPatternNodeLabelInDegree = _e.minPatternNodeLabelInDegree,\n            minPatternNodeLabelOutDegree = _e.minPatternNodeLabelOutDegree;\n\n        var deleteCondition = directed ? nodeDegree < minPatternNodeLabelDegree || nodeInDegree < minPatternNodeLabelInDegree || nodeOutDegree < minPatternNodeLabelOutDegree : nodeDegree < minPatternNodeLabelDegree;\n\n        if (deleteCondition) {\n          candidateNodeLabelCountMap[cgNode[nodeLabelProp]]--; // 节点 label 个数不足\n\n          if (candidateNodeLabelCountMap[cgNode[nodeLabelProp]] < patternNodeLabelMap[cgNode[nodeLabelProp]].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          candidateGraph.nodes.splice(o, 1);\n          candidateNodeMap[cgNode.id] = undefined;\n          degreeChanged = true;\n        }\n      }\n\n      if (candidateGraphInvalid || !degreeChanged && loopCount !== 0) break; // 经过 prune5 节点裁剪，删去端点已经不在 candidateGraph 中的边\n\n      candidateEdgeNum = candidateEdges.length;\n\n      for (var y = candidateEdgeNum - 1; y >= 0; y--) {\n        var cedge = candidateEdges[y];\n\n        if (!candidateNodeMap[cedge.source] || !candidateNodeMap[cedge.target]) {\n          candidateEdges.splice(y, 1);\n          var edgeLabel = cedge[edgeLabelProp];\n          edgeLabelCountMap[edgeLabel]--;\n\n          if (candidateNodeMap[cedge.source]) {\n            candidateNodeMap[cedge.source].degree--;\n            candidateNodeMap[cedge.source].outDegree--;\n          }\n\n          if (candidateNodeMap[cedge.target]) {\n            candidateNodeMap[cedge.target].degree--;\n            candidateNodeMap[cedge.target].inDegree--;\n          } // 边 label 数量不足\n\n\n          if (patternEdgeLabelMap[edgeLabel] && edgeLabelCountMap[edgeLabel] < patternEdgeLabelMap[edgeLabel].length) {\n            candidateGraphInvalid = true;\n            break;\n          }\n\n          degreeChanged = true;\n        }\n      }\n\n      loopCount++;\n    }\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    } // prune: 若节点/边数过少，节点/边 label 过少，去掉这个图\n\n\n    if (candidateGraphInvalid || candidateGraph.nodes.length < pattern.nodes.length || candidateEdges.length < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      return \"continue\";\n    }\n  };\n\n  for (var i = candidateGraphNum - 1; i >= 0; i--) {\n    var state_1 = _loop_2(i);\n\n    if (state_1 === \"break\") break;\n  } // 此时已经生成的多个 candidateGraphs，可能有重复\n  // console.log(\n  //   \"----- stage5: going to splice dulplicated candidate graphs -------\"\n  // );\n  // 删去 candidateGraphs 中一模一样的子图，通过边的 node-node-edgeLabel 作为 key，这类边个数作为 value，进行匹配\n\n\n  var currentLength = candidateGraphs.length;\n\n  var _loop_3 = function _loop_3(i) {\n    var cg1 = candidateGraphs[i];\n    var cg1EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n    cg1.edges.forEach(function (edge) {\n      var key = \"\".concat(edge.source, \"-\").concat(edge.target, \"-\").concat(edge.label);\n      if (!cg1EdgeMap[key]) cg1EdgeMap[key] = 1;else cg1EdgeMap[key]++;\n    });\n\n    var _loop_6 = function _loop_6(j) {\n      var cg2 = candidateGraphs[j];\n      var cg2EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n\n      cg2.edges.forEach(function (edge) {\n        var key = \"\".concat(edge.source, \"-\").concat(edge.target, \"-\").concat(edge.label);\n        if (!cg2EdgeMap[key]) cg2EdgeMap[key] = 1;else cg2EdgeMap[key]++;\n      });\n      var same = true;\n\n      if (Object.keys(cg2EdgeMap).length !== Object.keys(cg1EdgeMap).length) {\n        same = false;\n      } else {\n        Object.keys(cg1EdgeMap).forEach(function (key) {\n          if (cg2EdgeMap[key] !== cg1EdgeMap[key]) same = false;\n        });\n      }\n\n      if (same) {\n        candidateGraphs.splice(j, 1);\n      }\n    };\n\n    for (var j = currentLength - 1; j > i; j--) {\n      _loop_6(j);\n    }\n\n    currentLength = candidateGraphs.length;\n  };\n\n  for (var i = 0; i <= currentLength - 1; i++) {\n    _loop_3(i);\n  }\n\n  return candidateGraphs;\n};\n\nvar _default = GADDI;\nexports.default = _default;"},"lineCount":1166}},"error":null,"hash":"d1f06884b01de2ee64551c8937be157d","cacheData":{"env":{}}}