{"id":"node_modules/@antv/algorithm/lib/find-path.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\package.json","includedInParent":true,"mtime":1674179681169},{"name":"./dijkstra","loc":{"line":8,"column":47,"index":185},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\find-path.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\dijkstra.js"},{"name":"./util","loc":{"line":10,"column":20,"index":222},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\find-path.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findShortestPath = exports.findAllPath = void 0;\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = (0, _dijkstra.default)(graphData, start, directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path,\n      allPath = _a.allPath;\n\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\n\nexports.findShortestPath = findShortestPath;\n\nvar findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPath = [];\n  var neighbors = directed ? (0, _util.getNeighbors)(start, edges, 'target') : (0, _util.getNeighbors)(start, edges);\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? (0, _util.getNeighbors)(child, edges, 'target') : (0, _util.getNeighbors)(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n\n  return allPath;\n};\n\nexports.findAllPath = findAllPath;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@antv/algorithm/lib/find-path.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}}],"sources":{"node_modules/@antv/algorithm/lib/find-path.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findShortestPath = exports.findAllPath = void 0;\n\nvar _dijkstra = _interopRequireDefault(require(\"./dijkstra\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar findShortestPath = function findShortestPath(graphData, start, end, directed, weightPropertyName) {\n  var _a = (0, _dijkstra.default)(graphData, start, directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path,\n      allPath = _a.allPath;\n\n  return {\n    length: length[end],\n    path: path[end],\n    allPath: allPath[end]\n  };\n};\n\nexports.findShortestPath = findShortestPath;\n\nvar findAllPath = function findAllPath(graphData, start, end, directed) {\n  var _a;\n\n  if (start === end) return [[start]];\n  var _b = graphData.edges,\n      edges = _b === void 0 ? [] : _b;\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPath = [];\n  var neighbors = directed ? (0, _util.getNeighbors)(start, edges, 'target') : (0, _util.getNeighbors)(start, edges);\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed ? (0, _util.getNeighbors)(child, edges, 'target') : (0, _util.getNeighbors)(child, edges);\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node;\n      });\n      allPath.push(path);\n      var node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n\n  return allPath;\n};\n\nexports.findAllPath = findAllPath;"},"lineCount":78}},"error":null,"hash":"fe1cd520f6f7b74e8453ddab75029892","cacheData":{"env":{}}}