{"id":"node_modules/@antv/layout/lib/layout/forceAtlas2/quadTree.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\forceAtlas2\\quadTree.js.map","includedInParent":true,"mtime":1676178923750},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\forceAtlas2\\quadTree.ts","includedInParent":true,"mtime":1676178924037},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @fileOverview quadTree\n * @author shiwu.wyy@antfin.com\n */\nvar QuadTree = /** @class */ (function () {\n    // each quadtree represents a quadrant and an aggregate body\n    // that represents all bodies inside the quadrant\n    function QuadTree(param) {\n        /**\n         * (aggregated) body in this quad\n         * @type  {object}\n         */\n        this.body = null;\n        /**\n         * tree representing the northwest quadrant\n         * @type  {object}\n         */\n        this.quad = null;\n        this.NW = null;\n        this.NE = null;\n        this.SW = null;\n        this.SE = null;\n        /**\n         * threshold\n         * @type  {number}\n         */\n        this.theta = 0.5;\n        if (param != null)\n            this.quad = param;\n    }\n    // insert a body(node) into the tree\n    QuadTree.prototype.insert = function (bo) {\n        // if this node does not contain a body, put the new body bo here\n        if (this.body == null) {\n            this.body = bo;\n            return;\n        }\n        // internal node\n        if (!this._isExternal()) {\n            // update mass info\n            this.body = this.body.add(bo);\n            // insert body into quadrant\n            this._putBody(bo);\n        }\n        else { // external node\n            // divide this region into four children\n            if (this.quad) {\n                this.NW = new QuadTree(this.quad.NW());\n                this.NE = new QuadTree(this.quad.NE());\n                this.SW = new QuadTree(this.quad.SW());\n                this.SE = new QuadTree(this.quad.SE());\n            }\n            // insert this body and bo\n            this._putBody(this.body);\n            this._putBody(bo);\n            // update the mass info\n            this.body = this.body.add(bo);\n        }\n    };\n    // inserts bo into a quad\n    // tslint:disable-next-line\n    QuadTree.prototype._putBody = function (bo) {\n        if (!this.quad)\n            return;\n        if (bo.in(this.quad.NW()) && this.NW)\n            this.NW.insert(bo);\n        else if (bo.in(this.quad.NE()) && this.NE)\n            this.NE.insert(bo);\n        else if (bo.in(this.quad.SW()) && this.SW)\n            this.SW.insert(bo);\n        else if (bo.in(this.quad.SE()) && this.SE)\n            this.SE.insert(bo);\n    };\n    // tslint:disable-next-line\n    QuadTree.prototype._isExternal = function () {\n        // four children are null\n        return (this.NW == null && this.NE == null && this.SW == null && this.SE == null);\n    };\n    // update the forces\n    QuadTree.prototype.updateForce = function (bo) {\n        if (this.body == null || bo === this.body) {\n            return;\n        }\n        // if the current node is external\n        if (this._isExternal())\n            bo.addForce(this.body);\n        // internal nodes\n        else {\n            var s = this.quad ? this.quad.getLength() : 0;\n            var d = this.body.distanceTo(bo);\n            // b is far enough\n            if ((s / d) < this.theta)\n                bo.addForce(this.body);\n            else {\n                this.NW && this.NW.updateForce(bo);\n                this.NE && this.NE.updateForce(bo);\n                this.SW && this.SW.updateForce(bo);\n                this.SE && this.SE.updateForce(bo);\n            }\n        }\n    };\n    return QuadTree;\n}());\nexports.default = QuadTree;\n"},"sourceMaps":{"js":{"version":3,"file":"quadTree.js","sourceRoot":"","sources":["../../../src/layout/forceAtlas2/quadTree.ts"],"names":[],"mappings":"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","sourcesContent":["import Body from './body';\nimport Quad from './quad';\n\n/**\n * @fileOverview quadTree\n * @author shiwu.wyy@antfin.com\n */\n\nexport default class QuadTree {\n  public body: Body | null;\n  public quad: Quad | null;\n  public theta: number;\n  public NW: QuadTree | null;\n  public NE: QuadTree | null;\n  public SW: QuadTree | null;\n  public SE: QuadTree | null;\n\n  // each quadtree represents a quadrant and an aggregate body\n  // that represents all bodies inside the quadrant\n  constructor(param: Quad | null) {\n    /**\n     * (aggregated) body in this quad\n     * @type  {object}\n     */\n    this.body = null;\n    /**\n     * tree representing the northwest quadrant\n     * @type  {object}\n     */\n    this.quad = null;\n    this.NW = null;\n    this.NE = null;\n    this.SW = null;\n    this.SE = null;\n    /**\n     * threshold\n     * @type  {number}\n     */\n    this.theta = 0.5;\n    if (param != null) this.quad = param;\n  }\n  // insert a body(node) into the tree\n  insert(bo: Body) {\n    // if this node does not contain a body, put the new body bo here\n    if (this.body == null) {\n      this.body = bo;\n      return;\n    }\n    // internal node\n    if (!this._isExternal()) {\n      // update mass info\n      this.body = this.body.add(bo);\n      // insert body into quadrant\n      this._putBody(bo);\n    } else { // external node\n      // divide this region into four children\n      if (this.quad) {\n        this.NW = new QuadTree(this.quad.NW());\n        this.NE = new QuadTree(this.quad.NE());\n        this.SW = new QuadTree(this.quad.SW());\n        this.SE = new QuadTree(this.quad.SE());\n      }\n\n      // insert this body and bo\n      this._putBody(this.body);\n      this._putBody(bo);\n      // update the mass info\n      this.body = this.body.add(bo);\n\n    }\n  }\n  // inserts bo into a quad\n  // tslint:disable-next-line\n  _putBody(bo: Body) {\n    if (!this.quad) return;\n    if (bo.in(this.quad.NW()) && this.NW) this.NW.insert(bo);\n    else if (bo.in(this.quad.NE()) && this.NE) this.NE.insert(bo);\n    else if (bo.in(this.quad.SW()) && this.SW )this.SW.insert(bo);\n    else if (bo.in(this.quad.SE()) && this.SE) this.SE.insert(bo);\n  }\n  // tslint:disable-next-line\n  _isExternal() {\n    // four children are null\n    return (this.NW == null && this.NE == null && this.SW == null && this.SE == null);\n  }\n  // update the forces\n  updateForce(bo: Body) {\n    if (this.body == null || bo === this.body) {\n      return;\n    }\n    // if the current node is external\n    if (this._isExternal()) bo.addForce(this.body);\n    // internal nodes\n    else {\n      const s = this.quad ? this.quad.getLength() : 0;\n      const d = this.body.distanceTo(bo);\n      // b is far enough\n      if ((s / d) < this.theta) bo.addForce(this.body);\n      else {\n        this.NW && this.NW.updateForce(bo);\n        this.NE && this.NE.updateForce(bo);\n        this.SW && this.SW.updateForce(bo);\n        this.SE && this.SE.updateForce(bo);\n      }\n    }\n  }\n}\n"]}},"error":null,"hash":"d3b20495588e17fd8b283d3136e68127","cacheData":{"env":{}}}