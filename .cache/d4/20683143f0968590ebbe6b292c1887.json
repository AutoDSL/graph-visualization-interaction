{"id":"node_modules/@antv/layout/lib/util/gpu.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\gpu.js.map","includedInParent":true,"mtime":1676178923652},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\util\\gpu.ts","includedInParent":true,"mtime":1676178923919},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"./","loc":{"line":4,"column":17,"index":259},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\gpu.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\index.js"},{"name":"./math","loc":{"line":5,"column":21,"index":287},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\gpu.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\math.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.arrayToTextureData = exports.attributesToTextureData = exports.buildTextureDataWithTwoEdgeAttr = exports.buildTextureData = exports.proccessToFunc = void 0;\nvar _1 = require(\"./\");\nvar math_1 = require(\"./math\");\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数\n */\nvar proccessToFunc = function (value, defaultV) {\n    var func;\n    if (!value) {\n        func = function () {\n            return defaultV || 1;\n        };\n    }\n    else if ((0, _1.isNumber)(value)) {\n        func = function () {\n            return value;\n        };\n    }\n    else {\n        func = value;\n    }\n    return func;\n};\nexports.proccessToFunc = proccessToFunc;\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\nvar buildTextureData = function (nodes, edges) {\n    var dataArray = [];\n    var nodeDict = [];\n    var mapIdPos = {};\n    var i = 0;\n    for (i = 0; i < nodes.length; i++) {\n        var n = nodes[i];\n        mapIdPos[n.id] = i;\n        dataArray.push(n.x);\n        dataArray.push(n.y);\n        dataArray.push(0);\n        dataArray.push(0);\n        nodeDict.push([]);\n    }\n    for (i = 0; i < edges.length; i++) {\n        var e = edges[i];\n        var source = (0, math_1.getEdgeTerminal)(e, 'source');\n        var target = (0, math_1.getEdgeTerminal)(e, 'target');\n        if (!isNaN(mapIdPos[source]) && !isNaN(mapIdPos[target])) {\n            nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n            nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n        }\n    }\n    var maxEdgePerVetex = 0;\n    for (i = 0; i < nodes.length; i++) {\n        var offset = dataArray.length;\n        var dests = nodeDict[i];\n        var len = dests.length;\n        dataArray[i * 4 + 2] = offset;\n        dataArray[i * 4 + 3] = len;\n        maxEdgePerVetex = Math.max(maxEdgePerVetex, len);\n        for (var j = 0; j < len; ++j) {\n            var dest = dests[j];\n            dataArray.push(+dest);\n        }\n    }\n    while (dataArray.length % 4 !== 0) {\n        dataArray.push(0);\n    }\n    return {\n        maxEdgePerVetex: maxEdgePerVetex,\n        array: new Float32Array(dataArray),\n    };\n};\nexports.buildTextureData = buildTextureData;\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n// export const buildTextureDataWithOneEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs: Function): {\n//   array: Float32Array,\n//   maxEdgePerVetex: number\n// } => {\n//   const dataArray = [];\n//   const nodeDict: any = [];\n//   const mapIdPos: IndexMap = {};\n//   let i = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const n = nodes[i];\n//       mapIdPos[n.id] = i;\n//       dataArray.push(n.x);\n//       dataArray.push(n.y);\n//       dataArray.push(0);\n//       dataArray.push(0);\n//       nodeDict.push([]);\n//   }\n//   for (i = 0; i < edges.length; i++) {\n//       const e = edges[i];\n//       nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n//       nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//       nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n//       nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//   }\n//   let maxEdgePerVetex = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const offset: number = dataArray.length;\n//       const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n//       const len = dests.length;\n//       dataArray[i * 4 + 2] = offset;\n//       dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n//       maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n//       for (let j = 0; j < len; ++j) {\n//           const dest = dests[j];\n//           dataArray.push(+dest);\n//       }\n//   }\n//   // 不是 4 的倍数，填充 0\n//   while (dataArray.length % 4 !== 0) {\n//       dataArray.push(0);\n//   }\n//   return {\n//       array: new Float32Array(dataArray),\n//       maxEdgePerVetex\n//   }\n// }\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\nvar buildTextureDataWithTwoEdgeAttr = function (nodes, edges, attrs1, attrs2) {\n    var dataArray = [];\n    var nodeDict = [];\n    var mapIdPos = {};\n    var i = 0;\n    for (i = 0; i < nodes.length; i++) {\n        var n = nodes[i];\n        mapIdPos[n.id] = i;\n        dataArray.push(n.x);\n        dataArray.push(n.y);\n        dataArray.push(0);\n        dataArray.push(0);\n        nodeDict.push([]);\n    }\n    for (i = 0; i < edges.length; i++) {\n        var e = edges[i];\n        var source = (0, math_1.getEdgeTerminal)(e, 'source');\n        var target = (0, math_1.getEdgeTerminal)(e, 'target');\n        nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n        nodeDict[mapIdPos[source]].push(attrs1(e));\n        nodeDict[mapIdPos[source]].push(attrs2(e));\n        nodeDict[mapIdPos[source]].push(0);\n        nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n        nodeDict[mapIdPos[target]].push(attrs1(e));\n        nodeDict[mapIdPos[target]].push(attrs2(e));\n        nodeDict[mapIdPos[target]].push(0);\n    }\n    var maxEdgePerVetex = 0;\n    for (i = 0; i < nodes.length; i++) {\n        var offset = dataArray.length;\n        var dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n        var len = dests.length;\n        // dataArray[i * 4 + 2] = offset;\n        // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n        // pack offset & length into float32: offset 20bit, length 12bit\n        dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n        dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n        maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n        for (var j = 0; j < len; ++j) {\n            var dest = dests[j];\n            dataArray.push(+dest);\n        }\n    }\n    // 不是 4 的倍数，填充 0\n    while (dataArray.length % 4 !== 0) {\n        dataArray.push(0);\n    }\n    return {\n        maxEdgePerVetex: maxEdgePerVetex,\n        array: new Float32Array(dataArray),\n    };\n};\nexports.buildTextureDataWithTwoEdgeAttr = buildTextureDataWithTwoEdgeAttr;\n/**\n* transform the extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @param  {ModelConfig[]}  items the items to be read\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nvar attributesToTextureData = function (attributeNames, items) {\n    var dataArray = [];\n    var attributeNum = attributeNames.length;\n    var attributteStringMap = {};\n    items.forEach(function (item) {\n        attributeNames.forEach(function (name, i) {\n            if (attributteStringMap[item[name]] === undefined) {\n                attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n            }\n            dataArray.push(attributteStringMap[item[name]]);\n            // insure each node's attributes take inter number of grids\n            if (i === attributeNum - 1) {\n                while (dataArray.length % 4 !== 0) {\n                    dataArray.push(0);\n                }\n            }\n        });\n    });\n    return {\n        array: new Float32Array(dataArray),\n        count: Object.keys(attributteStringMap).length\n    };\n};\nexports.attributesToTextureData = attributesToTextureData;\n/**\n* transform the number array format of extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nvar arrayToTextureData = function (valueArrays) {\n    var dataArray = [];\n    var attributeNum = valueArrays.length;\n    var itemNum = valueArrays[0].length;\n    var _loop_1 = function (j) {\n        valueArrays.forEach(function (valueArray, i) {\n            dataArray.push(valueArray[j]);\n            // insure each node's attributes take inter number of grids\n            if (i === attributeNum - 1) {\n                while (dataArray.length % 4 !== 0) {\n                    dataArray.push(0);\n                }\n            }\n        });\n    };\n    for (var j = 0; j < itemNum; j++) {\n        _loop_1(j);\n    }\n    return new Float32Array(dataArray);\n};\nexports.arrayToTextureData = arrayToTextureData;\n"},"sourceMaps":{"js":{"version":3,"file":"gpu.js","sourceRoot":"","sources":["../../src/util/gpu.ts"],"names":[],"mappings":"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","sourcesContent":["import { OutNode, Edge, IndexMap } from '../layout/types';\nimport { isNumber } from './';\nimport { getEdgeTerminal } from './math';\n\n\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数 \n */\nexport const proccessToFunc = (value: number | Function | undefined, defaultV?: number): ((d?: any) => number) => {\n  let func;\n  if (!value) {\n      func = () => {\n          return defaultV || 1;\n      };\n  } else if (isNumber(value)) {\n      func = () => {\n          return value;\n      };\n  } else {\n      func = value;\n  }\n  return func as ((d?: any) => number);\n};\n\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\nexport const buildTextureData = (nodes: OutNode[], edges: Edge[]): {\n  array: Float32Array,\n  maxEdgePerVetex: number\n} => {\n  const dataArray = [];\n  const nodeDict: any = [];\n  const mapIdPos: IndexMap = {};\n  let i = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n  for (i = 0; i < edges.length; i++) {\n    const e = edges[i];\n    const source = getEdgeTerminal(e, 'source');\n    const target = getEdgeTerminal(e, 'target');\n    if (!isNaN(mapIdPos[source]) && !isNaN(mapIdPos[target])) {\n      nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n      nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    }\n  }\n\n  let maxEdgePerVetex = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const offset: number = dataArray.length;\n    const dests = nodeDict[i];\n    const len = dests.length;\n    dataArray[i * 4 + 2] = offset;\n    dataArray[i * 4 + 3] = len;\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len);\n    for (let j = 0; j < len; ++j) {\n      const dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n\n  while (dataArray.length % 4 !== 0) {\n      dataArray.push(0);\n  }\n  return {\n    maxEdgePerVetex,\n    array: new Float32Array(dataArray),\n  };\n};\n\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n// export const buildTextureDataWithOneEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs: Function): {\n//   array: Float32Array,\n//   maxEdgePerVetex: number\n// } => {\n//   const dataArray = [];\n//   const nodeDict: any = [];\n//   const mapIdPos: IndexMap = {};\n//   let i = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const n = nodes[i];\n//       mapIdPos[n.id] = i;\n//       dataArray.push(n.x);\n//       dataArray.push(n.y);\n//       dataArray.push(0);\n//       dataArray.push(0);\n//       nodeDict.push([]);\n//   }\n//   for (i = 0; i < edges.length; i++) {\n//       const e = edges[i];\n//       nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n//       nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//       nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n//       nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//   }\n\n//   let maxEdgePerVetex = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const offset: number = dataArray.length;\n//       const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n//       const len = dests.length;\n//       dataArray[i * 4 + 2] = offset;\n//       dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n//       maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n//       for (let j = 0; j < len; ++j) {\n//           const dest = dests[j];\n//           dataArray.push(+dest);\n//       }\n//   }\n\n//   // 不是 4 的倍数，填充 0\n//   while (dataArray.length % 4 !== 0) {\n//       dataArray.push(0);\n//   }\n//   return {\n//       array: new Float32Array(dataArray),\n//       maxEdgePerVetex\n//   }\n// }\n\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\nexport const buildTextureDataWithTwoEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs1: Function, attrs2: Function): {\n  array: Float32Array,\n  maxEdgePerVetex: number\n} => {\n  const dataArray = [];\n  const nodeDict: any = [];\n  const mapIdPos: IndexMap = {};\n  let i = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n  for (i = 0; i < edges.length; i++) {\n    const e = edges[i];\n    const source = getEdgeTerminal(e, 'source');\n    const target = getEdgeTerminal(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[source]].push(attrs1(e));\n    nodeDict[mapIdPos[source]].push(attrs2(e));\n    nodeDict[mapIdPos[source]].push(0);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    nodeDict[mapIdPos[target]].push(attrs1(e));\n    nodeDict[mapIdPos[target]].push(attrs2(e));\n    nodeDict[mapIdPos[target]].push(0);\n  }\n\n  let maxEdgePerVetex = 0;\n  for (i = 0; i < nodes.length; i++) {\n    const offset: number = dataArray.length;\n    const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n    const len = dests.length;\n    // dataArray[i * 4 + 2] = offset;\n    // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n    // pack offset & length into float32: offset 20bit, length 12bit\n    dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n    dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n    for (let j = 0; j < len; ++j) {\n    const dest = dests[j];\n    dataArray.push(+dest);\n    }\n  }\n\n  // 不是 4 的倍数，填充 0\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n  return {\n    maxEdgePerVetex,\n    array: new Float32Array(dataArray),\n  };\n};\n/**\n* transform the extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @param  {ModelConfig[]}  items the items to be read\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nexport const attributesToTextureData = (attributeNames: string[], items: any[]): { array: Float32Array, count: number } => {\n  const dataArray: any[] = [];\n  const attributeNum = attributeNames.length;\n  const attributteStringMap: any = {};\n  items.forEach((item: any) => {\n    attributeNames.forEach((name: string, i) => {\n        if (attributteStringMap[item[name]] === undefined) {\n            attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n        }\n        dataArray.push(attributteStringMap[item[name]]);\n        // insure each node's attributes take inter number of grids\n        if (i === attributeNum - 1) {\n            while (dataArray.length % 4 !== 0) {\n                dataArray.push(0);\n            }\n        }\n    });\n  });\n  return {\n      array: new Float32Array(dataArray),\n      count: Object.keys(attributteStringMap).length\n  };\n};\n\n/**\n* transform the number array format of extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nexport const arrayToTextureData = (valueArrays: number[][]): Float32Array => {\n  const dataArray: any[] = [];\n  const attributeNum = valueArrays.length;\n  const itemNum = valueArrays[0].length;\n  for (let j = 0; j < itemNum; j++) {\n      valueArrays.forEach((valueArray, i) => {\n          dataArray.push(valueArray[j]);\n          // insure each node's attributes take inter number of grids\n          if (i === attributeNum - 1) {\n              while (dataArray.length % 4 !== 0) {\n                  dataArray.push(0);\n              }\n          }\n      });\n  }\n\n  return new Float32Array(dataArray);\n};\n"]}},"error":null,"hash":"0819f4018a7ccb3c9f47ef59f6507a8d","cacheData":{"env":{}}}