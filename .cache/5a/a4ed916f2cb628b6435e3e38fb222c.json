{"id":"node_modules/@antv/layout/lib/layout/radial/radial.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\radial\\radial.js.map","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\src\\layout\\radial\\radial.ts","includedInParent":true,"mtime":499162500000},{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1674179681168},{"name":"../../util","loc":{"line":26,"column":21,"index":1102},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\radial\\radial.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\util\\index.js"},{"name":"../base","loc":{"line":27,"column":21,"index":1138},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\radial\\radial.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\base.js"},{"name":"./mds","loc":{"line":28,"column":36,"index":1186},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\radial\\radial.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\radial\\mds.js"},{"name":"./radialNonoverlapForce","loc":{"line":29,"column":54,"index":1251},"parent":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\radial\\radial.js","resolved":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\layout\\lib\\layout\\radial\\radialNonoverlapForce.js"}],"generated":{"js":"\"use strict\";\n/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RadialLayout = void 0;\nvar util_1 = require(\"../../util\");\nvar base_1 = require(\"../base\");\nvar mds_1 = __importDefault(require(\"./mds\"));\nvar radialNonoverlapForce_1 = __importDefault(require(\"./radialNonoverlapForce\"));\nfunction getWeightMatrix(M) {\n    var rows = M.length;\n    var cols = M[0].length;\n    var result = [];\n    for (var i = 0; i < rows; i++) {\n        var row = [];\n        for (var j = 0; j < cols; j++) {\n            if (M[i][j] !== 0) {\n                row.push(1 / (M[i][j] * M[i][j]));\n            }\n            else {\n                row.push(0);\n            }\n        }\n        result.push(row);\n    }\n    return result;\n}\nfunction getIndexById(array, id) {\n    var index = -1;\n    array.forEach(function (a, i) {\n        if (a.id === id) {\n            index = i;\n        }\n    });\n    return index;\n}\nfunction getEDistance(p1, p2) {\n    return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));\n}\n/**\n * 辐射状布局\n */\nvar RadialLayout = /** @class */ (function (_super) {\n    __extends(RadialLayout, _super);\n    function RadialLayout(options) {\n        var _this = _super.call(this) || this;\n        /** 停止迭代的最大迭代数 */\n        _this.maxIteration = 1000;\n        /** 中心点，默认为数据中第一个点 */\n        _this.focusNode = null;\n        /** 每一圈半径 */\n        _this.unitRadius = null;\n        /** 默认边长度 */\n        _this.linkDistance = 50;\n        /** 是否防止重叠 */\n        _this.preventOverlap = false;\n        /** 是否必须是严格的 radial 布局，即每一层的节点严格布局在一个环上。preventOverlap 为 true 时生效 */\n        _this.strictRadial = true;\n        /** 防止重叠步骤的最大迭代次数 */\n        _this.maxPreventOverlapIteration = 200;\n        _this.sortStrength = 10;\n        _this.nodes = [];\n        _this.edges = [];\n        _this.updateCfg(options);\n        return _this;\n    }\n    RadialLayout.prototype.getDefaultCfg = function () {\n        return {\n            maxIteration: 1000,\n            focusNode: null,\n            unitRadius: null,\n            linkDistance: 50,\n            preventOverlap: false,\n            nodeSize: undefined,\n            nodeSpacing: undefined,\n            strictRadial: true,\n            maxPreventOverlapIteration: 200,\n            sortBy: undefined,\n            sortStrength: 10\n        };\n    };\n    /**\n     * 执行布局\n     */\n    RadialLayout.prototype.execute = function () {\n        var self = this;\n        var nodes = self.nodes;\n        var edges = self.edges || [];\n        if (!nodes || nodes.length === 0) {\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return;\n        }\n        if (!self.width && typeof window !== \"undefined\") {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== \"undefined\") {\n            self.height = window.innerHeight;\n        }\n        if (!self.center) {\n            self.center = [self.width / 2, self.height / 2];\n        }\n        var center = self.center;\n        if (nodes.length === 1) {\n            nodes[0].x = center[0];\n            nodes[0].y = center[1];\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return;\n        }\n        var linkDistance = self.linkDistance;\n        // layout\n        var focusNode = null;\n        if ((0, util_1.isString)(self.focusNode)) {\n            var found = false;\n            for (var i = 0; i < nodes.length; i++) {\n                if (nodes[i].id === self.focusNode) {\n                    focusNode = nodes[i];\n                    self.focusNode = focusNode;\n                    found = true;\n                    i = nodes.length;\n                }\n            }\n            if (!found) {\n                focusNode = null;\n            }\n        }\n        else {\n            focusNode = self.focusNode;\n        }\n        // default focus node\n        if (!focusNode) {\n            focusNode = nodes[0];\n            self.focusNode = focusNode;\n        }\n        // the index of the focusNode in data\n        var focusIndex = getIndexById(nodes, focusNode.id);\n        if (focusIndex < 0)\n            focusIndex = 0;\n        self.focusIndex = focusIndex;\n        // the graph-theoretic distance (shortest path distance) matrix\n        var adjMatrix = (0, util_1.getAdjMatrix)({ nodes: nodes, edges: edges }, false);\n        var D = (0, util_1.floydWarshall)(adjMatrix);\n        var maxDistance = self.maxToFocus(D, focusIndex);\n        // replace first node in unconnected component to the circle at (maxDistance + 1)\n        self.handleInfinity(D, focusIndex, maxDistance + 1);\n        self.distances = D;\n        // the shortest path distance from each node to focusNode\n        var focusNodeD = D[focusIndex];\n        var width = self.width || 500;\n        var height = self.height || 500;\n        var semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n        var semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n        if (semiWidth === 0) {\n            semiWidth = width / 2;\n        }\n        if (semiHeight === 0) {\n            semiHeight = height / 2;\n        }\n        // the maxRadius of the graph\n        var maxRadius = semiHeight > semiWidth ? semiWidth : semiHeight;\n        var maxD = Math.max.apply(Math, focusNodeD);\n        // the radius for each nodes away from focusNode\n        var radii = [];\n        focusNodeD.forEach(function (value, i) {\n            if (!self.unitRadius) {\n                self.unitRadius = maxRadius / maxD;\n            }\n            radii[i] = value * self.unitRadius;\n        });\n        self.radii = radii;\n        var eIdealD = self.eIdealDisMatrix();\n        // const eIdealD = scaleMatrix(D, linkDistance);\n        self.eIdealDistances = eIdealD;\n        // the weight matrix, Wij = 1 / dij^(-2)\n        var W = getWeightMatrix(eIdealD);\n        self.weights = W;\n        // the initial positions from mds\n        var mds = new mds_1.default({ linkDistance: linkDistance, distances: eIdealD });\n        var positions = mds.layout();\n        positions.forEach(function (p) {\n            if ((0, util_1.isNaN)(p[0])) {\n                p[0] = Math.random() * linkDistance;\n            }\n            if ((0, util_1.isNaN)(p[1])) {\n                p[1] = Math.random() * linkDistance;\n            }\n        });\n        self.positions = positions;\n        positions.forEach(function (p, i) {\n            nodes[i].x = p[0] + center[0];\n            nodes[i].y = p[1] + center[1];\n        });\n        // move the graph to origin, centered at focusNode\n        positions.forEach(function (p) {\n            p[0] -= positions[focusIndex][0];\n            p[1] -= positions[focusIndex][1];\n        });\n        self.run();\n        var preventOverlap = self.preventOverlap;\n        var nodeSize = self.nodeSize;\n        var nodeSizeFunc;\n        var strictRadial = self.strictRadial;\n        // stagger the overlapped nodes\n        if (preventOverlap) {\n            var nodeSpacing_1 = self.nodeSpacing;\n            var nodeSpacingFunc_1;\n            if ((0, util_1.isNumber)(nodeSpacing_1)) {\n                nodeSpacingFunc_1 = function () { return nodeSpacing_1; };\n            }\n            else if ((0, util_1.isFunction)(nodeSpacing_1)) {\n                nodeSpacingFunc_1 = nodeSpacing_1;\n            }\n            else {\n                nodeSpacingFunc_1 = function () { return 0; };\n            }\n            if (!nodeSize) {\n                nodeSizeFunc = function (d) {\n                    if (d.size) {\n                        if ((0, util_1.isArray)(d.size)) {\n                            var res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                            return res + nodeSpacingFunc_1(d);\n                        }\n                        if ((0, util_1.isObject)(d.size)) {\n                            var res = d.size.width > d.size.height ? d.size.width : d.size.height;\n                            return res + nodeSpacingFunc_1(d);\n                        }\n                        return d.size + nodeSpacingFunc_1(d);\n                    }\n                    return 10 + nodeSpacingFunc_1(d);\n                };\n            }\n            else if ((0, util_1.isArray)(nodeSize)) {\n                nodeSizeFunc = function (d) {\n                    var res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n                    return res + nodeSpacingFunc_1(d);\n                };\n            }\n            else {\n                nodeSizeFunc = function (d) { return nodeSize + nodeSpacingFunc_1(d); };\n            }\n            var nonoverlapForceParams = {\n                nodes: nodes,\n                nodeSizeFunc: nodeSizeFunc,\n                adjMatrix: adjMatrix,\n                positions: positions,\n                radii: radii,\n                height: height,\n                width: width,\n                strictRadial: strictRadial,\n                focusID: focusIndex,\n                iterations: self.maxPreventOverlapIteration || 200,\n                k: positions.length / 4.5\n            };\n            var nonoverlapForce = new radialNonoverlapForce_1.default(nonoverlapForceParams);\n            positions = nonoverlapForce.layout();\n        }\n        // move the graph to center\n        positions.forEach(function (p, i) {\n            nodes[i].x = p[0] + center[0];\n            nodes[i].y = p[1] + center[1];\n        });\n        if (self.onLayoutEnd)\n            self.onLayoutEnd();\n        return {\n            nodes: nodes,\n            edges: edges\n        };\n    };\n    RadialLayout.prototype.run = function () {\n        var self = this;\n        var maxIteration = self.maxIteration;\n        var positions = self.positions || [];\n        var W = self.weights || [];\n        var eIdealDis = self.eIdealDistances || [];\n        var radii = self.radii || [];\n        for (var i = 0; i <= maxIteration; i++) {\n            var param = i / maxIteration;\n            self.oneIteration(param, positions, radii, eIdealDis, W);\n        }\n    };\n    RadialLayout.prototype.oneIteration = function (param, positions, radii, D, W) {\n        var self = this;\n        var vparam = 1 - param;\n        var focusIndex = self.focusIndex;\n        positions.forEach(function (v, i) {\n            // v\n            var originDis = getEDistance(v, [0, 0]);\n            var reciODis = originDis === 0 ? 0 : 1 / originDis;\n            if (i === focusIndex) {\n                return;\n            }\n            var xMolecule = 0;\n            var yMolecule = 0;\n            var denominator = 0;\n            positions.forEach(function (u, j) {\n                // u\n                if (i === j) {\n                    return;\n                }\n                // the euclidean distance between v and u\n                var edis = getEDistance(v, u);\n                var reciEdis = edis === 0 ? 0 : 1 / edis;\n                var idealDis = D[j][i];\n                // same for x and y\n                denominator += W[i][j];\n                // x\n                xMolecule += W[i][j] * (u[0] + idealDis * (v[0] - u[0]) * reciEdis);\n                // y\n                yMolecule += W[i][j] * (u[1] + idealDis * (v[1] - u[1]) * reciEdis);\n            });\n            var reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n            denominator *= vparam;\n            denominator += param * reciR * reciR;\n            // x\n            xMolecule *= vparam;\n            xMolecule += param * reciR * v[0] * reciODis;\n            v[0] = xMolecule / denominator;\n            // y\n            yMolecule *= vparam;\n            yMolecule += param * reciR * v[1] * reciODis;\n            v[1] = yMolecule / denominator;\n        });\n    };\n    RadialLayout.prototype.eIdealDisMatrix = function () {\n        var self = this;\n        var nodes = self.nodes;\n        if (!nodes)\n            return [];\n        var D = self.distances;\n        var linkDis = self.linkDistance;\n        var radii = self.radii || [];\n        var unitRadius = self.unitRadius || 50;\n        var result = [];\n        if (D) {\n            D.forEach(function (row, i) {\n                var newRow = [];\n                row.forEach(function (v, j) {\n                    if (i === j) {\n                        newRow.push(0);\n                    }\n                    else if (radii[i] === radii[j]) {\n                        // i and j are on the same circle\n                        if (self.sortBy === \"data\") {\n                            // sort the nodes on the same circle according to the ordering of the data\n                            newRow.push((v * (Math.abs(i - j) * self.sortStrength)) /\n                                (radii[i] / unitRadius));\n                        }\n                        else if (self.sortBy) {\n                            // sort the nodes on the same circle according to the attributes\n                            var iValue = nodes[i][self.sortBy] || 0;\n                            var jValue = nodes[j][self.sortBy] || 0;\n                            if ((0, util_1.isString)(iValue)) {\n                                iValue = iValue.charCodeAt(0);\n                            }\n                            if ((0, util_1.isString)(jValue)) {\n                                jValue = jValue.charCodeAt(0);\n                            }\n                            newRow.push((v * (Math.abs(iValue - jValue) * self.sortStrength)) /\n                                (radii[i] / unitRadius));\n                        }\n                        else {\n                            newRow.push((v * linkDis) / (radii[i] / unitRadius));\n                        }\n                    }\n                    else {\n                        // i and j are on different circle\n                        // i and j are on different circle\n                        var link = (linkDis + unitRadius) / 2;\n                        newRow.push(v * link);\n                    }\n                });\n                result.push(newRow);\n            });\n        }\n        return result;\n    };\n    RadialLayout.prototype.handleInfinity = function (matrix, focusIndex, step) {\n        var length = matrix.length;\n        // 遍历 matrix 中遍历 focus 对应行\n        for (var i = 0; i < length; i++) {\n            // matrix 关注点对应行的 Inf 项\n            if (matrix[focusIndex][i] === Infinity) {\n                matrix[focusIndex][i] = step;\n                matrix[i][focusIndex] = step;\n                // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n                for (var j = 0; j < length; j++) {\n                    if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n                        matrix[focusIndex][j] = step + matrix[i][j];\n                        matrix[j][focusIndex] = step + matrix[i][j];\n                    }\n                }\n            }\n        }\n        // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n        for (var i = 0; i < length; i++) {\n            if (i === focusIndex) {\n                continue;\n            }\n            for (var j = 0; j < length; j++) {\n                if (matrix[i][j] === Infinity) {\n                    var minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n                    minus = minus === 0 ? 1 : minus;\n                    matrix[i][j] = minus;\n                }\n            }\n        }\n    };\n    RadialLayout.prototype.maxToFocus = function (matrix, focusIndex) {\n        var max = 0;\n        for (var i = 0; i < matrix[focusIndex].length; i++) {\n            if (matrix[focusIndex][i] === Infinity) {\n                continue;\n            }\n            max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n        }\n        return max;\n    };\n    RadialLayout.prototype.getType = function () {\n        return \"radial\";\n    };\n    return RadialLayout;\n}(base_1.Base));\nexports.RadialLayout = RadialLayout;\n"},"sourceMaps":{"js":{"version":3,"file":"radial.js","sourceRoot":"","sources":["../../../src/layout/radial/radial.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\n\nimport {\n  PointTuple,\n  Node,\n  OutNode,\n  Edge,\n  Matrix,\n  RadialLayoutOptions\n} from \"../types\";\nimport {\n  isNaN,\n  isArray,\n  isFunction,\n  isNumber,\n  isString,\n  floydWarshall,\n  getAdjMatrix,\n  isObject\n} from \"../../util\";\nimport { Base } from \"../base\";\nimport MDS from \"./mds\";\nimport RadialNonoverlapForce, {\n  RadialNonoverlapForceParam\n} from \"./radialNonoverlapForce\";\n\ntype INode = OutNode & {\n  size?: number | PointTuple;\n};\n\nfunction getWeightMatrix(M: Matrix[]) {\n  const rows = M.length;\n  const cols = M[0].length;\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      if (M[i][j] !== 0) {\n        row.push(1 / (M[i][j] * M[i][j]));\n      } else {\n        row.push(0);\n      }\n    }\n    result.push(row);\n  }\n  return result;\n}\n\nfunction getIndexById(array: any[], id: string) {\n  let index = -1;\n  array.forEach((a, i) => {\n    if (a.id === id) {\n      index = i;\n    }\n  });\n  return index;\n}\n\nfunction getEDistance(p1: PointTuple, p2: PointTuple) {\n  return Math.sqrt(\n    (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1])\n  );\n}\n\n/**\n * 辐射状布局\n */\nexport class RadialLayout extends Base {\n  /** 布局中心 */\n  public center: PointTuple;\n\n  /** 停止迭代的最大迭代数 */\n  public maxIteration: number = 1000;\n\n  /** 中心点，默认为数据中第一个点 */\n  public focusNode: string | Node | null = null;\n\n  /** 每一圈半径 */\n  public unitRadius: number | null = null;\n\n  /** 默认边长度 */\n  public linkDistance: number = 50;\n\n  /** 是否防止重叠 */\n  public preventOverlap: boolean = false;\n\n  /** 节点直径 */\n  public nodeSize: number | number[] | undefined;\n\n  /** 节点间距，防止节点重叠时节点之间的最小距离（两节点边缘最短距离） */\n  public nodeSpacing: number | Function | undefined;\n\n  /** 是否必须是严格的 radial 布局，即每一层的节点严格布局在一个环上。preventOverlap 为 true 时生效 */\n  public strictRadial: boolean = true;\n\n  /** 防止重叠步骤的最大迭代次数 */\n  public maxPreventOverlapIteration: number = 200;\n\n  public sortBy: string | undefined;\n\n  public sortStrength: number = 10;\n\n  public width: number | undefined;\n\n  public height: number | undefined;\n\n  private focusIndex: number | undefined;\n\n  private distances: Matrix[] | undefined;\n\n  private eIdealDistances: Matrix[] | undefined;\n\n  private weights: Matrix[] | undefined;\n\n  private radii: number[] | undefined;\n\n  public nodes: INode[] = [];\n\n  public edges: Edge[] = [];\n\n  public onLayoutEnd: () => void;\n\n  constructor(options?: RadialLayoutOptions) {\n    super();\n    this.updateCfg(options);\n  }\n\n  public getDefaultCfg() {\n    return {\n      maxIteration: 1000,\n      focusNode: null,\n      unitRadius: null,\n      linkDistance: 50,\n      preventOverlap: false,\n      nodeSize: undefined,\n      nodeSpacing: undefined,\n      strictRadial: true,\n      maxPreventOverlapIteration: 200,\n      sortBy: undefined,\n      sortStrength: 10\n    };\n  }\n\n  /**\n   * 执行布局\n   */\n  public execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges || [];\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    if (!self.center) {\n      self.center = [self.width! / 2, self.height! / 2];\n    }\n    const center = self.center;\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n    const linkDistance = self.linkDistance;\n    // layout\n    let focusNode: INode | null = null;\n    if (isString(self.focusNode)) {\n      let found = false;\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === self.focusNode) {\n          focusNode = nodes[i];\n          self.focusNode = focusNode;\n          found = true;\n          i = nodes.length;\n        }\n      }\n      if (!found) {\n        focusNode = null;\n      }\n    } else {\n      focusNode = self.focusNode as INode;\n    }\n    // default focus node\n    if (!focusNode) {\n      focusNode = nodes[0];\n      self.focusNode = focusNode;\n    }\n    // the index of the focusNode in data\n    let focusIndex = getIndexById(nodes, focusNode.id);\n    if (focusIndex < 0) focusIndex = 0;\n    self.focusIndex = focusIndex;\n\n    // the graph-theoretic distance (shortest path distance) matrix\n    const adjMatrix = getAdjMatrix({ nodes, edges }, false);\n    const D = floydWarshall(adjMatrix);\n    const maxDistance = self.maxToFocus(D, focusIndex);\n    // replace first node in unconnected component to the circle at (maxDistance + 1)\n    self.handleInfinity(D, focusIndex, maxDistance + 1);\n    self.distances = D;\n\n    // the shortest path distance from each node to focusNode\n    const focusNodeD = D[focusIndex];\n    const width = self.width || 500;\n    const height = self.height || 500;\n    let semiWidth =\n      width - center[0] > center[0] ? center[0] : width - center[0];\n    let semiHeight =\n      height - center[1] > center[1] ? center[1] : height - center[1];\n    if (semiWidth === 0) {\n      semiWidth = width / 2;\n    }\n    if (semiHeight === 0) {\n      semiHeight = height / 2;\n    }\n    // the maxRadius of the graph\n    const maxRadius = semiHeight > semiWidth ? semiWidth : semiHeight;\n    const maxD = Math.max(...focusNodeD);\n    // the radius for each nodes away from focusNode\n    const radii: number[] = [];\n    focusNodeD.forEach((value, i) => {\n      if (!self.unitRadius) {\n        self.unitRadius = maxRadius / maxD;\n      }\n      radii[i] = value * self.unitRadius;\n    });\n    self.radii = radii;\n\n    const eIdealD = self.eIdealDisMatrix();\n    // const eIdealD = scaleMatrix(D, linkDistance);\n    self.eIdealDistances = eIdealD;\n    // the weight matrix, Wij = 1 / dij^(-2)\n    const W = getWeightMatrix(eIdealD);\n    self.weights = W;\n\n    // the initial positions from mds\n    const mds = new MDS({ linkDistance, distances: eIdealD });\n    let positions = mds.layout();\n    positions.forEach((p: PointTuple) => {\n      if (isNaN(p[0])) {\n        p[0] = Math.random() * linkDistance;\n      }\n      if (isNaN(p[1])) {\n        p[1] = Math.random() * linkDistance;\n      }\n    });\n    self.positions = positions;\n    positions.forEach((p: PointTuple, i: number) => {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    });\n    // move the graph to origin, centered at focusNode\n    positions.forEach((p: PointTuple) => {\n      p[0] -= positions[focusIndex][0];\n      p[1] -= positions[focusIndex][1];\n    });\n    self.run();\n    const preventOverlap = self.preventOverlap;\n    const nodeSize = self.nodeSize;\n    let nodeSizeFunc;\n    const strictRadial = self.strictRadial;\n    // stagger the overlapped nodes\n    if (preventOverlap) {\n      const nodeSpacing = self.nodeSpacing;\n      let nodeSpacingFunc: Function;\n      if (isNumber(nodeSpacing)) {\n        nodeSpacingFunc = () => nodeSpacing;\n      } else if (isFunction(nodeSpacing)) {\n        nodeSpacingFunc = nodeSpacing;\n      } else {\n        nodeSpacingFunc = () => 0;\n      }\n      if (!nodeSize) {\n        nodeSizeFunc = (d: INode) => {\n          if (d.size) {\n            if (isArray(d.size)) {\n              const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n              return res + nodeSpacingFunc(d);\n            }  if (isObject(d.size)) {\n              const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n              return res + nodeSpacingFunc(d);  \n            }\n            return d.size + nodeSpacingFunc(d);\n          }\n          return 10 + nodeSpacingFunc(d);\n        };\n      } else if (isArray(nodeSize)) {\n        nodeSizeFunc = (d: INode) => {\n          const res = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n          return res + nodeSpacingFunc(d);\n        };\n      } else {\n        nodeSizeFunc = (d: INode) => nodeSize + nodeSpacingFunc(d);\n      }\n      const nonoverlapForceParams: RadialNonoverlapForceParam = {\n        nodes,\n        nodeSizeFunc,\n        adjMatrix,\n        positions,\n        radii,\n        height,\n        width,\n        strictRadial,\n        focusID: focusIndex,\n        iterations: self.maxPreventOverlapIteration || 200,\n        k: positions.length / 4.5\n      };\n      const nonoverlapForce = new RadialNonoverlapForce(nonoverlapForceParams);\n      positions = nonoverlapForce.layout();\n    }\n    // move the graph to center\n    positions.forEach((p: PointTuple, i: number) => {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    });\n\n    if (self.onLayoutEnd) self.onLayoutEnd();\n\n    return {\n      nodes,\n      edges\n    };\n  }\n\n  public run() {\n    const self = this;\n    const maxIteration = self.maxIteration;\n    const positions = self.positions || [];\n    const W = self.weights || [];\n    const eIdealDis = self.eIdealDistances || [];\n    const radii = self.radii || [];\n    for (let i = 0; i <= maxIteration; i++) {\n      const param = i / maxIteration;\n      self.oneIteration(param, positions, radii, eIdealDis, W);\n    }\n  }\n\n  private oneIteration(\n    param: number,\n    positions: PointTuple[],\n    radii: number[],\n    D: Matrix[],\n    W: Matrix[]\n  ) {\n    const self = this;\n    const vparam = 1 - param;\n    const focusIndex = self.focusIndex;\n    positions.forEach((v: PointTuple, i: number) => {\n      // v\n      const originDis = getEDistance(v, [0, 0]);\n      const reciODis = originDis === 0 ? 0 : 1 / originDis;\n      if (i === focusIndex) {\n        return;\n      }\n      let xMolecule = 0;\n      let yMolecule = 0;\n      let denominator = 0;\n      positions.forEach((u, j) => {\n        // u\n        if (i === j) {\n          return;\n        }\n        // the euclidean distance between v and u\n        const edis = getEDistance(v, u);\n        const reciEdis = edis === 0 ? 0 : 1 / edis;\n        const idealDis = D[j][i];\n        // same for x and y\n        denominator += W[i][j];\n        // x\n        xMolecule += W[i][j] * (u[0] + idealDis * (v[0] - u[0]) * reciEdis);\n        // y\n        yMolecule += W[i][j] * (u[1] + idealDis * (v[1] - u[1]) * reciEdis);\n      });\n      const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n      denominator *= vparam;\n      denominator += param * reciR * reciR;\n      // x\n      xMolecule *= vparam;\n      xMolecule += param * reciR * v[0] * reciODis;\n      v[0] = xMolecule / denominator;\n      // y\n      yMolecule *= vparam;\n      yMolecule += param * reciR * v[1] * reciODis;\n      v[1] = yMolecule / denominator;\n    });\n  }\n\n  private eIdealDisMatrix(): Matrix[] {\n    const self = this;\n    const nodes = self.nodes;\n    if (!nodes) return [];\n    const D = self.distances;\n    const linkDis = self.linkDistance;\n    const radii = self.radii || [];\n    const unitRadius = self.unitRadius || 50;\n    const result: Matrix[] = [];\n    if (D) {\n      D.forEach((row, i) => {\n        const newRow: Matrix = [];\n        row.forEach((v, j) => {\n          if (i === j) {\n            newRow.push(0);\n          } else if (radii[i] === radii[j]) {\n            // i and j are on the same circle\n            if (self.sortBy === \"data\") {\n              // sort the nodes on the same circle according to the ordering of the data\n              newRow.push(\n                (v * (Math.abs(i - j) * self.sortStrength)) /\n                  (radii[i] / unitRadius)\n              );\n            } else if (self.sortBy) {\n              // sort the nodes on the same circle according to the attributes\n              let iValue: number | string =\n                ((nodes[i] as any)[self.sortBy] as number | string) || 0;\n              let jValue: number | string =\n                ((nodes[j] as any)[self.sortBy] as number | string) || 0;\n              if (isString(iValue)) {\n                iValue = iValue.charCodeAt(0);\n              }\n              if (isString(jValue)) {\n                jValue = jValue.charCodeAt(0);\n              }\n              newRow.push(\n                (v * (Math.abs(iValue - jValue) * self.sortStrength)) /\n                  (radii[i] / unitRadius)\n              );\n            } else {\n              newRow.push((v * linkDis) / (radii[i] / unitRadius));\n            }\n          } else {\n            // i and j are on different circle\n            // i and j are on different circle\n            const link = (linkDis + unitRadius) / 2;\n            newRow.push(v * link);\n          }\n        });\n        result.push(newRow);\n      });\n    }\n    return result;\n  }\n\n  private handleInfinity(matrix: Matrix[], focusIndex: number, step: number) {\n    const length = matrix.length;\n    // 遍历 matrix 中遍历 focus 对应行\n    for (let i = 0; i < length; i++) {\n      // matrix 关注点对应行的 Inf 项\n      if (matrix[focusIndex][i] === Infinity) {\n        matrix[focusIndex][i] = step;\n        matrix[i][focusIndex] = step;\n        // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n        for (let j = 0; j < length; j++) {\n          if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n            matrix[focusIndex][j] = step + matrix[i][j];\n            matrix[j][focusIndex] = step + matrix[i][j];\n          }\n        }\n      }\n    }\n    // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n    for (let i = 0; i < length; i++) {\n      if (i === focusIndex) {\n        continue;\n      }\n      for (let j = 0; j < length; j++) {\n        if (matrix[i][j] === Infinity) {\n          let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n          minus = minus === 0 ? 1 : minus;\n          matrix[i][j] = minus;\n        }\n      }\n    }\n  }\n\n  private maxToFocus(matrix: Matrix[], focusIndex: number): number {\n    let max = 0;\n    for (let i = 0; i < matrix[focusIndex].length; i++) {\n      if (matrix[focusIndex][i] === Infinity) {\n        continue;\n      }\n      max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n    }\n    return max;\n  }\n\n  public getType() {\n    return \"radial\";\n  }\n}\n"]}},"error":null,"hash":"fffc211f3c58fb0885cbc316f651f6dc","cacheData":{"env":{}}}