{"id":"node_modules/@antv/layout/lib/layout/dagre/src/nesting-graph.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\nesting-graph.js.map","includedInParent":true,"mtime":1676178923732},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\dagre\\src\\nesting-graph.ts","includedInParent":true,"mtime":1676178924015},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"./util","loc":{"line":3,"column":21,"index":98},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\nesting-graph.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\dagre\\src\\util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./util\");\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nvar run = function (g) {\n    var _a;\n    var root = (0, util_1.addDummyNode)(g, \"root\", {}, \"_root\");\n    var depths = treeDepths(g);\n    var maxDepth = Math.max.apply(Math, Object.values(depths));\n    if (Math.abs(maxDepth) === Infinity) {\n        maxDepth = 1;\n    }\n    var height = maxDepth - 1; // Note: depths is an Object not an array\n    var nodeSep = 2 * height + 1;\n    g.graph().nestingRoot = root;\n    // Multiply minlen by nodeSep to align nodes on non-border ranks.\n    g.edges().forEach(function (e) {\n        g.edge(e).minlen *= nodeSep;\n    });\n    // Calculate a weight that is sufficient to keep subgraphs vertically compact\n    var weight = sumWeights(g) + 1;\n    // Create border nodes and link them up\n    (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n        dfs(g, root, nodeSep, weight, height, depths, child);\n    });\n    // Save the multiplier for node layers for later removal of empty border\n    // layers.\n    g.graph().nodeRankFactor = nodeSep;\n};\nvar dfs = function (g, root, nodeSep, weight, height, depths, v) {\n    var children = g.children(v);\n    if (!(children === null || children === void 0 ? void 0 : children.length)) {\n        if (v !== root) {\n            g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n        }\n        return;\n    }\n    var top = (0, util_1.addBorderNode)(g, \"_bt\");\n    var bottom = (0, util_1.addBorderNode)(g, \"_bb\");\n    var label = g.node(v);\n    g.setParent(top, v);\n    label.borderTop = top;\n    g.setParent(bottom, v);\n    label.borderBottom = bottom;\n    children === null || children === void 0 ? void 0 : children.forEach(function (child) {\n        dfs(g, root, nodeSep, weight, height, depths, child);\n        var childNode = g.node(child);\n        var childTop = childNode.borderTop ? childNode.borderTop : child;\n        var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n        var thisWeight = childNode.borderTop ? weight : 2 * weight;\n        var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n        g.setEdge(top, childTop, {\n            minlen: minlen,\n            weight: thisWeight,\n            nestingEdge: true,\n        });\n        g.setEdge(childBottom, bottom, {\n            minlen: minlen,\n            weight: thisWeight,\n            nestingEdge: true,\n        });\n    });\n    if (!g.parent(v)) {\n        g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n    }\n};\nvar treeDepths = function (g) {\n    var _a;\n    var depths = {};\n    var dfs = function (v, depth) {\n        var children = g.children(v);\n        children === null || children === void 0 ? void 0 : children.forEach(function (child) { return dfs(child, depth + 1); });\n        depths[v] = depth;\n    };\n    (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (v) { return dfs(v, 1); });\n    return depths;\n};\nvar sumWeights = function (g) {\n    var result = 0;\n    g.edges().forEach(function (e) {\n        result += g.edge(e).weight;\n    });\n    return result;\n};\nvar cleanup = function (g) {\n    var graphLabel = g.graph();\n    graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n    delete graphLabel.nestingRoot;\n    g.edges().forEach(function (e) {\n        var edge = g.edge(e);\n        if (edge.nestingEdge) {\n            g.removeEdgeObj(e);\n        }\n    });\n};\nexports.default = { run: run, cleanup: cleanup };\n"},"sourceMaps":{"js":{"version":3,"file":"nesting-graph.js","sourceRoot":"","sources":["../../../../src/layout/dagre/src/nesting-graph.ts"],"names":[],"mappings":"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","sourcesContent":["import { Graph } from \"../graph\";\nimport { addBorderNode, addDummyNode } from \"./util\";\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nconst run = (g: Graph) => {\n  const root = addDummyNode(g, \"root\", {}, \"_root\");\n  const depths = treeDepths(g);\n  let maxDepth = Math.max(...Object.values(depths));\n  \n  if (Math.abs(maxDepth) === Infinity) {\n    maxDepth = 1;\n  }\n\n  const height = maxDepth - 1; // Note: depths is an Object not an array\n  const nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  g.edges().forEach((e) => {\n    g.edge(e)!.minlen! *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  const weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  g.children()?.forEach((child) => {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n};\n\nconst dfs = (\n  g: Graph,\n  root: string,\n  nodeSep: number,\n  weight: number,\n  height: number,\n  depths:Record<string, number>,\n  v: string\n) => {\n  const children = g.children(v);\n  if (!children?.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  const top = addBorderNode(g, \"_bt\");\n  const bottom = addBorderNode(g, \"_bb\");\n  const label = g.node(v)!;\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  children?.forEach((child) => {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    const childNode = g.node(child)!;\n    const childTop = childNode.borderTop ? childNode.borderTop : child;\n    const childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    const thisWeight = childNode.borderTop ? weight : 2 * weight;\n    const minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      minlen,\n      weight: thisWeight,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      minlen,\n      weight: thisWeight,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n};\n\nconst treeDepths = (g: Graph) => {\n  const depths: Record<string, number> = {};\n  const dfs = (v: string, depth: number) => {\n    const children = g.children(v);\n    children?.forEach((child) => dfs(child, depth + 1));\n    depths[v] = depth;\n  };\n  g.children()?.forEach((v) => dfs(v, 1));\n  return depths;\n};\n\nconst sumWeights = (g: Graph) => {\n  let result = 0;\n  g.edges().forEach((e) => {\n    result += g.edge(e)!.weight!;\n  });\n  return result;\n};\n\nconst cleanup = (g: Graph) => {\n  const graphLabel = g.graph();\n  graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  g.edges().forEach((e: any) => {\n    const edge = g.edge(e)!;\n    if (edge.nestingEdge) {\n      g.removeEdgeObj(e);\n    }\n  });\n};\n\nexport default { run, cleanup };\n"]}},"error":null,"hash":"1a054d144fc6cc31e6e5e3fa0b7e45a4","cacheData":{"env":{}}}