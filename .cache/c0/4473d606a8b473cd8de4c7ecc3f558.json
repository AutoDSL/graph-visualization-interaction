{"id":"node_modules/@antv/layout/lib/layout/force/force.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force.js.map","includedInParent":true,"mtime":1676178923625},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\src\\layout\\force\\force.ts","includedInParent":true,"mtime":1676178923881},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\package.json","includedInParent":true,"mtime":1676178924413},{"name":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\package.json","includedInParent":true,"mtime":1676178923486},{"name":"d3-force","loc":{"line":49,"column":35,"index":2142},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\d3-force\\src\\index.js"},{"name":"./force-in-a-box","loc":{"line":50,"column":47,"index":2203},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force-in-a-box.js"},{"name":"../../util","loc":{"line":51,"column":21,"index":2246},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\util\\index.js"},{"name":"../base","loc":{"line":52,"column":21,"index":2282},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\base.js"},{"name":"../constants","loc":{"line":53,"column":26,"index":2320},"parent":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\force\\force.js","resolved":"D:\\myData\\前端\\doing\\graph-visualization-interaction\\node_modules\\@antv\\layout\\lib\\layout\\constants.js"}],"generated":{"js":"\"use strict\";\n/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForceLayout = void 0;\nvar d3Force = __importStar(require(\"d3-force\"));\nvar force_in_a_box_1 = __importDefault(require(\"./force-in-a-box\"));\nvar util_1 = require(\"../../util\");\nvar base_1 = require(\"../base\");\nvar constants_1 = require(\"../constants\");\n/**\n * 经典力导布局 force-directed\n */\nvar ForceLayout = /** @class */ (function (_super) {\n    __extends(ForceLayout, _super);\n    function ForceLayout(options) {\n        var _this = _super.call(this) || this;\n        /** 向心力作用点 */\n        _this.center = [0, 0];\n        /** 节点作用力 */\n        _this.nodeStrength = null;\n        /** 边的作用力, 默认为根据节点的入度出度自适应 */\n        _this.edgeStrength = null;\n        /** 是否防止节点相互覆盖 */\n        _this.preventOverlap = false;\n        /** 聚类节点作用力 */\n        _this.clusterNodeStrength = null;\n        /** 聚类边作用力 */\n        _this.clusterEdgeStrength = null;\n        /** 聚类边长度 */\n        _this.clusterEdgeDistance = null;\n        /** 聚类节点大小 / 直径，直径越大，越分散 */\n        _this.clusterNodeSize = null;\n        /** 用于 foci 的力 */\n        _this.clusterFociStrength = null;\n        /** 默认边长度 */\n        _this.linkDistance = 50;\n        /** 迭代阈值的衰减率 [0, 1]，0.028 对应最大迭代数为 300 */\n        _this.alphaDecay = 0.028;\n        /** 停止迭代的阈值 */\n        _this.alphaMin = 0.001;\n        /** 当前阈值 */\n        _this.alpha = 0.3;\n        /** 防止重叠的力强度 */\n        _this.collideStrength = 1;\n        /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n        _this.workerEnabled = false;\n        _this.tick = function () { };\n        /** 布局完成回调 */\n        _this.onLayoutEnd = function () { };\n        /** 是否正在布局 */\n        _this.ticking = undefined;\n        if (options) {\n            _this.updateCfg(options);\n        }\n        return _this;\n    }\n    ForceLayout.prototype.getDefaultCfg = function () {\n        return {\n            center: [0, 0],\n            nodeStrength: null,\n            edgeStrength: null,\n            preventOverlap: false,\n            nodeSize: undefined,\n            nodeSpacing: undefined,\n            linkDistance: 50,\n            forceSimulation: null,\n            alphaDecay: 0.028,\n            alphaMin: 0.001,\n            alpha: 0.3,\n            collideStrength: 1,\n            clustering: false,\n            clusterNodeStrength: -1,\n            clusterEdgeStrength: 0.1,\n            clusterEdgeDistance: 100,\n            clusterFociStrength: 0.8,\n            clusterNodeSize: 10,\n            tick: function () { },\n            onLayoutEnd: function () { },\n            // 是否启用web worker。前提是在web worker里执行布局，否则无效\n            workerEnabled: false\n        };\n    };\n    /**\n     * 初始化\n     * @param {object} data 数据\n     */\n    ForceLayout.prototype.init = function (data) {\n        var self = this;\n        self.nodes = data.nodes || [];\n        var edges = data.edges || [];\n        self.edges = edges.map(function (edge) {\n            var res = {};\n            var expectKeys = [\"targetNode\", \"sourceNode\", \"startPoint\", \"endPoint\"];\n            Object.keys(edge).forEach(function (key) {\n                if (!(expectKeys.indexOf(key) > -1)) {\n                    res[key] = edge[key];\n                }\n            });\n            return res;\n        });\n        self.ticking = false;\n    };\n    /**\n     * 执行布局\n     */\n    ForceLayout.prototype.execute = function (reloadData) {\n        var self = this;\n        var nodes = self.nodes;\n        var edges = self.edges;\n        // 如果正在布局，忽略布局请求\n        if (self.ticking) {\n            return;\n        }\n        var simulation = self.forceSimulation;\n        var alphaMin = self.alphaMin;\n        var alphaDecay = self.alphaDecay;\n        var alpha = self.alpha;\n        if (!simulation) {\n            try {\n                // 定义节点的力\n                var nodeForce = d3Force.forceManyBody();\n                if (self.nodeStrength) {\n                    nodeForce.strength(self.nodeStrength);\n                }\n                simulation = d3Force.forceSimulation().nodes(nodes);\n                if (self.clustering) {\n                    var clusterForce = (0, force_in_a_box_1.default)();\n                    clusterForce\n                        .centerX(self.center[0])\n                        .centerY(self.center[1])\n                        .template(\"force\")\n                        .strength(self.clusterFociStrength);\n                    if (edges) {\n                        clusterForce.links(edges);\n                    }\n                    if (nodes) {\n                        clusterForce.nodes(nodes);\n                    }\n                    clusterForce\n                        .forceLinkDistance(self.clusterEdgeDistance)\n                        .forceLinkStrength(self.clusterEdgeStrength)\n                        .forceCharge(self.clusterNodeStrength)\n                        .forceNodeSize(self.clusterNodeSize);\n                    self.clusterForce = clusterForce;\n                    simulation.force(\"group\", clusterForce);\n                }\n                simulation\n                    .force(\"center\", d3Force.forceCenter(self.center[0], self.center[1]))\n                    .force(\"charge\", nodeForce)\n                    .alpha(alpha)\n                    .alphaDecay(alphaDecay)\n                    .alphaMin(alphaMin);\n                if (self.preventOverlap) {\n                    self.overlapProcess(simulation);\n                }\n                // 如果有边，定义边的力\n                if (edges) {\n                    // d3 的 forceLayout 会重新生成边的数据模型，为了避免污染源数据\n                    var edgeForce = d3Force\n                        .forceLink()\n                        .id(function (d) { return d.id; })\n                        .links(edges);\n                    if (self.edgeStrength) {\n                        edgeForce.strength(self.edgeStrength);\n                    }\n                    if (self.linkDistance) {\n                        edgeForce.distance(self.linkDistance);\n                    }\n                    self.edgeForce = edgeForce;\n                    simulation.force(\"link\", edgeForce);\n                }\n                if (self.workerEnabled && !isInWorker()) {\n                    // 如果不是运行在web worker里，不用web worker布局\n                    self.workerEnabled = false;\n                    console.warn(\"workerEnabled option is only supported when running in web worker.\");\n                }\n                if (!self.workerEnabled) {\n                    simulation\n                        .on(\"tick\", function () {\n                        self.tick();\n                    })\n                        .on(\"end\", function () {\n                        self.ticking = false;\n                        if (self.onLayoutEnd)\n                            self.onLayoutEnd();\n                    });\n                    self.ticking = true;\n                }\n                else {\n                    // worker is enabled\n                    simulation.stop();\n                    var totalTicks = getSimulationTicks(simulation);\n                    for (var currentTick = 1; currentTick <= totalTicks; currentTick++) {\n                        simulation.tick();\n                        // currentTick starts from 1.\n                        postMessage({\n                            nodes: nodes,\n                            currentTick: currentTick,\n                            totalTicks: totalTicks,\n                            type: constants_1.LAYOUT_MESSAGE.TICK\n                        }, undefined);\n                    }\n                    self.ticking = false;\n                }\n                self.forceSimulation = simulation;\n                self.ticking = true;\n            }\n            catch (e) {\n                self.ticking = false;\n                console.warn(e);\n            }\n        }\n        else {\n            if (reloadData) {\n                if (self.clustering && self.clusterForce) {\n                    self.clusterForce.nodes(nodes);\n                    self.clusterForce.links(edges);\n                }\n                simulation.nodes(nodes);\n                if (edges && self.edgeForce)\n                    self.edgeForce.links(edges);\n                else if (edges && !self.edgeForce) {\n                    // d3 的 forceLayout 会重新生成边的数据模型，为了避免污染源数据\n                    var edgeForce = d3Force\n                        .forceLink()\n                        .id(function (d) { return d.id; })\n                        .links(edges);\n                    if (self.edgeStrength) {\n                        edgeForce.strength(self.edgeStrength);\n                    }\n                    if (self.linkDistance) {\n                        edgeForce.distance(self.linkDistance);\n                    }\n                    self.edgeForce = edgeForce;\n                    simulation.force(\"link\", edgeForce);\n                }\n            }\n            if (self.preventOverlap) {\n                self.overlapProcess(simulation);\n            }\n            simulation.alpha(alpha).restart();\n            this.ticking = true;\n        }\n    };\n    /**\n     * 防止重叠\n     * @param {object} simulation 力模拟模型\n     */\n    ForceLayout.prototype.overlapProcess = function (simulation) {\n        var self = this;\n        var nodeSize = self.nodeSize;\n        var nodeSpacing = self.nodeSpacing;\n        var nodeSizeFunc;\n        var nodeSpacingFunc;\n        var collideStrength = self.collideStrength;\n        if ((0, util_1.isNumber)(nodeSpacing)) {\n            nodeSpacingFunc = function () { return nodeSpacing; };\n        }\n        else if ((0, util_1.isFunction)(nodeSpacing)) {\n            nodeSpacingFunc = nodeSpacing;\n        }\n        else {\n            nodeSpacingFunc = function () { return 0; };\n        }\n        if (!nodeSize) {\n            nodeSizeFunc = function (d) {\n                if (d.size) {\n                    if ((0, util_1.isArray)(d.size)) {\n                        var res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                        return res / 2 + nodeSpacingFunc(d);\n                    }\n                    if ((0, util_1.isObject)(d.size)) {\n                        var res = d.size.width > d.size.height ? d.size.width : d.size.height;\n                        return res / 2 + nodeSpacingFunc(d);\n                    }\n                    return d.size / 2 + nodeSpacingFunc(d);\n                }\n                return 10 + nodeSpacingFunc(d);\n            };\n        }\n        else if ((0, util_1.isFunction)(nodeSize)) {\n            nodeSizeFunc = function (d) {\n                var size = nodeSize(d);\n                return size + nodeSpacingFunc(d);\n            };\n        }\n        else if ((0, util_1.isArray)(nodeSize)) {\n            var larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n            var radius_1 = larger / 2;\n            nodeSizeFunc = function (d) { return radius_1 + nodeSpacingFunc(d); };\n        }\n        else if ((0, util_1.isNumber)(nodeSize)) {\n            var radius_2 = nodeSize / 2;\n            nodeSizeFunc = function (d) { return radius_2 + nodeSpacingFunc(d); };\n        }\n        else {\n            nodeSizeFunc = function () { return 10; };\n        }\n        // forceCollide's parameter is a radius\n        simulation.force(\"collisionForce\", d3Force.forceCollide(nodeSizeFunc).strength(collideStrength));\n    };\n    /**\n     * 更新布局配置，但不执行布局\n     * @param {object} cfg 需要更新的配置项\n     */\n    ForceLayout.prototype.updateCfg = function (cfg) {\n        var self = this;\n        if (self.ticking) {\n            self.forceSimulation.stop();\n            self.ticking = false;\n        }\n        self.forceSimulation = null;\n        Object.assign(self, cfg);\n    };\n    ForceLayout.prototype.destroy = function () {\n        var self = this;\n        if (self.ticking) {\n            self.forceSimulation.stop();\n            self.ticking = false;\n        }\n        self.nodes = null;\n        self.edges = null;\n        self.destroyed = true;\n    };\n    return ForceLayout;\n}(base_1.Base));\nexports.ForceLayout = ForceLayout;\n// Return total ticks of d3-force simulation\nfunction getSimulationTicks(simulation) {\n    var alphaMin = simulation.alphaMin();\n    var alphaTarget = simulation.alphaTarget();\n    var alpha = simulation.alpha();\n    var totalTicksFloat = Math.log((alphaMin - alphaTarget) / (alpha - alphaTarget)) /\n        Math.log(1 - simulation.alphaDecay());\n    var totalTicks = Math.ceil(totalTicksFloat);\n    return totalTicks;\n}\n// 判断是否运行在web worker里\nfunction isInWorker() {\n    // eslint-disable-next-line no-undef\n    return (typeof WorkerGlobalScope !== \"undefined\" &&\n        self instanceof WorkerGlobalScope);\n}\n"},"sourceMaps":{"js":{"version":3,"file":"force.js","sourceRoot":"","sources":["../../../src/layout/force/force.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\n\nimport { Edge, Model, PointTuple, ForceLayoutOptions } from \"../types\";\nimport * as d3Force from \"d3-force\";\nimport forceInABox from \"./force-in-a-box\";\nimport { isArray, isFunction, isNumber, isObject } from \"../../util\";\nimport { Base } from \"../base\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n\n/**\n * 经典力导布局 force-directed\n */\nexport class ForceLayout extends Base {\n  /** 向心力作用点 */\n  public center: PointTuple = [0, 0];\n\n  /** 节点作用力 */\n  public nodeStrength: number | null = null;\n\n  /** 边的作用力, 默认为根据节点的入度出度自适应 */\n  public edgeStrength: number | null = null;\n\n  /** 是否防止节点相互覆盖 */\n  public preventOverlap: boolean = false;\n\n  /** 节点大小 / 直径，用于防止重叠时的碰撞检测 */\n  public nodeSize: number | number[] | ((d?: unknown) => number) | undefined;\n\n  /** 节点间距，防止节点重叠时节点之间的最小距离（两节点边缘最短距离） */\n  public nodeSpacing: ((d?: unknown) => number) | undefined;\n\n  /** 是否支持按类聚合 */\n  public clustering: boolean;\n\n  /** 聚类节点作用力 */\n  public clusterNodeStrength: number | null = null;\n\n  /** 聚类边作用力 */\n  public clusterEdgeStrength: number | null = null;\n\n  /** 聚类边长度 */\n  public clusterEdgeDistance: number | null = null;\n\n  /** 聚类节点大小 / 直径，直径越大，越分散 */\n  public clusterNodeSize: number | null = null;\n\n  /** 用于 foci 的力 */\n  public clusterFociStrength: number | null = null;\n\n  /** 默认边长度 */\n  public linkDistance: number = 50;\n\n  /** 自定义 force 方法 */\n  public forceSimulation: any;\n\n  /** 迭代阈值的衰减率 [0, 1]，0.028 对应最大迭代数为 300 */\n  public alphaDecay: number = 0.028;\n\n  /** 停止迭代的阈值 */\n  public alphaMin: number = 0.001;\n\n  /** 当前阈值 */\n  public alpha: number = 0.3;\n\n  /** 防止重叠的力强度 */\n  public collideStrength: number = 1;\n\n  /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n  public workerEnabled: boolean = false;\n\n  public tick: () => void = () => {};\n\n  /** 布局完成回调 */\n  public onLayoutEnd: () => void = () => {};\n\n  /** 是否正在布局 */\n  private ticking: boolean | undefined = undefined;\n\n  private edgeForce: any;\n\n  private clusterForce: any;\n\n  constructor(options?: ForceLayoutOptions) {\n    super();\n    if (options) {\n      this.updateCfg(options);\n    }\n  }\n\n  public getDefaultCfg() {\n    return {\n      center: [0, 0],\n      nodeStrength: null,\n      edgeStrength: null,\n      preventOverlap: false,\n      nodeSize: undefined,\n      nodeSpacing: undefined,\n      linkDistance: 50,\n      forceSimulation: null,\n      alphaDecay: 0.028,\n      alphaMin: 0.001,\n      alpha: 0.3,\n      collideStrength: 1,\n      clustering: false,\n      clusterNodeStrength: -1,\n      clusterEdgeStrength: 0.1,\n      clusterEdgeDistance: 100,\n      clusterFociStrength: 0.8,\n      clusterNodeSize: 10,\n      tick() {},\n      onLayoutEnd() {}, // 布局完成回调\n      // 是否启用web worker。前提是在web worker里执行布局，否则无效\n      workerEnabled: false\n    };\n  }\n\n  /**\n   * 初始化\n   * @param {object} data 数据\n   */\n  public init(data: Model) {\n    const self = this;\n    self.nodes = data.nodes || [];\n    const edges = data.edges || [];\n    self.edges = edges.map((edge) => {\n      const res: any = {};\n      const expectKeys = [\"targetNode\", \"sourceNode\", \"startPoint\", \"endPoint\"];\n      Object.keys(edge).forEach((key: keyof Edge) => {\n        if (!(expectKeys.indexOf(key) > -1)) {\n          res[key] = edge[key];\n        }\n      });\n      return res;\n    });\n    self.ticking = false;\n  }\n\n  /**\n   * 执行布局\n   */\n  public execute(reloadData?: boolean) {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges;\n    // 如果正在布局，忽略布局请求\n    if (self.ticking) {\n      return;\n    }\n    let simulation = self.forceSimulation;\n    const alphaMin = self.alphaMin;\n    const alphaDecay = self.alphaDecay;\n    const alpha = self.alpha;\n    if (!simulation) {\n      try {\n        // 定义节点的力\n        const nodeForce = d3Force.forceManyBody();\n        if (self.nodeStrength) {\n          nodeForce.strength(self.nodeStrength);\n        }\n        simulation = d3Force.forceSimulation().nodes(nodes as any);\n\n        if (self.clustering) {\n          const clusterForce = forceInABox() as any;\n          clusterForce\n            .centerX(self.center[0])\n            .centerY(self.center[1])\n            .template(\"force\")\n            .strength(self.clusterFociStrength);\n          if (edges) {\n            clusterForce.links(edges);\n          }\n          if (nodes) {\n            clusterForce.nodes(nodes);\n          }\n          clusterForce\n            .forceLinkDistance(self.clusterEdgeDistance)\n            .forceLinkStrength(self.clusterEdgeStrength)\n            .forceCharge(self.clusterNodeStrength)\n            .forceNodeSize(self.clusterNodeSize);\n\n          self.clusterForce = clusterForce;\n          simulation.force(\"group\", clusterForce);\n        }\n        simulation\n          .force(\"center\", d3Force.forceCenter(self.center[0], self.center[1]))\n          .force(\"charge\", nodeForce)\n          .alpha(alpha)\n          .alphaDecay(alphaDecay)\n          .alphaMin(alphaMin);\n\n        if (self.preventOverlap) {\n          self.overlapProcess(simulation);\n        }\n        // 如果有边，定义边的力\n        if (edges) {\n          // d3 的 forceLayout 会重新生成边的数据模型，为了避免污染源数据\n          const edgeForce = d3Force\n            .forceLink()\n            .id((d: any) => d.id)\n            .links(edges);\n          if (self.edgeStrength) {\n            edgeForce.strength(self.edgeStrength);\n          }\n          if (self.linkDistance) {\n            edgeForce.distance(self.linkDistance);\n          }\n          self.edgeForce = edgeForce;\n          simulation.force(\"link\", edgeForce);\n        }\n        if (self.workerEnabled && !isInWorker()) {\n          // 如果不是运行在web worker里，不用web worker布局\n          self.workerEnabled = false;\n          console.warn(\n            \"workerEnabled option is only supported when running in web worker.\"\n          );\n        }\n        if (!self.workerEnabled) {\n          simulation\n            .on(\"tick\", () => {\n              self.tick();\n            })\n            .on(\"end\", () => {\n              self.ticking = false;\n              if (self.onLayoutEnd) self.onLayoutEnd();\n            });\n          self.ticking = true;\n        } else {\n          // worker is enabled\n          simulation.stop();\n          const totalTicks = getSimulationTicks(simulation);\n          for (let currentTick = 1; currentTick <= totalTicks; currentTick++) {\n            simulation.tick();\n            // currentTick starts from 1.\n            postMessage(\n              {\n                nodes,\n                currentTick,\n                totalTicks,\n                type: LAYOUT_MESSAGE.TICK\n              },\n              undefined as any\n            );\n          }\n          self.ticking = false;\n        }\n\n        self.forceSimulation = simulation;\n        self.ticking = true;\n      } catch (e) {\n        self.ticking = false;\n        console.warn(e);\n      }\n    } else {\n      if (reloadData) {\n        if (self.clustering && self.clusterForce) {\n          self.clusterForce.nodes(nodes);\n          self.clusterForce.links(edges);\n        }\n        simulation.nodes(nodes);\n        if (edges && self.edgeForce) self.edgeForce.links(edges);\n        else if (edges && !self.edgeForce) {\n          // d3 的 forceLayout 会重新生成边的数据模型，为了避免污染源数据\n          const edgeForce = d3Force\n            .forceLink()\n            .id((d: any) => d.id)\n            .links(edges);\n          if (self.edgeStrength) {\n            edgeForce.strength(self.edgeStrength);\n          }\n          if (self.linkDistance) {\n            edgeForce.distance(self.linkDistance);\n          }\n          self.edgeForce = edgeForce;\n          simulation.force(\"link\", edgeForce);\n        }\n      }\n      if (self.preventOverlap) {\n        self.overlapProcess(simulation);\n      }\n      simulation.alpha(alpha).restart();\n      this.ticking = true;\n    }\n  }\n\n  /**\n   * 防止重叠\n   * @param {object} simulation 力模拟模型\n   */\n  public overlapProcess(simulation: any) {\n    const self = this;\n    const nodeSize = self.nodeSize;\n    const nodeSpacing = self.nodeSpacing;\n    let nodeSizeFunc: (d: any) => number;\n    let nodeSpacingFunc: any;\n    const collideStrength = self.collideStrength;\n\n    if (isNumber(nodeSpacing)) {\n      nodeSpacingFunc = () => nodeSpacing;\n    } else if (isFunction(nodeSpacing)) {\n      nodeSpacingFunc = nodeSpacing;\n    } else {\n      nodeSpacingFunc = () => 0;\n    }\n\n    if (!nodeSize) {\n      nodeSizeFunc = (d) => {\n        if (d.size) {\n          if (isArray(d.size)) {\n            const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n            return res / 2 + nodeSpacingFunc(d);\n          }  if (isObject(d.size)) {\n            const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n            return res / 2 + nodeSpacingFunc(d);\n          }\n          return d.size / 2 + nodeSpacingFunc(d);\n        }\n        return 10 + nodeSpacingFunc(d);\n      };\n    } else if (isFunction(nodeSize)) {\n      nodeSizeFunc = (d) => {\n        const size = nodeSize(d);\n        return size + nodeSpacingFunc(d);\n      };\n    } else if (isArray(nodeSize)) {\n      const larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n      const radius = larger / 2;\n      nodeSizeFunc = (d) => radius + nodeSpacingFunc(d);\n    } else if (isNumber(nodeSize)) {\n      const radius = nodeSize / 2;\n      nodeSizeFunc = (d) => radius + nodeSpacingFunc(d);\n    } else {\n      nodeSizeFunc = () => 10;\n    }\n\n    // forceCollide's parameter is a radius\n    simulation.force(\n      \"collisionForce\",\n      d3Force.forceCollide(nodeSizeFunc).strength(collideStrength)\n    );\n  }\n\n  /**\n   * 更新布局配置，但不执行布局\n   * @param {object} cfg 需要更新的配置项\n   */\n  public updateCfg(cfg: ForceLayoutOptions) {\n    const self = this;\n    if (self.ticking) {\n      self.forceSimulation.stop();\n      self.ticking = false;\n    }\n    self.forceSimulation = null;\n    Object.assign(self, cfg);\n  }\n\n  public destroy() {\n    const self = this;\n    if (self.ticking) {\n      self.forceSimulation.stop();\n      self.ticking = false;\n    }\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  }\n}\n\n// Return total ticks of d3-force simulation\nfunction getSimulationTicks(simulation: any): number {\n  const alphaMin = simulation.alphaMin();\n  const alphaTarget = simulation.alphaTarget();\n  const alpha = simulation.alpha();\n  const totalTicksFloat =\n    Math.log((alphaMin - alphaTarget) / (alpha - alphaTarget)) /\n    Math.log(1 - simulation.alphaDecay());\n  const totalTicks = Math.ceil(totalTicksFloat);\n  return totalTicks;\n}\ndeclare const WorkerGlobalScope: any;\n\n// 判断是否运行在web worker里\nfunction isInWorker(): boolean {\n  // eslint-disable-next-line no-undef\n  return (\n    typeof WorkerGlobalScope !== \"undefined\" &&\n    self instanceof WorkerGlobalScope\n  );\n}\n"]}},"error":null,"hash":"f1ab73d5df6dfe24ec6a26877dd9c7cf","cacheData":{"env":{}}}