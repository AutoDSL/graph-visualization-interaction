{"id":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","dependencies":[{"name":"D:\\myData\\前端\\doing\\AutoPL\\package.json","includedInParent":true,"mtime":1674182060254},{"name":"D:\\myData\\前端\\doing\\AutoPL\\node_modules\\@antv\\algorithm\\package.json","includedInParent":true,"mtime":1674179681169}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar defaultCompare = function defaultCompare(a, b) {\n  return a - b;\n};\n\nvar MinBinaryHeap =\n/** @class */\nfunction () {\n  function MinBinaryHeap(compareFn) {\n    if (compareFn === void 0) {\n      compareFn = defaultCompare;\n    }\n\n    this.compareFn = compareFn;\n    this.list = [];\n  }\n\n  MinBinaryHeap.prototype.getLeft = function (index) {\n    return 2 * index + 1;\n  };\n\n  MinBinaryHeap.prototype.getRight = function (index) {\n    return 2 * index + 2;\n  };\n\n  MinBinaryHeap.prototype.getParent = function (index) {\n    if (index === 0) {\n      return null;\n    }\n\n    return Math.floor((index - 1) / 2);\n  };\n\n  MinBinaryHeap.prototype.isEmpty = function () {\n    return this.list.length <= 0;\n  };\n\n  MinBinaryHeap.prototype.top = function () {\n    return this.isEmpty() ? undefined : this.list[0];\n  };\n\n  MinBinaryHeap.prototype.delMin = function () {\n    var top = this.top();\n    var bottom = this.list.pop();\n\n    if (this.list.length > 0) {\n      this.list[0] = bottom;\n      this.moveDown(0);\n    }\n\n    return top;\n  };\n\n  MinBinaryHeap.prototype.insert = function (value) {\n    if (value !== null) {\n      this.list.push(value);\n      var index = this.list.length - 1;\n      this.moveUp(index);\n      return true;\n    }\n\n    return false;\n  };\n\n  MinBinaryHeap.prototype.moveUp = function (index) {\n    var parent = this.getParent(index);\n\n    while (index && index > 0 && this.compareFn(this.list[parent], this.list[index]) > 0) {\n      // swap\n      var tmp = this.list[parent];\n      this.list[parent] = this.list[index];\n      this.list[index] = tmp; // [this.list[index], this.list[parent]] = [this.list[parent], this.list[index]]\n\n      index = parent;\n      parent = this.getParent(index);\n    }\n  };\n\n  MinBinaryHeap.prototype.moveDown = function (index) {\n    var _a;\n\n    var element = index;\n    var left = this.getLeft(index);\n    var right = this.getRight(index);\n    var size = this.list.length;\n\n    if (left !== null && left < size && this.compareFn(this.list[element], this.list[left]) > 0) {\n      element = left;\n    } else if (right !== null && right < size && this.compareFn(this.list[element], this.list[right]) > 0) {\n      element = right;\n    }\n\n    if (index !== element) {\n      _a = [this.list[element], this.list[index]], this.list[index] = _a[0], this.list[element] = _a[1];\n      this.moveDown(element);\n    }\n  };\n\n  return MinBinaryHeap;\n}();\n\nvar _default = MinBinaryHeap;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@antv/algorithm/lib/structs/binary-heap.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}}],"sources":{"node_modules/@antv/algorithm/lib/structs/binary-heap.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar defaultCompare = function defaultCompare(a, b) {\n  return a - b;\n};\n\nvar MinBinaryHeap =\n/** @class */\nfunction () {\n  function MinBinaryHeap(compareFn) {\n    if (compareFn === void 0) {\n      compareFn = defaultCompare;\n    }\n\n    this.compareFn = compareFn;\n    this.list = [];\n  }\n\n  MinBinaryHeap.prototype.getLeft = function (index) {\n    return 2 * index + 1;\n  };\n\n  MinBinaryHeap.prototype.getRight = function (index) {\n    return 2 * index + 2;\n  };\n\n  MinBinaryHeap.prototype.getParent = function (index) {\n    if (index === 0) {\n      return null;\n    }\n\n    return Math.floor((index - 1) / 2);\n  };\n\n  MinBinaryHeap.prototype.isEmpty = function () {\n    return this.list.length <= 0;\n  };\n\n  MinBinaryHeap.prototype.top = function () {\n    return this.isEmpty() ? undefined : this.list[0];\n  };\n\n  MinBinaryHeap.prototype.delMin = function () {\n    var top = this.top();\n    var bottom = this.list.pop();\n\n    if (this.list.length > 0) {\n      this.list[0] = bottom;\n      this.moveDown(0);\n    }\n\n    return top;\n  };\n\n  MinBinaryHeap.prototype.insert = function (value) {\n    if (value !== null) {\n      this.list.push(value);\n      var index = this.list.length - 1;\n      this.moveUp(index);\n      return true;\n    }\n\n    return false;\n  };\n\n  MinBinaryHeap.prototype.moveUp = function (index) {\n    var parent = this.getParent(index);\n\n    while (index && index > 0 && this.compareFn(this.list[parent], this.list[index]) > 0) {\n      // swap\n      var tmp = this.list[parent];\n      this.list[parent] = this.list[index];\n      this.list[index] = tmp; // [this.list[index], this.list[parent]] = [this.list[parent], this.list[index]]\n\n      index = parent;\n      parent = this.getParent(index);\n    }\n  };\n\n  MinBinaryHeap.prototype.moveDown = function (index) {\n    var _a;\n\n    var element = index;\n    var left = this.getLeft(index);\n    var right = this.getRight(index);\n    var size = this.list.length;\n\n    if (left !== null && left < size && this.compareFn(this.list[element], this.list[left]) > 0) {\n      element = left;\n    } else if (right !== null && right < size && this.compareFn(this.list[element], this.list[right]) > 0) {\n      element = right;\n    }\n\n    if (index !== element) {\n      _a = [this.list[element], this.list[index]], this.list[index] = _a[0], this.list[element] = _a[1];\n      this.moveDown(element);\n    }\n  };\n\n  return MinBinaryHeap;\n}();\n\nvar _default = MinBinaryHeap;\nexports.default = _default;"},"lineCount":109}},"error":null,"hash":"d5f5ab1115646d4fc35f9e84fdc056a1","cacheData":{"env":{}}}